{"version":3,"file":"static/js/281.8c916779.chunk.js","mappings":"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","sources":["dashboard/config.tsx","features/year/yearSlice.ts","features/plotType/plotTypeSlice.ts","features/data/dataSlice.ts","features/controls/controlsSlice.ts","app/store.ts","hooks/useTouchOutside.ts","dashboard/CustomTooltipWithBounds.tsx","dashboard/utils/misc.ts","app/hooks.ts","dashboard/utils/colors.ts","dashboard/icons/Compare.svg","dashboard/utils/domain.ts","dashboard/selectors.ts","hooks/useSelect.tsx","dashboard/BubblePlot.tsx","dashboard/MapPlot.tsx","dashboard/LinePlot.tsx","dashboard/BarPlot.tsx","dashboard/utils/url.ts","dashboard/sharing.tsx","features/year/YearSlider.tsx","dashboard/icons.tsx","features/plotType/PlotTypeSelect.tsx","features/controls/Controls.tsx","features/data/DataManager.tsx","dashboard/Url.tsx","dashboard/Legend.tsx","dashboard/Nav.tsx","dashboard/icons/logo.svg","dashboard/Dashboard.tsx"],"sourcesContent":["import {zipObj, indexBy, prop, curry} from \"ramda\";\n\nexport const DATA_DIR = process.env.REACT_APP_ENV === 'production' ?\n    'https://storage.googleapis.com/statistipedia/data' : 'data';\n\nexport enum AxisLabelSource {\n    VAR,\n    COMPARE,\n    YEAR\n}\n\nexport type PlotType = {\n    name: string\n    xAxisLabelSource?: AxisLabelSource\n    hideAxisLabels?: boolean\n    fields: {\n        x?: string\n        y?: string\n        z?: string\n    }\n};\n\nexport const PLOT_TYPES: PlotType[] = [{\n    name: 'bubble',\n    xAxisLabelSource: AxisLabelSource.VAR,\n    fields: {\n        x: 'X-Axis',\n        y: 'Y-Axis',\n        z: 'Size'\n    }\n}, {\n    name: 'line',  // aka. time series chart\n    xAxisLabelSource: AxisLabelSource.YEAR,\n    fields: {\n        // X-Axis is always time. Existing selection is kept, only disabled\n        y: 'Y-Axis'\n    }\n}, {\n    name: 'bar',\n    xAxisLabelSource: AxisLabelSource.COMPARE,\n    fields: {\n        // compare: 'Compare by',  // Secondary grouping nested under \"Compare by\"\n        y: 'Value'\n    }\n}, {\n    name: 'map',\n    hideAxisLabels: true,\n    fields: {\n        y: 'Color'\n    }\n}];\n\nexport const PLOT_TYPES_MAP: {[k: string]: PlotType} =\n    zipObj(PLOT_TYPES.map(p => p.name), PLOT_TYPES);\n\nexport type FeatureRanges = {\n    x: [number, number]\n    y: [number, number]\n    z: [number, number]\n    year: [number, number]\n};\n\nexport type ShareSize = {\n  name: string,\n  width: number,\n  height: number\n};\n\nexport const SHARE_SIZES: ShareSize[] = [{\n    name: 'Instagram Square',\n    width: 1080,\n    height: 1080\n}, {\n    name: 'Twitter',\n    width: 1024,\n    height: 512\n}, {\n    name: 'Pinterest',\n    width: 800,\n    height: 1200\n}, {\n    name: 'Tumblr',\n    width: 1280,\n    height: 1920\n}];\n\nexport const SHARE_SIZE_MAP: {[k: string]: ShareSize} =\n    zipObj(SHARE_SIZES.map(p => p.name), SHARE_SIZES);\n\nexport type Area = {\n    id: string\n    abbrev: string\n    name: string\n    geoid: string\n    link: string\n}\n\nexport interface IDashboardProps {\n    area?: string;\n    compare?: string[]\n}\n\nconst formatNum = (minDigits: number, maxDigits: number, num: number) : string => {\n    const options = {maximumFractionDigits: maxDigits, minimumFractionDigits: minDigits};\n    return Number(num).toLocaleString(undefined, options);\n};\n\nconst justAddCommas = curry(formatNum)(undefined, undefined);\nconst removeDecimals = curry(formatNum)(undefined, 0);\nconst oneDecimalPlace = curry(formatNum)(undefined, 1);\nconst twoDecimalPlaces = curry(formatNum)(undefined, 2);\nconst dollarsAndCents = curry(formatNum)(2, 2);\n\nexport type ColorType = 'nominal' | 'ordinal' | 'scale'\nexport type FormatType = 'numeric' | 'percent' | 'dollars' | 'minutes' | 'hours' | 'years' | 'election'\n\nexport const FIELD_TYPE_FORMAT_VALUES_MAP: {[name: string]: (value: any) => string} = {\n    'geo': _ => { throw new Error('Should not be asked to format value') },\n    'numeric': justAddCommas,\n    'percent': (value) => oneDecimalPlace(value) + '%',\n    'dollars': (value) => '$' + (value >= 100 ? removeDecimals(value) : dollarsAndCents(value)),\n    'minutes': (value) => removeDecimals(value) + ' minutes',\n    'hours': (value) => removeDecimals(value) + ' hours',\n    'years': (value) => removeDecimals(value) + ' years',\n    'election': (value) => (value > 0 ? 'R' : 'D') + '+' + Math.abs(removeDecimals(value)),\n};\n\nexport type FieldType = {\n    name: string\n    formatValue: (value: any) => string\n}\n\nexport type FieldValue = {\n    shortName: string\n    mediumName: string\n    fullName: string\n    value: string | number\n}\n\nexport type ScaleFieldValue = FieldValue & {\n    value: number\n}\n\nexport type DataField = {\n    id: string\n    name: string\n    description: string\n    group: string\n    allowCompares: boolean\n    values?: {[cbfvId: string]: FieldValue}\n}\n\nexport type ColoredField = DataField & {\n    colorType: ColorType\n}\n\nexport type CompareByField = ColoredField & {\n    values: {[cbfvId: string]: FieldValue}\n}\n\nexport type CompareByFields = {\n    [id: string]: CompareByField\n}\n\ntype FeatureFieldCfg = {\n    formatType: FormatType\n    colorType?: ColorType\n    group: string\n    orientation?: 'horizontal' | 'vertical'\n}\n\nexport type FeatureField = DataField & {\n    formatType: FormatType\n    colorType?: ColorType\n}\n\nexport type ColoredFeatureField = FeatureField & ColoredField\n\nexport const FIELD_CFGS: {[id: string]: FeatureFieldCfg} = {\n    'pct_total_pop': {\n        formatType: 'percent',\n        group: 'General'\n    },\n    'pres_r_vs_d': {\n        formatType: 'election',\n        colorType: 'scale',\n        group: 'Politics',\n        orientation: 'horizontal'\n    },\n    // 'pop_density': {\n    //     formatType: 'numeric',\n    //     group: 'General'\n    // },\n    'gross_rent': {\n        formatType: 'dollars',\n        group: 'Housing'\n    },\n    'prop_value': {\n        formatType: 'dollars',\n        group: 'Housing'\n    },\n    'prop_tax': {\n        formatType: 'dollars',\n        group: 'Housing'\n    },\n    'income': {\n        formatType: 'dollars',\n        group: 'Employment'\n    },\n    'income_per_hr': {\n        formatType: 'dollars',\n        group: 'Employment'\n    },\n    'hh_income': {\n        formatType: 'dollars',\n        group: 'Employment'\n    },\n    'work_hrs_per_wk': {\n        formatType: 'hours',\n        group: 'Employment'\n    },\n    'commute_time': {\n        formatType: 'minutes',\n        group: 'Employment'\n    },\n    'avg_age': {\n        formatType: 'years',\n        group: 'Demographics'\n    },\n    'wh_pct': {\n        formatType: 'percent',\n        group: 'Demographics'\n    },\n    'bl_pct': {\n        formatType: 'percent',\n        group: 'Demographics'\n    },\n    'as_pct': {\n        formatType: 'percent',\n        group: 'Demographics'\n    },\n    'hi_pct': {\n        formatType: 'percent',\n        group: 'Demographics'\n    }\n};\n\nexport type CompareByFieldCfg = {\n    colorType: 'nominal' | 'ordinal' | 'scale',\n    group: string\n}\n\nexport const COMPARE_BY_FIELD_CFGS: {[id: string]: CompareByFieldCfg} = {\n    'sex': {\n        colorType: 'nominal',\n        group: 'Demographic'\n    },\n    'age': {\n        colorType: 'ordinal',\n        group: 'Demographic'\n    },\n    'race': {\n        colorType: 'nominal',\n        group: 'Demographic'\n    },\n    'marital': {\n        colorType: 'nominal',\n        group: 'Demographic'\n    },\n    'education': {\n        colorType: 'nominal',\n        group: 'Demographic'\n    }\n}\n\nexport type DataValue = any & {\n    geoid: string\n    year: number\n}\n\nexport type DerivedDataValueSet = any & {\n    geoid: string\n    name: string\n    year: number\n    x: number\n    y: number\n    z: number\n}\n\nexport type ApiData = {\n    areas: {[id: string]: Area},\n    levels: {[id: string]: DataField},\n    fields: {[id: string]: DataField},\n    compareByFields: CompareByFields,\n    years: number[],\n    divisions: { byLevel: {[levelId: string]: any[]} }\n    values: DerivedDataValueSet[]\n    topologies: { byAreaAndLevel: {[areaId: string]: {[levelId: string]: any}}}\n}\n\nexport type Data = {\n    areas: { byId: {[id: string]: Area}, allIds: string[]}\n    levels: { byId: {[id: string]: DataField}, allIds: string[]}\n    fields: { byId: {[id: string]: FeatureField}, allIds: string[]}\n    compareByFields: { byId: CompareByFields, allIds: string[]}\n    years: number[],\n    divisions: { byLevel: {[levelId: string]: any[]} }\n    values: DerivedDataValueSet[]\n    topologies: { byAreaAndLevel: {[areaId: string]: {[levelId: string]: any}}}\n}\n\nexport interface ControlValues {\n    area: string,\n    level: string,\n    compare: string[],\n    x: string,\n    y: string,\n    z: string\n}\n\nexport type UrlParams = {\n    level?: string\n    area?: string\n    compare?: string[]\n    plot?: string\n    x?: string\n    y?: string\n    z?: string\n}\n\nexport const getOgImageUrl = (params: IDashboardProps) : string => {\n    return '';\n};\n\ntype PlotPresetCfg = {\n    title: string\n    params: UrlParams\n}\n\nexport type PlotPreset = {\n    title: string\n    area: Area\n    url: string\n}\n\nexport const PLOT_PRESETS: PlotPresetCfg[] = [{\n    title: 'Hourly income by sex / marital status',\n    params: {\n        area: 'us',\n        level: 'state',\n        compare: ['sex', 'marital'],\n        plot: 'bubble',\n        x: 'work_hrs_per_wk',\n        y: 'income_per_hr'\n    }\n}, {\n    title: 'Hourly income by education',\n    params: {\n        area: 'us',\n        level: 'state',\n        compare: ['education'],\n        plot: 'bar',\n        x: 'work_hrs_per_wk',\n        y: 'income_per_hr'\n    }\n}, {\n    title: 'NY county populations',\n    params: {\n        area: 'ny',\n        level: 'county',\n        plot: 'map',\n        y: 'pct_total_pop'\n    }\n}];\n\nexport enum LegendCorner {\n    NW = 'nw',\n    NE = 'ne',\n    SW = 'sw',\n    SE = 'se'\n}\n\nexport type LegendPosition = {\n    corner: LegendCorner\n    closestDataPoint: number\n}\n\nexport const BOTTOM_DRAWER_HEIGHT = 320;\nexport const BOTTOM_DRAWER_CORNER = 4;\nexport const PCT_V_SPACE_LEFT_FOR_LEGEND = 1/3;\nexport const ANIMATION_DURATION = 1000;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\n\nexport interface YearState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: YearState = {\n  value: 2020,\n  status: 'idle',\n};\n\nexport const yearSlice = createSlice({\n  name: 'year',\n  initialState,\n  reducers: {\n    setYear: (state, action: PayloadAction<number>) => {\n      const value = action.payload;\n      if (value != null && value !== state.value) {\n          state.value = value;\n      }\n    }\n  }\n});\n\nexport const { setYear } = yearSlice.actions;\nexport const selectYear = (state: RootState) => state.year.value;\nexport default yearSlice.reducer;\n","import {PLOT_TYPES_MAP} from \"../../dashboard/config\";\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\n\nexport interface PlotTypeState {\n    value: string;\n    status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: PlotTypeState = {\n    value: 'map',\n    status: 'idle',\n};\n\nexport const plotTypeSlice = createSlice({\n    name: 'plotType',\n    initialState,\n    // The `reducers` field lets us define reducers and generate associated actions\n    reducers: {\n        // Use the PayloadAction type to declare the contents of `action.payload`\n        setPlotType: (state, action: PayloadAction<string>) => {\n            const value = action.payload;\n            if (value != null && value !== '' /* && state.value !== value */)\n                state.value = value;\n        },\n    }\n});\n\nexport const { setPlotType } = plotTypeSlice.actions;\nexport const selectPlotType = (state: RootState) => PLOT_TYPES_MAP[state.plotType.value];\nexport default plotTypeSlice.reducer;\n","import {createSelector, createSlice, PayloadAction} from '@reduxjs/toolkit';\nimport {RootState} from '../../app/store';\nimport {\n    ApiData, Area, COMPARE_BY_FIELD_CFGS, CompareByField, CompareByFields,\n    Data, DataField, DerivedDataValueSet, FIELD_CFGS\n} from \"../../dashboard/config\";\nimport {map} from 'ramda';\nimport masterData from '../../dashboard/data/master.json'\n\nexport interface DataState {\n    value: Data,\n    status: 'idle' | 'loading' | 'failed';\n}\n\nconst augmentField = (cfg: {[id: string]: any}, f: DataField) : DataField =>\n    ({...f, ...cfg[f.id]});\n\n/**\n * Takes (partial) incoming API data and formats it for Redux store\n */\nconst processData = (data: ApiData) : Data => {\n    // @ts-ignore\n    const newData: Data = {...data};\n    if (!!data.areas) {\n        newData['areas'] = {\n            byId: map((a: Area) => ({\n                ...a,\n                link: `../places/us${a.id === 'us' ? '' : '/' + a.id}`\n            }), data.areas),\n            allIds: Object.keys(data.areas)\n        }\n    }\n    if (!!data.levels) {\n        newData['levels'] = {\n            byId: data.levels,\n            allIds: Object.keys(data.levels)\n        }\n    }\n    if (!!data.fields) {\n        newData['fields'] = {\n            byId: map(f => augmentField(FIELD_CFGS, f), data.fields),\n            allIds: Object.keys(FIELD_CFGS)\n        }\n    }\n    if (!!data.compareByFields) {\n        newData['compareByFields'] = {\n            byId: map(f => augmentField(COMPARE_BY_FIELD_CFGS, f), data.compareByFields),\n            allIds: Object.keys(data.compareByFields)\n        }\n    }\n    return newData;\n};\n\nconst initialState: DataState = {\n    value: {\n        // @ts-ignore\n        ...processData(masterData),\n        values: [],\n        topologies: {byAreaAndLevel: {}}\n    },\n    status: 'idle',\n};\n\nexport const dataSlice = createSlice({\n    name: 'data',\n    initialState,\n    reducers: {\n        setData: (state, action: PayloadAction<any>) => {\n            const newData = processData(action.payload);\n            state.value.values = [];\n            state.value = {...state.value, ...newData};\n        },\n        clearDataValues: (state) => {\n            state.value.values = [];\n        }\n    }\n});\n\nexport const { setData, clearDataValues } = dataSlice.actions;\nexport const selectAreas = (state: RootState) => state.data.value?.areas;\nexport const selectFields = (state: RootState) => state.data.value?.fields;\nexport const selectCompareByFields = (state: RootState) :\n    {byId: CompareByFields, allIds: string[]} => state.data.value?.compareByFields;\nexport const selectLevels = (state: RootState) => state.data.value?.levels;\nexport const selectTopologiesByAreaAndLevel = (state: RootState) =>\n    state.data.value?.topologies.byAreaAndLevel;\nexport const selectDivisionsByLevel = (state: RootState) =>\n    state.data.value?.divisions.byLevel;\nexport const selectValues = (state: RootState) : DerivedDataValueSet[] =>\n    state.data.value?.values;\n\nexport const selectAllCompareByFieldDetails = createSelector(\n    selectCompareByFields,\n    (compareByFields) : CompareByField[] => {\n        return compareByFields ? compareByFields.allIds\n            .map(id => compareByFields.byId[id])\n            : null\n    }\n);\n\nexport const selectFeatureFields = createSelector(\n    selectFields,\n    (fields) : DataField[] => \n        fields ? fields.allIds.map(id => fields.byId[id]) : null\n);\n\nexport const selectGeoDivisionFields = createSelector(\n    selectLevels,\n    (levels) : DataField[] => {\n        return Object.values(levels.byId).map(level => ({\n            ...level,\n            group: 'Geographic',\n            type: 'geo'\n        }))\n    }\n);\n\nexport default dataSlice.reducer;\n","import {createSlice, PayloadAction} from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport masterData from '../../dashboard/data/master.json';\nimport {ControlValues} from \"../../dashboard/config\";\nimport {equals} from 'ramda';\n\nexport interface ControlsState {\n    value: ControlValues,\n    loaded: boolean\n}\n\nconst defaultFields = Object.keys(masterData.fields);\n\nconst initialState: ControlsState = {\n    value: {\n        area: \"us\",\n        compare: [],\n        level: \"state\",\n        x: defaultFields[0],\n        y: defaultFields[1],\n        z: \"pct_total_pop\"\n    },\n    loaded: false\n};\n\nexport const controlsSlice = createSlice({\n    name: 'controls',\n    initialState,\n    // The `reducers` field lets us define reducers and generate associated actions\n    reducers: {\n        setControls: (state, action: PayloadAction<Object>) => {\n            const newValue = {...state.value, ...action.payload};\n            if (!equals(state.value, newValue)) {\n                state.value = newValue;\n            }\n        },\n        setLoaded: (state) => {\n            state.loaded = true;\n        }\n    }\n});\n\nexport const { setControls, setLoaded } = controlsSlice.actions;\n\nexport const selectActualControlValues = (state: RootState) : ControlValues =>\n    state.controls.value;\n\nexport const selectControlsLoaded = (state: RootState) : boolean =>\n    state.controls.loaded;\n\nexport default controlsSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport yearReducer from '../features/year/yearSlice';\nimport plotTypeReducer from '../features/plotType/plotTypeSlice';\nimport dataReducer from '../features/data/dataSlice';\nimport controlsReducer from '../features/controls/controlsSlice';\n\nexport const store = configureStore({\n  reducer: {\n    data: dataReducer,\n    year: yearReducer,\n    plotType: plotTypeReducer,\n    controls: controlsReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import { useEffect } from \"react\"\n\nconst useTouchOutside = (elementRef, onClick) => {\n    useEffect(() => {\n        const clickListener = event => {\n            if (!elementRef.current || elementRef.current.contains(event.target)) {\n                return\n            }\n            onClick(event)\n        }\n        // const moveListener = event => {\n        //     if (!elementRef.current || elementRef.current.contains(event.target)) {\n        //         return\n        //     }\n        //     onMove(event);\n        // }\n        document.addEventListener(\"touchstart\", clickListener)\n        // document.addEventListener(\"mousemove\", moveListener)\n        return () => {\n            document.removeEventListener(\"touchstart\", clickListener)\n            // document.removeEventListener(\"mousemove\", moveListener)\n        }\n    }, [elementRef, onClick])\n}\n\nexport default useTouchOutside\n","import React from 'react';\nimport { Tooltip } from '@visx/tooltip';\nimport { withBoundingRects } from '@visx/bounds';\n\nfunction CustomTooltipWithBounds({\n                                     left: initialLeft,\n                                     top: initialTop,\n                                     offsetLeft = 20,\n                                     offsetTop = 20,\n                                     rect,\n                                     parentRect,\n                                     getRects,\n                                     children,\n                                     style,\n                                     ...otherProps\n                                 }) {\n\n    let left = initialLeft;\n    let top = initialTop;\n\n    if (parentRect) {\n        if (parentRect.width > 0) {\n            if (left + offsetLeft + rect.width > parentRect.width) {\n                left = parentRect.width - rect.width - offsetLeft;\n            }\n            if (left < 0) {\n                left = 0;\n            }\n        }\n\n        if (parentRect.height > 0) {\n            if (top + offsetTop + rect.height > parentRect.height) {\n                top = parentRect.height - rect.height - offsetTop;\n            }\n            if (top < 0) {\n                top = 0;\n            }\n        }\n    }\n\n    return (\n        <Tooltip\n            style={{ top: 0, transform: `translate(${left}px, ${top}px)`, ...style }}\n            {...otherProps}\n        >\n            {children}\n        </Tooltip>\n    );\n}\nexport default withBoundingRects(CustomTooltipWithBounds);\n","import {intersection, reduce, tail} from 'ramda';\n\n// bind ::  [a] -> (a -> [b]) -> [b]\nconst bind = xs => f => xs.flatMap(f);\n\n// foldr :: (a -> b -> b) -> b -> [a] -> b\nconst foldr = f => a => xs =>\n    xs.reduceRight((a, x) => f(x)(a), a);\n\nexport const cartProdN = foldr(\n    xs => as =>\n        bind(as)(\n            x => bind(xs)(\n                a => [\n                    [a].concat(x)\n                ]\n            )\n        )\n)([\n    []\n]);\n\n// TODO: Are these (above and below) the same?\n\nexport function cartProduct<T>(...sets: T[][]) : T[][] {\n    return sets.reduce((acc: T[][], set: T[]) =>\n            acc.flatMap((x) => set.map(y => [...x, y])),\n        [[]]);\n}\n\nexport const intersectAll = (xs) => reduce(intersection, xs[0], tail(xs));\n\nexport const allValuesNotNull = (obj: Object) : boolean =>\n    Object.values(obj).every(f => f != null);\n\nexport const flattenArrayOfObjects = (arr: Object[]) : Object => {\n    const flatObject = {};\n    for(let i = 0; i < arr.length; i++) {\n        for(const property in arr[i]){\n            flatObject[`${property}`] = arr[i][property];\n        }\n    }\n    return flatObject;\n};\n\nexport function firstAndLast<T>(values: T[]) : T[] {\n    return [values[0], values[values.length - 1]];\n}\n\nexport function nestedFirstAndLast<T>(values: T[][]) : T[][] {\n    return values.map(firstAndLast);\n}\n\nexport function capitalize(s: string) : string {\n    return s[0].toUpperCase() + s.slice(1);\n}\n\nexport const sum = (array) => array.reduce((a, b) => a + b);\nexport const average = (array) => sum(array) / array.length;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import {CompareByField, FieldValue} from \"../config\";\nimport {firstAndLast, nestedFirstAndLast} from \"./misc\";\nimport {curry, compose, zipObj} from 'ramda';\n\ntype ColorHsv = {\n    h: number,\n    s: number,\n    v: number\n}\n\nconst DEFAULT_COLOR: ColorHsv = {h: 214, s: 0.8, v: 1};\n\nconst HUE_PRESETS = [\n    210,\n    350,\n    32,\n    285,\n    160\n];\n\nconst SAT_RANGE = [0.3, 1];\n\n// Generates a single color for a compare feature value\ntype ColorFn = (inputColor: ColorHsv,\n                value: string | number,  // shortName or numeric value\n                nFieldValues: number,\n                valueIndex: number,\n                isPrioritized: boolean) => ColorHsv\n\nexport const autoHueScale = (c: ColorHsv, n: number, i: number) : ColorHsv  => {\n    return {...c, h: HUE_PRESETS[i]};\n};\n\nexport const autoSatScale = (c: ColorHsv, n: number, i: number) : ColorHsv  => {\n    const s = ((SAT_RANGE[1] - SAT_RANGE[0]) / n) * i + SAT_RANGE[0];\n    return {...c, s, v: s >= 1/2 ? 1 - s/3 : 1 };\n};\n\nexport const autoScaleColorNominal = (\n    c, value, nFieldValues, index, isPrioritized\n) : ColorHsv => {\n    if (isPrioritized) {\n        return autoHueScale(c, nFieldValues, index);\n    } else {\n        // Assume ascending order\n        const sStart = SAT_RANGE[0];\n        const sEnd = 1;\n        const vStart = 1;\n        const vEnd = 0.5;\n        const sStep = (sEnd - sStart) / nFieldValues;\n        const vStep = (vEnd - vStart) / nFieldValues;\n        return {...c, s: sStart + sStep * index, v: vStart + vStep * index};\n    }\n};\n\nexport const autoScaleColorOrdinal = (\n    c, value, nFieldValues, index, isPrioritized\n) : ColorHsv => {\n    return autoSatScale(c, nFieldValues, index);\n};\n\nconst COMPARE_BY_COLOR_FNS: {[id: string]: ColorFn} = {  // Listed in priority order\n    'pres_r_vs_d': (c, value) =>\n        ({...c, h: value < 0 ? 210 : 330}),  // TODO: Add support for scale (-1, 1)\n    'sex': (c, value) =>\n        ({...c, h: value === 'M' ? 210 : 330}),\n    'race': autoScaleColorNominal,\n    'marital': autoScaleColorNominal,\n    'education': autoScaleColorNominal,\n    'age': autoScaleColorOrdinal,\n};\n\nconst COLOR_PRIORITIES : {[key: string]: number} = {\n    'pres_r_vs_d': 1,\n    'sex': 2,\n    'race': 3,\n    'marital': 3,\n    'education': 4,\n    'age': 5\n};\n\nfunction hsvToRgb(h, s, v) {\n    let r, g, b;\n    const h1 = h / 360;  // Convert hue to a value between 0 and 1\n    const i = Math.floor(h1 * 6);\n    const f = h1 * 6 - i;\n    const p = v * (1 - s);\n    const q = v * (1 - f * s);\n    const t = v * (1 - (1 - f) * s);\n    switch (i % 6) {\n        case 0: r = v; g = t; b = p; break;\n        case 1: r = q; g = v; b = p; break;\n        case 2: r = p; g = v; b = t; break;\n        case 3: r = p; g = q; b = v; break;\n        case 4: r = t; g = p; b = v; break;\n        case 5: r = v; g = p; b = q; break;\n    }\n    return [ r * 255, g * 255, b * 255 ].map(x => Math.round(x));\n}\n\nfunction componentToHex(c) {\n    // @ts-ignore\n    const hex = c.toString(16);\n    return hex.length === 1 ? \"0\" + hex : hex;\n}\n\nfunction rgbToHex(r, g, b) {\n    return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n}\n\nexport const hsvToHex = (h, s, v) : string => {\n    const [r, g, b] = hsvToRgb(h, s, v);\n    return rgbToHex(r, g, b);\n};\n\nconst DEFAULT_COLOR_HEX = hsvToHex(DEFAULT_COLOR.h, DEFAULT_COLOR.s, DEFAULT_COLOR.v);\n\ntype FieldValueKey = {\n    field: string\n    value: string | number\n}\n\ntype ColorKeySet = {\n    k1?: FieldValueKey\n    k2?: FieldValueKey\n}\n\ntype KeysAndHsvColor = {\n    keys: ColorKeySet\n    color: ColorHsv\n}\n\ntype ColorPaletteHashMap = { [key: string]: string }\n\nexport type ColorPalette = {\n    hashMap: ColorPaletteHashMap\n    labels: {\n        rows: string[],\n        cols: string[]\n    },\n    fullNames: {\n        rows: string[],\n        cols: string[]\n    }\n    colors: {\n        byRowAndCol: string[][]\n    }\n}\n\nconst sortKeys = (cbfs: CompareByField[], keys: ColorKeySet) : ColorKeySet => {\n    if (keys.k2) {  // If it has 2 keys (0 or 1 and the order doesn't matter)\n        const fieldToIndexMap = zipObj(\n            cbfs.map((cbf) => cbf.id),\n            cbfs.map((_, i) => i)\n        );\n        if (fieldToIndexMap[keys.k1.field] > fieldToIndexMap[keys.k2.field]) {\n            return { k1: keys.k2, k2: keys.k1 };  // Switch order\n        }\n    }\n    return keys;  // Just return original order\n};\n\nconst createKey = (cbfs: CompareByField[], keys: ColorKeySet) : string => {\n    if (!keys.k1) {\n        return ''\n    } else {\n        const sk = sortKeys(cbfs, keys);\n        return sk.k1.field + '=' + sk.k1.value +\n        (sk.k2 ? (';' + sk.k2.field + '=' + sk.k2.value) : '')\n    }\n}\n\nconst addColorToPalette = (p: ColorPaletteHashMap,\n                           cbfs: CompareByField[],\n                           keys: ColorKeySet, color: string) => {\n    p[createKey(cbfs, keys)] = color;\n}\n\nconst createKeySet = (compareByFields: CompareByField[],\n                      value: Object) : ColorKeySet => {\n    const cbfs = Object.values(compareByFields);\n    if (cbfs.length === 0) {\n        return {};\n    }\n    const k = { k1: { field: cbfs[0].id, value: value[cbfs[0].id] }};\n    switch (cbfs.length) {\n        case 1: return k;\n        case 2: return { ...k, k2: { field: cbfs[1].id, value: value[cbfs[1].id] }};\n        default: throw new Error('Invalid compare by field length: ' + cbfs.length);\n    }\n};\n\nconst getColorFromPalette = (p: ColorPaletteHashMap,\n                              colorCodedFields: CompareByField[],\n                              ks: ColorKeySet) : string => {\n    return p[createKey(colorCodedFields, ks)];\n}\n\nconst getShortLabels = (compare: CompareByField) : string[] =>\n    Object.values(compare.values).map(v => v.shortName);\n\nconst getFullLabels = (compare: CompareByField) : string[] =>\n    Object.values(compare.values).map(v => v.fullName);\n\nfunction iterateOverCompareGrid<T>(fn: (ks: ColorKeySet) => T,\n                                   cbf1: CompareByField,\n                                   cbf2: CompareByField) : T[][] {\n    return Object.values(cbf1.values).map((v1) =>\n        Object.values(cbf2.values).map((v2) => fn({\n            k1: {field: cbf1.id, value: v1.shortName},\n            k2: {field: cbf2.id, value: v2.shortName}\n        })));\n}\n\nconst switchToAlwaysMakeLegendHorizontal = (cbfs: CompareByField[]) : CompareByField[] =>\n    Object.values(cbfs[1].values).length >= Object.values(cbfs[0].values).length\n        ? cbfs : [cbfs[1], cbfs[0]];\n\nconst setupColorPalette = (cbfs: CompareByField[],\n                           kahcs: KeysAndHsvColor[]) : ColorPalette => {\n    const p = { hashMap: {} };\n    kahcs.forEach((kahc) => {\n        addColorToPalette(\n            p.hashMap,\n            cbfs,\n            kahc.keys,\n            hsvToHex(kahc.color.h, kahc.color.s, kahc.color.v));\n    });\n    const keySets = kahcs.map(kahc => kahc.keys);\n    const getColor = curry(getColorFromPalette)(p.hashMap, cbfs);\n    const getColorGrid = curry(iterateOverCompareGrid)(getColor);\n    switch (cbfs.length) {\n        case 0:\n            return {\n                ...p,\n                labels: { rows: [], cols: [] },\n                fullNames: { rows: [], cols: [] },\n                colors: { byRowAndCol: [[DEFAULT_COLOR_HEX]] }\n            }\n        case 1:\n            return cbfs[0].colorType === 'nominal' ? {\n                ...p,\n                labels: {\n                    rows: getFullLabels(cbfs[0]),\n                    cols: []\n                },\n                fullNames: {\n                    rows: getFullLabels(cbfs[0]),\n                    cols: []\n                },\n                colors: {\n                    byRowAndCol: keySets.map(compose(x => [x], getColor))\n                }\n            } : {\n                ...p,\n                labels: {\n                    rows: [],\n                    cols: firstAndLast(getShortLabels(cbfs[0])),\n                },\n                fullNames: {\n                    rows: [],\n                    cols: firstAndLast(getFullLabels(cbfs[0])),\n                },\n                colors: {\n                    byRowAndCol: [firstAndLast(keySets.map(getColor))]\n                }\n            };\n        case 2:\n            if (cbfs[0].colorType === 'nominal') {  // nominal x nominal\n                const scbfs = switchToAlwaysMakeLegendHorizontal(cbfs);\n                return cbfs[1].colorType === 'nominal' ? {\n                    ...p,\n                    labels: {\n                        rows: getShortLabels(scbfs[0]),\n                        cols: getShortLabels(scbfs[1])\n                    },\n                    fullNames: {\n                        rows: getFullLabels(scbfs[0]),\n                        cols: getFullLabels(scbfs[1])\n                    },\n                    colors: {\n                        byRowAndCol: getColorGrid(scbfs[0], scbfs[1])\n                    }\n                } : {  // nominal x ordinal\n                    ...p,\n                    labels: {\n                        rows: getFullLabels(cbfs[0]),\n                        cols: firstAndLast(getShortLabels(cbfs[1]))\n                    },\n                    fullNames: {\n                        rows: getFullLabels(scbfs[0]),\n                        cols: firstAndLast(getFullLabels(cbfs[1]))\n                    },\n                    colors: {\n                        byRowAndCol: nestedFirstAndLast(getColorGrid(cbfs[0], cbfs[1]))\n                    }\n                }\n            } else {\n                return cbfs[1].colorType === 'ordinal' ? {  // ordinal x ordinal\n                    ...p,\n                    labels: {\n                        rows: firstAndLast(getShortLabels(cbfs[0])),\n                        cols: firstAndLast(getShortLabels(cbfs[1])),\n                    },\n                    fullNames: {\n                        rows: firstAndLast(getFullLabels(cbfs[0])),\n                        cols: firstAndLast(getFullLabels(cbfs[1])),\n                    },\n                    colors: {\n                        byRowAndCol: firstAndLast(nestedFirstAndLast(getColorGrid(cbfs[0], cbfs[1])))\n                    }\n                } : {  // ordinal x nominal\n                    ...p,\n                    labels: {\n                        rows: getFullLabels(cbfs[1]),\n                        cols: firstAndLast(getShortLabels(cbfs[0]))\n                    },\n                    fullNames: {\n                        rows: getFullLabels(cbfs[1]),\n                        cols: firstAndLast(getFullLabels(cbfs[0]))\n                    },\n                    colors: {\n                        byRowAndCol: nestedFirstAndLast(getColorGrid(cbfs[1], cbfs[0]))\n                    }\n                };\n            }\n        default:\n            throw new Error(`Has ${cbfs.length} compares. Must be 0-2.`)\n    }\n}\n\nexport const getColorForItem = (colorCodedFields, value: Object) : string => {\n    const priorities = colorCodedFields.map(cbf => COLOR_PRIORITIES[cbf.id]);\n    const lowPriority = Math.max(...priorities);\n    const highPriority = Math.min(...priorities);\n    const isPrioritized = (cbf: CompareByField, i: number) : boolean => {\n        if (lowPriority === highPriority) {\n            return i === 0;\n        } else {\n            return COLOR_PRIORITIES[cbf.id] === highPriority;\n        }\n    }\n    const hsv = colorCodedFields.reduce((\n        accum: ColorHsv,\n        cbf: CompareByField,\n        cbfi: number\n    ) : ColorHsv => {\n        const fn = COMPARE_BY_COLOR_FNS[cbf.id];\n        if (!fn) {\n            throw new Error(\"Color function not found for \" + cbf.id);\n        }\n        const fieldValue = value[cbf.id];\n        const fieldValues = Object.values(cbf.values);\n        const vi = fieldValues.findIndex(v => v.value === value[cbf.id]);\n        return fn(\n            accum,\n            fieldValue,\n            fieldValues.length,\n            vi,\n            isPrioritized(cbf, cbfi))\n    }, DEFAULT_COLOR)\n    return hsvToHex(hsv.h, hsv.s, hsv.v)\n}\n\nexport const createColorPalette = (colorCodedFields) : ColorPalette => {\n    const priorities = colorCodedFields.map(cbf => COLOR_PRIORITIES[cbf.id]);\n    const lowPriority = Math.max(...priorities);\n    const highPriority = Math.min(...priorities);\n    const isPrioritized = (cbf: CompareByField, i: number) : boolean => {\n        if (lowPriority === highPriority) {\n            return i === 0;\n        } else {\n            return COLOR_PRIORITIES[cbf.id] === highPriority;\n        }\n    }\n    const kahcs = colorCodedFields.reduce((\n        accum: KeysAndHsvColor[],\n        cbf: CompareByField,\n        cbfi: number\n    ) : KeysAndHsvColor[] => {\n        const isAccumDefault = !accum[0].keys.k1;\n        const fn = COMPARE_BY_COLOR_FNS[cbf.id];\n        if (!fn) {\n            throw new Error(\"Color function not found for \" + cbf.id);\n        }\n        const newColors: KeysAndHsvColor[] = accum.flatMap((\n            existing: KeysAndHsvColor\n        ) => {\n            const fieldValues = Object.values(cbf.values);\n            const nFieldValues = fieldValues.length;\n            return fieldValues.map((cbfv: FieldValue, vi) => ({\n                keys: isAccumDefault ? {\n                    k1: {\n                        field: cbf.id,\n                        value: cbfv.value\n                    }\n                } : {\n                    ...existing.keys,\n                    k2: {\n                        field: cbf.id,\n                        value: cbfv.value\n                    }\n                },\n                color: fn(\n                    existing.color,\n                    cbfv.value,\n                    nFieldValues,\n                    vi,\n                    isPrioritized(cbf, cbfi))\n            }));\n        });\n        return isAccumDefault ? newColors : [...accum, ...newColors];\n    }, [{color: DEFAULT_COLOR, keys: {}}]);\n    return setupColorPalette(colorCodedFields, kahcs);\n};\n","var _path, _path2;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgCompare(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"256pt\",\n    height: \"256pt\",\n    viewBox: \"0 0 256 256\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#757575\",\n    fillRule: \"evenodd\",\n    stroke: \"#757575\",\n    strokeLinecap: \"square\",\n    strokeLinejoin: \"bevel\",\n    d: \"M69 114.85h48V219.5H69zM135.62 20.487h48v199.18h-48z\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#757575\",\n    fillRule: \"evenodd\",\n    stroke: \"#757575\",\n    strokeWidth: 10,\n    strokeLinecap: \"square\",\n    strokeMiterlimit: 2,\n    d: \"M20 236.021h216\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgCompare);\nexport default __webpack_public_path__ + \"static/media/Compare.7e039b5f1002d9c6ed17a8eb1f0d6ecd.svg\";\nexport { ForwardRef as ReactComponent };","import {\n    DerivedDataValueSet,\n    FeatureRanges,\n    LegendCorner,\n    LegendPosition,\n    PlotType\n} from \"../config\";\nimport {max, min} from 'd3-array';\nimport {getColorForItem} from \"./colors\";\nimport {average} from \"./misc\";\n\nexport const processItemValues = (\n    vs: DerivedDataValueSet[],\n    controlFields,\n    colorCodedFields,\n    divisions\n) => {\n    const createName = (v: DerivedDataValueSet) => {\n        const cs = controlFields.compare;\n        const div = divisions[v.geoid];\n        const area = controlFields.area;\n        const divName = cs.length > 0 ? div?.abbrev || div?.name : div?.name;\n        const areaName = cs.length > 0 ? area.abbrev : area.name;\n        const place = divName || areaName;\n        const getC = c => {\n            if (!c.values[v[c.id]]) {\n                // throw new Error(`Compare value '${c.id}' not found in ${place}`);\n                return [];\n            }\n            return c.values[v[c.id]].mediumName;\n        }\n        const parts = [\n            place,\n            cs.map(getC).join(', ')\n        ];\n        return parts.filter(x => x.length > 0).join(': ')\n    };\n    return vs.map(v => ({\n        ...v,\n        name: createName(v),\n        x: v[controlFields.x.id],\n        y: v[controlFields.y.id],\n        z: v[controlFields.z.id],\n        color: getColorForItem(colorCodedFields, v)\n    }));\n};\n\n/**\n * Assumes a linear scale\n */\nconst _findClearestCorner = (left: number[],\n                             right: number[],\n                             y_mean: number,\n                             forceCorner?: LegendCorner) : LegendPosition => {\n    const topLeft = (max(left) - y_mean) / y_mean;\n    const topRight = (max(right) - y_mean) / y_mean;\n    // Avoid lower corners by tipping the scale a little\n    const bottomLeft = ((y_mean * 2 - min(left)) / y_mean);\n    const bottomRight = ((y_mean * 1.5 - min(right)) / y_mean);\n    const minimum = min([topLeft, topRight, bottomLeft, bottomRight]);\n    if (forceCorner != null) {\n        if (forceCorner === LegendCorner.NW) {\n            return {corner: LegendCorner.NW, closestDataPoint: topLeft };\n        } else if (forceCorner === LegendCorner.NE) {\n            return {corner: LegendCorner.NE, closestDataPoint: topRight };\n        } else if (forceCorner === LegendCorner.SW) {\n            return {corner: LegendCorner.SW, closestDataPoint: bottomLeft };\n        } else if (forceCorner === LegendCorner.SE) {\n            return {corner: LegendCorner.SE, closestDataPoint: bottomRight };\n        }\n    }\n    if (topLeft === minimum) {\n        return {corner: LegendCorner.NW, closestDataPoint: topLeft };\n    } else if (topRight === minimum) {\n        return {corner: LegendCorner.NE, closestDataPoint: topRight };\n    } else if (bottomLeft === minimum) {\n        return {corner: LegendCorner.SW, closestDataPoint: bottomLeft };\n    } else if (bottomRight === minimum) {\n        return {corner: LegendCorner.SE, closestDataPoint: bottomRight };\n    } else {\n        return {corner: LegendCorner.NW, closestDataPoint: topLeft };\n    }\n};\n\nexport const chooseLegendPosition = (plotType: PlotType,\n                                     featureRanges: FeatureRanges,\n                                     data: any[],\n                                     forceCorner?: LegendCorner) : LegendPosition => {\n    const _splitHalfs = (pred: (any, number) => number,\n                         values: any[],\n                         c1: number,\n                         c2: number) : [number[], number[]] => {\n        return [\n            values.filter((v, i) => pred(v, i) < c1).map(v => v.y),\n            values.filter((v, i) => pred(v, i) > c2).map(v => v.y)\n        ];\n    };\n    const y_mean = average(featureRanges.y);\n    if (plotType.name === 'bubble') {\n        const c = average(featureRanges.x);\n        const x_min = featureRanges.x[0];\n        const x_max = featureRanges.x[1];\n        const c14 = (c + x_min) / 2;\n        const c34 = (c + x_max) / 2;\n        return _findClearestCorner(..._splitHalfs(d => d.x, data, c14, c34), y_mean, forceCorner);\n    } else if (plotType.name === 'line') {\n        const c = average(featureRanges.year);\n        return _findClearestCorner(..._splitHalfs(d => d.year, data, c, c), y_mean, forceCorner);\n    } else if (plotType.name === 'bar') {\n        const sortedData = data.sort((a, b) => a.scaledY - b.scaledY);\n        const c = data.length / 2;\n        return _findClearestCorner(..._splitHalfs((_, i) => i, sortedData, c, c), y_mean, forceCorner);\n    } else {\n        throw new Error('Unhandled plot type: ' + plotType.name);\n    }\n};\n","import {createSelector} from \"@reduxjs/toolkit\";\nimport {\n    selectAreas,\n    selectDivisionsByLevel,\n    selectFields,\n    selectLevels,\n    selectFeatureFields,\n    selectValues,\n    selectTopologiesByAreaAndLevel,\n    selectCompareByFields\n} from \"../features/data/dataSlice\";\nimport {selectActualControlValues} from \"../features/controls/controlsSlice\";\nimport {mapObjIndexed} from \"ramda\";\nimport {\n    Area,\n    CompareByField,\n    FeatureRanges, LegendCorner, LegendPosition,\n    PLOT_PRESETS,\n    PlotPreset,\n    ColoredFeatureField,\n    FeatureField,\n    ColoredField\n} from \"./config\";\nimport {chooseLegendPosition, processItemValues} from \"./utils/domain\";\nimport {min, max} from 'd3-array';\nimport {selectYear} from \"../features/year/yearSlice\";\nimport {createColorPalette} from \"./utils/colors\";\nimport {selectPlotType} from \"../features/plotType/plotTypeSlice\";\nimport queryString from \"query-string\";\n\nexport const selectControlFieldIds = createSelector(\n    selectActualControlValues,\n    selectFeatureFields,\n    (cv, nfs) => {\n        if (!nfs || nfs.length === 0) {\n            return cv;\n        }\n        return {\n            ...cv,\n            x: cv.x || nfs[0].id,\n            y: cv.y || nfs[1].id,\n            z: cv.z || nfs[2].id\n        }\n    }\n);\n\nexport const selectControlFields = createSelector(\n    selectAreas,\n    selectLevels,\n    selectFields,\n    selectCompareByFields,\n    selectControlFieldIds,\n    (areas, levels, fields, compareByFields, values) => {\n        return mapObjIndexed((v, k) => {\n            if (!fields || !v) {\n                return null;\n            } else if (k === 'area') {\n                return areas.byId[v];\n            } else if (k === 'compare') {\n                return v.map(cv => compareByFields.byId[cv]);\n            } else if  (k === 'level') {\n                return levels.byId[v];\n            } else {\n                return fields.byId[v];\n            }\n        }, values)\n    }\n);\n\nexport const selectPlotEnabledFields = createSelector(\n    selectPlotType,\n    (plotType) : string[] => ['x', 'y', 'z'].filter(field => !!plotType.fields[field])\n);\n\nexport const selectPlotEnabledFieldIds = createSelector(\n    selectPlotEnabledFields,\n    selectControlFieldIds,\n    (efs, ids) => efs.map(ef => ids[ef])\n)\n\nexport const selectPlotEnabledFieldDetails = createSelector(\n    selectPlotEnabledFieldIds,\n    selectFields,\n    (ids, fields) : FeatureField[] => {\n        return ids.map(id => fields.byId[id]);\n    }\n);\n\nexport const selectComparesEnabled = createSelector(\n    selectPlotEnabledFields,\n    selectControlFields,\n    (efs, cfs) : boolean => efs.every((ef: string) => cfs[ef].allowCompares)\n);\n\nexport const selectCurrentCompareDetails = createSelector(\n    selectCompareByFields,\n    selectControlFieldIds,\n    (cb, cv) : CompareByField[] => {\n        return cv.compare.map(c => cb.byId[c]);\n    }\n);\n\nexport const selectColoredFeatureFields = createSelector(\n    selectPlotEnabledFieldDetails,\n    (fields) : ColoredFeatureField[] => {\n        return [...new Set(fields.filter(f => !!f.colorType))] as ColoredFeatureField[];\n    }\n);\n\nexport const selectColorCodedFields = createSelector(\n    selectColoredFeatureFields,\n    selectCurrentCompareDetails,\n    selectComparesEnabled,\n    (coloredFeatures, compares, comparesEnabled) : ColoredField[] => {\n        const cbfs = comparesEnabled ? compares : [];\n        return [...cbfs, ...coloredFeatures]\n    }\n);\n\nexport const selectColorPalette = createSelector(\n    selectColorCodedFields,\n    (fields) => createColorPalette(fields)\n);\n\nexport const selectCurrentDivisions = createSelector(\n    selectDivisionsByLevel,\n    selectControlFieldIds,\n    (dvsByLevel, cv): any[] => {\n        return dvsByLevel[cv.level];\n    }\n);\n\nexport const selectTopologies = createSelector(\n    selectTopologiesByAreaAndLevel,\n    selectControlFieldIds,\n    (tbaal, cvs) => {\n        if (Object.keys(tbaal).length > 0) {\n            return tbaal[cvs.area] ? tbaal[cvs.area][cvs.level] : null;\n        } else {\n            return null;\n        }\n    }\n);\n\nexport const selectArea = createSelector(\n    selectAreas,\n    selectControlFieldIds,\n    (areas, cv) : Area => {\n        return areas.byId[cv.area];\n    }\n);\n\nconst summaryDataForAllYears = (vs, area, ds, cf, ccf) => {\n    const avs = vs.filter(v => v.geoid === area.geoid);\n    return processItemValues(avs, cf, ccf, ds);\n}\n\n\nconst individualDataForAllYears = (vs, area, ds, cf, ccf) => {\n    const avs = vs.filter(v => v.geoid !== area.geoid);\n    return processItemValues(avs, cf, ccf, ds);\n};\n\nconst individualDataIgnoringComparesForAllYears = (vs, area, ds, cf, ccf) => {\n    const avs = vs.filter(v => v.geoid !== area.geoid);\n    return processItemValues(avs, {...cf, compare: []}, ccf, ds);\n};\n\nexport const selectPlotDataForAllYears = createSelector(\n    selectPlotType,\n    selectValues,\n    selectArea,\n    selectCurrentDivisions,\n    selectControlFields,\n    selectColorCodedFields,\n    selectComparesEnabled,\n    (plotType, vs, area, ds, cf, ccf, cse) => {\n        const data = (() => {\n            if (plotType.name === 'map') {\n                return individualDataIgnoringComparesForAllYears(vs, area, ds, cf, ccf);\n            } else if (plotType.name === 'bubble' || cf.compare.length === 0 || !cse) {\n                return individualDataForAllYears(vs, area, ds, cf, ccf);\n            } else {\n                return summaryDataForAllYears(vs, area, ds, cf, ccf);\n            }\n        })();\n        return data;\n    }\n);\n\nexport const selectPlotData = createSelector(\n    selectPlotType,\n    selectValues,\n    selectArea,\n    selectCurrentDivisions,\n    selectControlFields,\n    selectColorCodedFields,\n    selectYear,\n    selectComparesEnabled,\n    (plotType, vs, area, ds, cf, ccf, year, cse) => {\n        const summaryData = () => {\n            const avs = vs.filter(v => v.geoid === area.geoid && v.year === year);\n            return processItemValues(avs, cf, ccf, ds);\n        };\n        const individualData = () => {\n            const avs = vs.filter(v => v.geoid !== area.geoid && v.year === year);\n            return processItemValues(avs, cf, ccf, ds);\n        };\n        const individualDataIgnoringCompares = () => {\n            const avs = vs.filter(v => v.geoid !== area.geoid && v.year === year);\n            return processItemValues(avs, {...cf, compare: []}, ccf, ds);\n        };\n\n        if (plotType.name === 'bubble') {\n            if (!cse) {\n                return individualDataIgnoringCompares()\n            } else {\n                return individualData();\n            }\n        } else if (plotType.name === 'line') {\n            if (!cse) {\n                return individualDataIgnoringComparesForAllYears(vs, area, ds, cf, ccf);\n            } else if (cf.compare.length === 0) {\n                return individualDataForAllYears(vs, area, ds, cf, ccf);\n            } else {\n                return summaryDataForAllYears(vs, area, ds, cf, ccf);\n            }\n        } else if (plotType.name === 'bar') {\n            if (!cse) {\n                return individualDataIgnoringCompares();\n            } else if (cf.compare.length === 0) {\n                return individualData();\n            } else {\n                return summaryData();\n            }\n        } else if (plotType.name === 'map') {\n            return individualDataIgnoringCompares();\n        } else {\n            throw new Error('Unhandled plot type: ' + plotType.name);\n        }\n    }\n);\n\nexport const selectFeatureRanges = createSelector(\n    selectPlotDataForAllYears,\n    (data) : FeatureRanges => {\n        const fvs = {\n            x: data.map(v => v.x),\n            y: data.map(v => v.y),\n            z: data.map(v => v.z),\n            year: data.map(v => v.year)\n        };\n        return {\n            x: [min(fvs.x), max(fvs.x)],\n            y: [min(fvs.y), max(fvs.y)],\n            z: [min(fvs.z), max(fvs.z)],\n            year: [min(fvs.year), max(fvs.year)]\n        };\n    }\n);\n\nexport const selectPlotOrientation = createSelector(\n    selectControlFields,\n    selectPlotType,\n    (fields, plotType) : 'vertical' | 'horizontal' => \n        plotType.name === 'bar' && \n        fields.y.orientation === 'horizontal' ? 'horizontal' : 'vertical'\n);\n\nexport const selectLegendPosition = createSelector(\n    selectPlotType,\n    selectPlotDataForAllYears,\n    selectFeatureRanges,\n    selectPlotOrientation,\n    (plotType, vs, featureRanges, orientation) : LegendPosition | undefined => {\n        if (featureRanges.y[0] == null) {\n            return undefined;\n        } else if (plotType.name === 'bubble' || plotType.name === 'line') {\n            return chooseLegendPosition(plotType, featureRanges, vs);\n        } else if (plotType.name === 'bar') {\n            const force = orientation === 'horizontal' ? LegendCorner.NW : LegendCorner.NE;\n            return chooseLegendPosition(plotType, featureRanges, vs, force);\n        } else {\n            throw new Error('Unhandled plot type: ' + plotType.name);\n        }\n    }\n);\n\nexport const selectAvailableYears = createSelector(\n    selectPlotEnabledFieldIds,\n    selectValues,\n    (fields, values) : number[] => {\n        const allYears = [...new Set(values.map(v => v.year))].sort();\n        return allYears.filter((year => {\n            return values.some(v => v.year === year && fields.every(f => !!v[f]))\n        }));\n    }\n)\n\nexport const selectPlotPresets = createSelector(\n    selectAreas,\n    (areas) : PlotPreset[] => PLOT_PRESETS.map(p => ({\n        title: p.title,\n        area: areas.byId[p.params.area],\n        url: 'plot?' + queryString.stringify(p.params, {arrayFormat: 'bracket'})\n    }))\n);\n\nexport const isLoaded = createSelector(\n    selectValues,\n    (values) => {\n        return values.length > 0;\n    }\n);\n","import React from \"react\";\nimport {defaultStyles as defaultTooltipStyles, useTooltip} from \"@visx/tooltip\";\nimport {\n    all,\n    curry,\n    groupBy,\n    keys,\n    last,\n    map,\n    range,\n    reduce,\n    tail,\n    values\n} from \"ramda\";\nimport useTouchOutside from \"./useTouchOutside\";\nimport TooltipWithBounds from '../dashboard/CustomTooltipWithBounds';\nimport {animated, useSpring} from \"react-spring\";\nimport {useAppSelector} from \"../app/hooks\";\nimport {selectPlotType} from \"../features/plotType/plotTypeSlice\";\nimport {selectControlFields} from \"../dashboard/selectors\";\nimport {FIELD_TYPE_FORMAT_VALUES_MAP} from \"../dashboard/config\";\n\nconst DEFAULT_OPTIONS = {\n    selectedOpacity: 0.8,\n    unselectedOpacity: 0.15,\n    defaultOpacity: 0.6,\n    animate: true\n};\n\ntype ItemMap = Map<string, any[]> | Record<string, any[]>;\ntype KeyValue = any | ((event: Event) => any)\n\nconst groupByKeys = (keyFields: string[], items: any[]) : ItemMap => {\n    const im = groupBy(item => item[keyFields[0]], values(items));\n    if (keyFields.length === 1) {\n        return im;\n    } else {\n        return map(curry(groupByKeys)(tail(keyFields)), im);\n    }\n};\n\nconst lookupKeys = (keys: string[], itemMap: ItemMap) => {\n    return reduce((im, k) => im[k], itemMap, keys);\n};\n\nconst lookupItem = (keys: string[], itemMap: ItemMap) => {\n    const results = lookupKeys(keys, itemMap);\n    if (results.length === 1) {\n        return results[0];\n    } else {\n        throw new Error(`Found ${results.length} results for lookup of ${keys}`);\n    }\n};\n\nconst matchesAllKeys = (keysToMatch: string[], itemKeys: string[]) : boolean => {\n    const n = Math.min(keysToMatch.length, itemKeys.length);\n    // Keys will be coerced into strings, but they might be originally numbers\n    // eslint-disable-next-line eqeqeq\n    return all(i => keysToMatch[i] == itemKeys[i], range(0, n));\n};\n\nconst TooltipContent = ({item}) => {\n    const controls = useAppSelector(selectControlFields);\n    const plotType = useAppSelector(selectPlotType);\n\n    const FormattedValue = ({field}: {field: string}) => {\n        const formatValue = FIELD_TYPE_FORMAT_VALUES_MAP[controls[field].formatType];\n        return (\n            plotType.fields[field] && controls[field] && (\n                <div>\n                    {controls[field].name}:{' '}\n                    {formatValue(item[field])}\n                </div>\n            )\n        );\n    };\n\n    return (\n        <div className='tooltip-content'>\n            <div className='tooltip-title'>\n                <h3>{item.name}</h3>\n                <div className='year' style={{backgroundColor: item.color}}>{item.year}</div>\n            </div>\n            <div className='tooltip-body'>\n                <FormattedValue field='y' />\n                <FormattedValue field='x' />\n            </div>\n        </div>\n    );\n};\n\nconst useSelect = (items: any[], keyFields: string[],\n                   showLabel, disableInteraction = false) => {\n    const nKeyFields = keyFields.length;\n    const itemMap = groupByKeys(keyFields, items);\n    const [selectedKeys, selectKeys] = React.useState<string[]>(null);\n    const {\n        tooltipOpen,\n        tooltipLeft,\n        tooltipTop,\n        tooltipData,\n        showTooltip,\n        hideTooltip\n    } = useTooltip<React.ReactNode>();\n\n    const select = React.useCallback(\n        (itemKeys: string[]) => {\n            if (!selectedKeys || !matchesAllKeys(selectedKeys, itemKeys)) {\n                selectKeys(itemKeys);\n                const item = lookupItem(itemKeys, itemMap);\n                showTooltip({\n                    tooltipData: <TooltipContent item={item} />,\n                    tooltipLeft: item.scaledX,\n                    tooltipTop: item.scaledY,\n                });\n            }\n        },\n        [showTooltip, itemMap, selectedKeys]\n    );\n\n    const deselect = React.useCallback(() => {\n        selectKeys(null);\n        hideTooltip();\n    }, [hideTooltip]);\n\n    const getKeys = (key1) : string[] => {\n        switch (nKeyFields) {\n            case 1: return [key1];\n            case 2: return [key1, last(keys(itemMap[key1]))];\n            default: throw new Error(\"Unsupported # of keys: \" + nKeyFields);\n        }\n    };\n\n    React.useEffect(() => {\n        if (showLabel) {\n            select(getKeys(showLabel));\n        }\n    });\n\n    const Tooltip = React.memo(() => {\n        const ref = React.useRef(null);\n        // On touch outside isn't needed for closing the tooltip,\n        // but actually to be able to select the next point (on touchscreen)\n        useTouchOutside(ref, deselect);\n        return tooltipData ? (\n            <>\n                {tooltipOpen && tooltipData && (\n                    // @ts-ignore\n                    <TooltipWithBounds\n                        top={tooltipTop}\n                        left={tooltipLeft}\n                        style={{\n                            ...defaultTooltipStyles,\n                            fontSize: '1em',\n                            padding: '0.6em',\n                            margin: '0.75em'\n                        }}\n                        className='tooltip MuiPaper-elevation5'\n                    >\n                        <div ref={ref}>\n                            {tooltipData}\n                        </div>\n                    </TooltipWithBounds>\n                )}\n            </>\n        ) : null;\n    });\n\n    const makeSelectable = React.useCallback((keyValues: any[], c, options= DEFAULT_OPTIONS) => {\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const [{ animOpacity }, setAnim] = useSpring(() => ({\n            animOpacity: options.defaultOpacity,\n        }));\n        const isSelected = selectedKeys && matchesAllKeys(selectedKeys, keyValues);\n        const opacity = isSelected ? options.selectedOpacity : selectedKeys ? options.unselectedOpacity : options.defaultOpacity;\n        const animate = options.animate == null || options.animate === true;\n        if (animate) {\n            setAnim({animOpacity: opacity});\n            // return React.cloneElement(c, {\n            //     key: keyValues.join('_'),\n            //     fillOpacity: animOpacity.to(x => x),\n            //     strokeOpacity:  animOpacity.to(x => x)\n            // });\n            return (\n                <animated.g\n                    fillOpacity={animOpacity.to(x => x)}\n                    strokeOpacity={animOpacity.to(x => x)}\n                    key={keyValues.join('_')}\n                >\n                    {c}\n                </animated.g>\n            );\n        } else {\n            return React.cloneElement(c, {\n                ...c.props,\n                key: keyValues.join('_'),\n                fillOpacity: opacity,\n                strokeOpacity: opacity\n            });\n        }\n    }, [selectedKeys]);\n\n    const makeInteractive = React.useCallback((keyValues: KeyValue[], c) => {\n        if (disableInteraction) {\n            return c;\n        } else {\n            const callback = (event) => {\n                const resolvedKeyValues = keyValues.map(k => k instanceof Function ? k(event) : k);\n                select(resolvedKeyValues);\n            }\n            return React.cloneElement(c, {\n                ...c.props,\n                onTouchStart: callback,\n                onMouseMove: callback,\n                onMouseLeave: deselect\n            });\n        }\n    }, [select, deselect, disableInteraction]);\n\n    const makeSelectableAndInteractive = React.useCallback(\n        (keyValues: KeyValue[], c, options= DEFAULT_OPTIONS) => {\n            const concreteKeys = keyValues.filter(k => !(k instanceof Function))\n            return makeInteractive(keyValues, makeSelectable(concreteKeys, c, options));\n        }, [makeSelectable, makeInteractive]);\n\n    return {makeSelectable, makeInteractive, makeSelectableAndInteractive, Tooltip};\n};\n\nexport default useSelect;\n","import React from \"react\";\nimport {animated, useSprings} from 'react-spring';\nimport {scaleLinear, scalePower} from \"@visx/scale\";\nimport useSelect from \"../hooks/useSelect\";\nimport {FeatureRanges, ANIMATION_DURATION} from \"./config\";\n\nconst paddingPct = 0.1;\n\nexport type BubblePlotProps = {\n    data: any[],\n    featureRanges: FeatureRanges\n    showLabel?: string\n    disableInteraction?: boolean\n    width: number\n    height: number\n};\n\nconst BubblePlot = ({\n    data,\n    featureRanges,\n    showLabel = null,\n    disableInteraction = false,\n    width,\n    height\n}: BubblePlotProps) => {\n    const padding = Math.min(width, height) * paddingPct;\n    const xScale = React.useMemo(() =>\n        scaleLinear<number>({\n            domain: featureRanges.x,\n            range: [padding, width - padding],\n            round: true\n        }), [featureRanges, padding, width]);\n    const yScale = React.useMemo(() =>\n        scaleLinear<number>({\n            domain: featureRanges.y,\n            range: [height - padding / 2, padding],\n            round: true\n        }), [featureRanges, padding, height]);\n    const sizeScale = React.useMemo(() =>\n        scalePower<number>({\n            domain: [featureRanges.z[0] * 80, featureRanges.z[1] * 120],\n            range: [0.01 * (height - padding), 0.06 * (height - padding)],\n            exponent: 0.5\n        }), [featureRanges, padding, height]);\n    const items = data\n        // .filter(v => v.x != null && v.y != null && v.z != null)\n        .map(v => {\n            const anyNull = v.x == null || v.y == null || v.z == null;\n            return {\n                ...v,\n                scaledX: anyNull ? xScale(0) : xScale(v.x),\n                scaledY: anyNull ? yScale(0) : yScale(v.y),\n                size: anyNull ? 0 : sizeScale(v.z * 100)\n            }\n        });\n\n    const {makeSelectableAndInteractive, Tooltip} =\n        useSelect(items, ['name'], showLabel, disableInteraction);\n    const animFn = index => ({\n        animX: items[index].scaledX,\n        animY: items[index].scaledY,\n        animSize: items[index].size,\n        config: {\n            duration: ANIMATION_DURATION\n        }\n    });\n    const [springs, api] = useSprings(items.length, animFn);\n    api.start(animFn);\n\n    return (\n        <>\n            <svg width={width} height={height}>\n                {items.map((item, i) => {\n                    return makeSelectableAndInteractive([item.name],\n                        <animated.circle\n                            cx={springs[i].animX}\n                            cy={springs[i].animY}\n                            r={springs[i].animSize}\n                            fill={item.color + 'EE'}\n                            stroke={item.color}\n                        />\n                    );\n                })}\n            </svg>\n            <Tooltip />\n        </>\n    );\n};\n\nexport default BubblePlot;\n","import React from 'react';\nimport { geoPath, geoAlbersUsa, geoCentroid } from 'd3-geo';\nimport {animated, useSprings} from 'react-spring';\nimport { AlbersUsa } from '@visx/geo';\nimport * as topojson from 'topojson-client';\nimport {zipObj} from \"ramda\";\nimport { hcl } from 'd3-color';\nimport { scaleLinear } from 'd3-scale';\nimport { interpolateHcl } from 'd3-interpolate';\nimport {useAppSelector} from \"../app/hooks\";\nimport useSelect from \"../hooks/useSelect\";\nimport {FeatureRanges, ANIMATION_DURATION} from \"./config\";\nimport {\n    selectArea, selectColorPalette, selectCurrentDivisions,\n    selectTopologies\n} from \"./selectors\";\n\nconst LOW_OPACITY = '22';\n\nexport type MapPlotProps = {\n    data: any[]\n    featureRanges: FeatureRanges\n    width: number\n    height: number\n    showLabel?: string\n    disableInteraction?: boolean\n};\n\ninterface FeatureShape {\n    type: 'Feature';\n    id: string;\n    geometry: { coordinates: topojson.Position[][]; type: 'MultiPolygon' };\n    properties: { };\n}\nconst projection = geoAlbersUsa();\nconst usMapOffset: [number, number] = [0.025, 0];\n\nconst opacityOptions = {\n    selectedOpacity: 1,\n    unselectedOpacity: 0.2,\n    defaultOpacity: 0.8,\n    animate: true\n};\n\nconst strokeFactor = 0.002;\n\nconst DumbMapPlot = ({ data, featureRanges, width, height, area, divisions, topologies, colors,\n                         showLabel = null, disableInteraction = false }) => {\n    const scale = Math.round(Math.min(width, height) * 1.4);\n    const topoFeature = topojson.feature(topologies, topologies.objects.data);\n    const { features: featColl } = topoFeature as {\n        type: 'FeatureCollection';\n        features: FeatureShape[];\n    };\n    const colorScale = scaleLinear()\n        .domain(featureRanges.y)\n        // @ts-ignore\n        .range([\n            hcl(colors[0]),\n            hcl(colors[1])])\n        // @ts-ignore\n        .interpolate(interpolateHcl)\n\n    const path = geoPath().projection(projection);\n    projection.scale(1).translate(area.id === 'us' ? usMapOffset : [0, 0]);\n    const b = path.bounds(topoFeature);\n    const s = .95 / Math.max((b[1][0] - b[0][0]) / width, (b[1][1] - b[0][1]) / height);\n    const t = [(width - s * (b[1][0] + b[0][0])) / 2, (height - s * (b[1][1] + b[0][1])) / 2];\n    projection.scale(s).translate([t[0], t[1]]);\n\n    const tempItems = data.map(v => ({\n        ...v,\n        ...divisions[v.geoid]\n    }));\n    const itemMap = zipObj(tempItems.map(d => d.geoid), tempItems);\n    const items = featColl\n        .filter(f => !!itemMap[f.id])\n        .map(f => {\n            const c = projection(geoCentroid(f));\n            return {\n                ...itemMap[f.id],\n                color: itemMap[f.id].y == null ? 'transparent' : colorScale(itemMap[f.id].y),\n                scaledX: c[0],\n                scaledY: c[1]\n            };\n        });\n\n    const {makeSelectableAndInteractive, Tooltip} =\n        useSelect(items, ['name'], showLabel, disableInteraction);\n    const animFn = index => ({ \n        animColor: items[index].color,\n        config: {\n            duration: ANIMATION_DURATION\n        }\n    });\n    const [springs, api] = useSprings(items.length, animFn);\n    api.start(animFn);\n    return width < 10 ? null : (\n        <>\n            <svg width={width} height={height}>\n                <AlbersUsa<FeatureShape>\n                    data={featColl}\n                    scale={s}\n                    translate={[t[0], t[1]]}\n                >\n                    {({ features}) =>\n                        features\n                            .filter(({ feature, path }) => !!itemMap[feature.id])\n                            .map(({ feature, path }, i) => {\n                                const item = itemMap[feature.id];\n                                if (!item) {\n                                    return null;\n                                }\n                                return makeSelectableAndInteractive([item.name],\n                                    <animated.path\n                                        className='map-poly'\n                                        d={path || ''}\n                                        fill={springs[i].animColor}\n                                        strokeWidth={item.name === 'Alaska' || item.name === 'Hawaii' ? 0 : scale * strokeFactor}\n                                    />, opacityOptions\n                                )\n                            })\n                    }\n                </AlbersUsa>\n            </svg>\n            <Tooltip />\n        </>\n    );\n};\n\nconst MapPlot = (props: MapPlotProps) => {\n    const area = useAppSelector(selectArea);\n    const topologies = useAppSelector(selectTopologies);\n    const divisions = useAppSelector(selectCurrentDivisions);\n    const colorPalette = useAppSelector(selectColorPalette);\n    const colors = colorPalette.colors.byRowAndCol[0];\n    return topologies &&\n      <DumbMapPlot {...props}\n                   area={area}\n                   divisions={divisions}\n                   topologies={topologies} \n                   colors={colors.length > 1 ? colors : [colors[0] + LOW_OPACITY, colors[0]]}\n                   />\n}\n\nexport default MapPlot;\n","import React from 'react';\nimport { LinePath } from '@visx/shape';\nimport {scaleLinear} from \"@visx/scale\";\nimport {GlyphCircle} from '@visx/glyph';\nimport { localPoint } from '@visx/event';\nimport { voronoi } from '@visx/voronoi';\nimport {groupBy, curry} from \"ramda\";\nimport useSelect from \"../hooks/useSelect\";\nimport {FeatureRanges} from \"./config\";\n\nconst hPaddingPct = 0.015;\nconst vPaddingPct = 0.1\n\nexport type LinePlotProps = {\n    data: any[]\n    featureRanges: FeatureRanges\n    showLabel?: string\n    disableInteraction?: boolean\n    width: number\n    height: number\n};\n\nconst lineOptions = {\n    selectedOpacity: 0.9,\n    unselectedOpacity: 0.15,\n    defaultOpacity: 0.6,\n    animate: true\n};\n\nconst pointOptions = {\n    selectedOpacity: 1,\n    unselectedOpacity: 0,\n    defaultOpacity: 0,\n    animate: false\n};\n\nconst LinePlot = ({\n    data,\n    featureRanges,\n    showLabel = null,\n    disableInteraction = false,\n    width,\n    height\n}: LinePlotProps) => {\n    const hPadding = React.useMemo(() =>\n            height * hPaddingPct,\n        [height]\n    );\n    const vPadding = React.useMemo(() =>\n            width * vPaddingPct,\n        [width]\n    );\n    const xScale = scaleLinear<number>({\n        domain: featureRanges.year,\n        range: [hPadding, width - hPadding],\n        round: true\n    });\n    const yScale = scaleLinear<number>({\n        domain: featureRanges.y,\n        range: [height - vPadding, vPadding],\n        round: true\n    });\n    const items = data\n        .map(d => ({\n            ...d,\n            scaledX: xScale(d.year),\n            scaledY: yScale(d.y),\n        }));\n\n    const lines = groupBy(d => d.name, items);\n    const lineKeys = Object.keys(lines);\n    const {makeSelectable, makeSelectableAndInteractive, Tooltip} =\n        useSelect(items, ['name', 'year'], showLabel, disableInteraction);\n    const scaledX = (d) => d.scaledX;\n    const scaledY = (d) => d.scaledY;\n    const strokeWidth = Math.max(Math.round(width / 150), 1);\n    const circleSize = Math.round(strokeWidth * 16);\n\n    const voronoiInstance = voronoi({\n        x: scaledX,\n        y: scaledY,\n        width,\n        height\n    });\n\n    const findNearest = (line, event) => {\n        const point = localPoint(event);\n        const nearest = voronoiInstance(line).find(point.x, point.y).data;\n        return nearest.year;\n    };\n\n    return (\n        <>\n            <svg width={width} height={height}>\n                <>\n                    {lineKeys.map((key) => {\n                        const line = lines[key];\n                        return (\n                            <g key={key}>\n                                {makeSelectableAndInteractive([line[0].name, curry(findNearest)(line)],\n                                    <LinePath\n                                    data={line}\n                                    x={(point: any) => point.scaledX}\n                                    y={(point: any) => point.scaledY}\n                                    stroke={line[0].color}\n                                    strokeWidth={strokeWidth}\n                                    />, lineOptions\n                                )}\n                                {line.map(point => makeSelectable([point.name, point.year],\n                                    <GlyphCircle\n                                    left={point.scaledX}\n                                    top={point.scaledY}\n                                    fill={point.color}\n                                    stroke='#FFFFFF'\n                                    size={circleSize}\n                                    strokeWidth={Math.max(strokeWidth / 3, 1)}\n                                    />, pointOptions\n                                ))}\n                            </g>\n                        );\n                    })}\n                </>\n            </svg>\n            <Tooltip />\n        </>\n    );\n};\n\nexport default LinePlot;\n","import React from \"react\";\nimport {scaleBand, scaleLinear} from \"@visx/scale\";\nimport useSelect from \"../hooks/useSelect\";\nimport {animated, useSprings} from 'react-spring';\nimport {range} from 'ramda';\nimport {FeatureRanges, PCT_V_SPACE_LEFT_FOR_LEGEND, ANIMATION_DURATION} from \"./config\";\nimport { useAppSelector } from \"../app/hooks\";\nimport { selectPlotOrientation } from \"./selectors\";\n\nconst hPaddingPct = 0.015;\nconst vPaddingPct = 0.02\n\nexport type BarPlotProps = {\n    data: any[]\n    featureRanges: FeatureRanges\n    showLabel?: string\n    disableInteraction?: boolean\n    width: number\n    height: number\n};\n\n// TODO: Add back in hight adjustment for legend\nconst getHeightAdjustment = (featureRanges: FeatureRanges, height: number, startAtZero: boolean = true) : number => {\n    const domain = featureRanges.y[1] - (startAtZero ? 0 : featureRanges.y[0]);\n    const pctOfLowest = featureRanges.y[0] / domain;\n    const range = 1 - PCT_V_SPACE_LEFT_FOR_LEGEND;\n    return height - Math.min(height, height * (range / pctOfLowest));\n};\n\nconst HorizontalBarPlot = ({\n    data,\n    featureRanges,\n    showLabel = null,\n    disableInteraction = false,\n    width,\n    height\n}: BarPlotProps) => {\n    const hPadding = React.useMemo(() =>\n        Math.min(width, height) * hPaddingPct,\n        [width, height]\n    );\n    const vPadding = React.useMemo(() =>\n        Math.min(width, height) * vPaddingPct,\n        [width, height]\n    );\n    const heightAdjustment = getHeightAdjustment (featureRanges, height);\n    const r = Math.max(...featureRanges.y.map(y => Math.abs(y)));\n    const yScale = React.useMemo(() => scaleLinear<number>({\n        domain: [-r, r],\n        range: [hPadding, width - hPadding],\n        round: true\n    }), [r, width, hPadding]);\n    const xScale = React.useMemo(() => scaleBand<number>({\n        range: [vPadding, height - vPadding],\n        round: false,\n        domain: range(0, data.filter(d => !!d.y).length),\n        padding: 0.25,\n    }), [data, vPadding, height]);\n    const items = data\n        .map((v) => ({\n            ...v,\n            scaledY: v.y == null ? -99 : yScale(Math.min(0, v.y)),\n            scaledHeight: Math.abs(yScale(v.y) - yScale(0)),\n        }))\n        .sort((a, b) => (b.y == null ? -99 : b.y) - (a.y == null ? -99 : a.y))\n        .map((v, i) => ({\n            ...v,\n            scaledX: xScale(i),\n        }))\n\n    const {makeSelectableAndInteractive, Tooltip} =\n        useSelect(items, ['name'], showLabel, disableInteraction);\n    const animFn = (index: number) => ({\n        animY: items[index].scaledY,\n        animHeight: items[index].scaledHeight || 0,\n        config: {\n            duration: ANIMATION_DURATION\n        }\n    });\n    const [springs, api] = useSprings(items.length, animFn);\n    api.start(animFn);\n    return (\n        <>\n            <svg width={width} height={height}>\n                {items.map((item, i) => {\n                    return makeSelectableAndInteractive([item.name],\n                        <animated.rect\n                            y={item.scaledX}\n                            height={xScale.bandwidth()}\n                            x={springs[i].animY}\n                            width={springs[i].animHeight}\n                            fill={item.color}\n                        />\n                    )\n                })}\n            </svg>\n            <Tooltip />\n        </>\n    );\n};\n\nconst VerticalBarPlot = ({\n    data,\n    featureRanges,\n    showLabel = null,\n    disableInteraction = false,\n    width,\n    height\n}: BarPlotProps) => {\n    const hPadding = React.useMemo(() =>\n        Math.min(width, height) * hPaddingPct,\n        [width, height]\n    );\n    const vPadding = React.useMemo(() =>\n        Math.min(width, height) * vPaddingPct,\n        [width, height]\n    );\n    const heightAdjustment = getHeightAdjustment (featureRanges, height);\n    const yScale = React.useMemo(() => scaleLinear<number>({\n        domain: [0, featureRanges.y[1]],\n        range: [height - vPadding, heightAdjustment + vPadding],\n        round: true\n    }), [height, heightAdjustment, vPadding, featureRanges]);\n    const xScale = React.useMemo(() => scaleBand<number>({\n        range: [hPadding, width - hPadding],\n        round: false,\n        domain: range(0, data.length),\n        padding: 0.25,\n    }), [data, hPadding, width]);\n    const items = data\n        .map((v) => ({\n            ...v,\n            scaledY: yScale(v.y),\n        }))\n        .sort((a, b) => b.y - a.y)\n        .map((v, i) => ({\n            ...v,\n            scaledX: xScale(i),\n        }))\n\n    const {makeSelectableAndInteractive, Tooltip} =\n        useSelect(items, ['name'], showLabel, disableInteraction);\n    const animFn = (index: number) => ({\n        animY: items[index].scaledY,\n        animHeight: height - items[index].scaledY,\n        config: {\n            duration: ANIMATION_DURATION\n        }\n    });\n    const [springs, api] = useSprings(items.length, animFn);\n    api.start(animFn);\n    return (\n        <>\n            <svg width={width} height={height}>\n                {items.map((item, i) => {\n                    return makeSelectableAndInteractive([item.name],\n                        <animated.rect\n                            y={springs[i].animY}\n                            height={springs[i].animHeight}\n                            x={item.scaledX}\n                            width={xScale.bandwidth()}\n                            fill={item.color}\n                        />\n                    )\n                })}\n            </svg>\n            <Tooltip />\n        </>\n    );\n};\n\nconst BarPlot = (props: BarPlotProps) => {\n    const orientation = useAppSelector(selectPlotOrientation);\n    return orientation === 'horizontal' ? (\n        <HorizontalBarPlot {...props} />\n    ) : (\n        <VerticalBarPlot {...props} />\n    );\n}\n\nexport default BarPlot;\n","\n\nexport const setSearchPart = (s: string) => {\n    const parts = window.location.hash.split('?');\n    window.location.hash = [parts[0], s.replace('?', '')].join('?');\n};\n","import React from \"react\";\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport useDarkMode from 'use-dark-mode';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\n// import {TransitionProps} from \"@mui/material/transitions\";\nimport {\n    Button,\n    // Collapse,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    FormControl,\n    FormGroup,\n    IconButton,\n    InputLabel,\n    NativeSelect,\n    TextField\n} from \"@mui/material\";\nimport {\n    FacebookIcon,\n    FacebookShareButton,\n    LinkedinIcon,\n    LinkedinShareButton,\n    PinterestIcon,\n    PinterestShareButton,\n    RedditIcon,\n    RedditShareButton,\n    TwitterIcon,\n    TwitterShareButton,\n} from \"react-share\";\nimport FileCopyOutlinedIcon from '@mui/icons-material/FileCopyOutlined';\nimport * as htmlToImage from 'html-to-image';\nimport {\n    Area,\n    AxisLabelSource, PlotType,\n    SHARE_SIZE_MAP,\n    SHARE_SIZES\n} from \"./config\";\nimport {useAppSelector} from \"../app/hooks\";\nimport {selectPlotType} from \"../features/plotType/plotTypeSlice\";\nimport {selectYear} from \"../features/year/yearSlice\";\nimport {selectArea, selectComparesEnabled} from \"./selectors\";\nimport './sharing.scss';\nimport {useTheme} from \"@mui/system\";\nimport {useLocation} from \"react-router-dom\";\nimport {setSearchPart} from \"./utils/url\";\n\nconst SCALE = 1;\nconst MAX_PREVIEW_WIDTH = 208 / SCALE;\nconst MAX_PREVIEW_HEIGHT = 208 / SCALE;\n\nconst calculatePreviewSize = ({width, height}) => {\n    const ratio = height / width;\n    const h1 = Math.min(ratio * MAX_PREVIEW_WIDTH, MAX_PREVIEW_HEIGHT);\n    const w = Math.min(h1 / ratio, MAX_PREVIEW_WIDTH);\n    const h = Math.min(w * ratio);\n    return {width: w, height: h};\n};\n\n// const ShareTransition = React.forwardRef(function Transition(\n//     props: TransitionProps & { children?: React.ReactElement<any, any> },\n//     ref: React.Ref<unknown>,\n// ) {\n//     return <Collapse ref={ref} {...props} timeout={500} />;\n// });\n\nconst BaseDialog = ({isOpen, setOpen, children, fullScreen=false}) => {\n    const [alreadyOpen, setAlreadyOpen] = React.useState(false);\n    const {search} = useLocation();\n\n    React.useEffect(() => {\n        if (isOpen) {\n            if (!search.includes('dialog=open')) {\n                if (alreadyOpen) {\n                    setOpen(false);\n                    setAlreadyOpen(false);\n                } else {\n                    setSearchPart([search, 'dialog=open'].join('&'));\n                    setAlreadyOpen(true);\n                }\n            }\n        }\n    }, [search, setOpen, isOpen, alreadyOpen]);\n\n    return (\n        <Dialog\n            className='share-dialog'\n            open={isOpen}\n            onClose={() => {\n                setOpen(false);\n                window.history.back();\n            }}\n            fullScreen={fullScreen}\n            keepMounted\n        >\n            {children}\n        </Dialog>\n    );\n};\n\nconst createPlotTitle = (plotType: PlotType,\n                         area: Area,\n                         year: number,\n                         compares: { name: string }[],\n                         xAxisLabel: string,\n                         yAxisLabel: string) => {\n    const cs = compares.length > 0 ? ' by ' + compares.map(c => c.name).join('/') : ''\n    return (!plotType.xAxisLabelSource || plotType.xAxisLabelSource === AxisLabelSource.COMPARE ?\n        yAxisLabel + cs :\n        yAxisLabel + ' / ' + xAxisLabel.toLowerCase() + cs) +\n        (plotType.name === 'line' ? '' : ` (${area.abbrev}, ${year})`)\n};\n\nexport const DumbImageDialog = ({plot, isOpen, setOpen, label, setLabel, pageInDarkMode,\n                                compares, xAxisLabel, yAxisLabel, showAxisLabels,\n                                plotType, area, year, items}) => {\n    const plotTitle = createPlotTitle(plotType, area, year, compares, xAxisLabel, yAxisLabel);\n    const defaultShareSize = SHARE_SIZES[0];\n    const [sharePresetSize, setSharePresetSize] = React.useState(defaultShareSize);\n    const [previewSize, setPreviewSize] = React.useState({\n        width: MAX_PREVIEW_WIDTH,\n        height: MAX_PREVIEW_HEIGHT\n    });\n    const [shareSize, setShareSize] = React.useState({\n        width: defaultShareSize.width,\n        height: defaultShareSize.height\n    });\n    const [format, setFormat] = React.useState('PNG');\n    const [imgData, setImgData] = React.useState<string>(null);\n    const fontSize = Math.round(previewSize.width / 40);\n    const theme = useTheme();\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n    const [darkModeState, setDarkModeState] = React.useState(pageInDarkMode);\n    const darkModeRef = React.useRef({});\n    darkModeRef.current = darkModeState;\n\n    const ImagePreview = () => {\n        const darkMode = useDarkMode(pageInDarkMode, {\n            classNameDark: 'preview-dark-mode',\n            classNameLight: 'preview-light-mode',\n            storageKey: 'previewDarkMode'\n        });\n        React.useEffect(() => {\n            darkModeRef.current ? darkMode.enable() : darkMode.disable();\n        }, [darkMode]);\n        return (\n            <div className='gen-target'>\n                <div className='plot-frame'>\n                    <div className='title'>{plotTitle}</div>\n                    <div className='subtitle'>\n                        Statistipedia: statistipedia.org/explore\n                    </div>\n                    {plot}\n                </div>\n                { showAxisLabels && xAxisLabel &&\n                  <div className='x-axis'>\n                      {xAxisLabel || 'Year'}\n                  </div>\n                }\n                { showAxisLabels && yAxisLabel &&\n                  <div className='y-axis'>\n                      {yAxisLabel}\n                  </div>\n                }\n            </div>\n        );\n    };\n\n    const canvasToPng = (canvas) => {\n        return canvas.toDataURL(\"image/png\", 1.0);\n    };\n\n    const getGenerateFn = () => {\n        switch (format) {\n            case 'PNG': return htmlToImage.toPng;\n            case 'SVG': return htmlToImage.toSvg;\n            default: throw Error('Unhandled format: ' + format);\n        }\n    };\n\n    const GenerateDialog = ({setImgData}) => {\n        const generate = () => {\n            const el: any = document\n                .getElementById('preview')\n                .getElementsByClassName('gen-target')[0];\n            getGenerateFn()(el, {\n                canvasWidth: shareSize.width,\n                canvasHeight: shareSize.height,\n                pixelRatio: 1,\n                width: el.clientWidth,\n                height: el.clientHeight,\n                // skipAutoScale: true,\n                style: {\n                    transform: 'scale(1)'\n                }\n            }).then((dataUrl) => {\n                setImgData(dataUrl);\n            });\n        };\n\n        const setNewSize = (newSize) => {\n            setShareSize(newSize);\n            setPreviewSize(calculatePreviewSize(newSize));\n        };\n\n        const onPresetSizeSelect = (event) => {\n            const name = event.target.value;\n            if (name === 'Custom') {\n                setSharePresetSize(null);\n                document\n                    .getElementsByClassName('MuiDialog-container')[0]\n                    .getElementsByClassName('MuiPaper-root')[0]\n                    .scrollTo(0, 9999);\n            } else {\n                const s = SHARE_SIZE_MAP[name];\n                setSharePresetSize(s);\n                setNewSize(s);\n            }\n        };\n\n        const onSizeChange = (newSize) => {\n            setSharePresetSize(null);\n            setNewSize(newSize);\n        };\n\n        // const onLabelChange = (event) => {\n        //     const value = event.target.value;\n        //     setLabel(value === ' ' ? null : value);\n        // };\n\n        const onFormatChange = (event) => {\n            const value = event.target.value;\n            setFormat(value);\n        };\n\n        const onModeChange = (event) => {\n            const value = event.target.value;\n            const b = value === 'Dark'\n            setDarkModeState(b);\n        };\n\n        return (\n            <>\n                <div className='dialog-title'>Generate image</div>\n                <DialogContent className='dialog-content'>\n                    <div id='preview-container'>\n                        <div id='preview' style={{...previewSize, fontSize}}>\n                            <ImagePreview />\n                        </div>\n                        <div className=\"MuiFormLabel-root caption\">\n                            Preview\n                        </div>\n                    </div>\n                    <div className='share-controls'>\n                        <div className='size-inputs'>\n                            <FormGroup row className='row'>\n                                <FormControl>\n                                    <InputLabel variant=\"standard\" htmlFor=\"preset-size\">Size</InputLabel>\n                                    <NativeSelect id=\"preset-size\"\n                                                onChange={onPresetSizeSelect}\n                                                value={sharePresetSize ? sharePresetSize.name : 'Custom'}>\n                                        <optgroup label=\"Presets\">\n                                            {SHARE_SIZES.map((s) => (\n                                                <option key={s.name}>{s.name}</option>\n                                            ))}\n                                        </optgroup>\n                                        <option>Custom</option>\n                                    </NativeSelect>\n                                </FormControl>\n                            </FormGroup>\n                            <FormGroup row className='custom-size-inputs top-padded row'>\n                                {['width', 'height'].map((s) => (\n                                    <FormControl key={s} className='top-padded custom-size-input'>\n                                        <TextField helperText={s}\n                                                   variant=\"standard\"\n                                                   onChange={(event) =>\n                                                       onSizeChange({...shareSize, [s]: event.target.value})}\n                                                   value={shareSize[s]} />\n                                    </FormControl>\n                                ))}\n                            </FormGroup>\n                        </div>\n                        {/*<FormGroup row className='row'>*/}\n                        {/*    <FormControl className=\"form-control\">*/}\n                        {/*        <InputLabel variant=\"standard\" htmlFor=\"label\">Labeled item</InputLabel>*/}\n                        {/*        <NativeSelect id=\"label\"*/}\n                        {/*                      value={label ? label : ' '}*/}\n                        {/*                      onChange={onLabelChange}>*/}\n                        {/*            <option value=' ' />*/}\n                        {/*            {items.map(({name}) => (*/}\n                        {/*                <option key={name}>{name}</option>*/}\n                        {/*            ))}*/}\n                        {/*        </NativeSelect>*/}\n                        {/*    </FormControl>*/}\n                        {/*</FormGroup>*/}\n                        <FormGroup row className='row'>\n                            <FormControl className=\"form-control\">\n                                <InputLabel variant=\"standard\" htmlFor=\"format\">Format</InputLabel>\n                                <NativeSelect id=\"format\"\n                                                value={format}\n                                                onChange={onFormatChange}\n                                >\n                                    <option>PNG</option>\n                                    <option>SVG</option>\n                                </NativeSelect>\n                            </FormControl>\n                            <FormControl className=\"form-control\">\n                                <InputLabel variant=\"standard\" htmlFor=\"light_dark\">\n                                    Mode\n                                </InputLabel>\n                                <NativeSelect id=\"light_dark\"\n                                                value={darkModeRef.current ? 'Dark' : 'Light'}\n                                                onChange={onModeChange}>\n                                    <option>Light</option>\n                                    <option>Dark</option>\n                                </NativeSelect>\n                            </FormControl>\n                        </FormGroup>\n                        {/*<FormControl className=\"form-control\">*/}\n                        {/*    <FormControlLabel*/}\n                        {/*        control={*/}\n                        {/*            <Switch*/}\n                        {/*                color=\"primary\"*/}\n                        {/*            />*/}\n                        {/*        }*/}\n                        {/*        label=\"Add QR code\"*/}\n                        {/*    />*/}\n                        {/*</FormControl>*/}\n                    </div>\n                </DialogContent>\n                <DialogActions className='dialog-actions'>\n                    <Button onClick={() => window.history.back()}>Close</Button>\n                    <Button onClick={generate}>Generate</Button>\n                </DialogActions>\n            </>\n        );\n    };\n\n    const DownloadDialog = ({imgData, setImgData}) => {\n        const url = window.location.href;\n\n        // const share = () => {\n        //     if (navigator.share) {\n        //         navigator.share({\n        //             title: 'web.dev',\n        //             text: 'Check out web.dev.',\n        //             // url: 'https://web.dev/',\n        //             files: [image]\n        //         })\n        //             .then(() => alert('Successful share'))\n        //             .catch((error) => alert(error));\n        //     }\n        // };\n        return (\n            <>\n                <div className='dialog-title'>Download image</div>\n                <DialogContent className='dialog-content'>\n                    <div className='generated-image'>\n                        <a download={plotTitle} href={imgData}>\n                            <img alt=\"Generated\" src={imgData} />\n                        </a>\n                    </div>\n                    <div className='share-controls'>\n                        <div className='image-share-btns'>\n                            <div className='image-share-btn'>\n                                <PinterestShareButton\n                                    url={url}\n                                    media={imgData}\n                                >\n                                    <PinterestIcon round />\n                                    <div style={{color: '#C9242E'}}>\n                                        Share on Pinterest\n                                    </div>\n                                </PinterestShareButton>\n                            </div>\n                        </div>\n                    </div>\n                </DialogContent>\n                <DialogActions className='dialog-actions'>\n                    <Button onClick={() => setImgData(null)}>Back</Button>\n                    <Button onClick={() => window.history.back()}>Close</Button>\n                    <Button href={imgData} download={plotTitle}>Download</Button>\n                </DialogActions>\n            </>\n        )\n    };\n    return (\n        <BaseDialog isOpen={isOpen} setOpen={setOpen} fullScreen={fullScreen}>\n            {imgData\n                ? <DownloadDialog imgData={imgData} setImgData={setImgData} />\n                : <GenerateDialog setImgData={setImgData} />\n            }\n        </BaseDialog>\n    )\n}\n\nexport const ImageDialog = (props) => {\n    const plotType = useAppSelector(selectPlotType);\n    const area = useAppSelector(selectArea);\n    const year = useAppSelector(selectYear);\n    const comparesEnabled = useAppSelector(selectComparesEnabled);\n    const items = [];  // TODO: Needs to provide the same items provided to the specific plot type\n    return <DumbImageDialog {...props}\n                            compares={comparesEnabled ? props.compares : []}\n                            plotType={plotType}\n                            area={area}\n                            year={year}\n                            items={items} />\n};\n\nexport const BasicShareDialog = ({isOpen, setOpen, title='Statistipedia Explore'}) => {\n    const url = window.location.href;\n    return (\n        <BaseDialog isOpen={isOpen} setOpen={setOpen}>\n            <>\n                <div className='dialog-header'>\n                    <div className='dialog-title'>Share</div>\n                </div>\n                <DialogContent className='dialog-content'>\n                    <div className='social-btns'>\n                        <FacebookShareButton\n                            url={url}\n                            quote={title}\n                        >\n                            <FacebookIcon round />\n                        </FacebookShareButton>\n                        <TwitterShareButton\n                            url={url}\n                            title={title}\n                        >\n                            <TwitterIcon round />\n                        </TwitterShareButton>\n                        <RedditShareButton\n                            url={url}\n                            title={title}\n                        >\n                            <RedditIcon round />\n                        </RedditShareButton>\n                        <LinkedinShareButton url={url}>\n                            <LinkedinIcon round />\n                        </LinkedinShareButton>\n                    </div>\n                    <div style={{display: 'flex'}}>\n                        <TextField value={url} />\n                        <CopyToClipboard onCopy={() => {}} text={url}>\n                            <IconButton aria-label=\"copy\"\n                                        className='copy-btn'\n                                        title='Copy to clipboard'>\n                                <FileCopyOutlinedIcon />\n                            </IconButton>\n                        </CopyToClipboard>\n                    </div>\n                </DialogContent>\n                <DialogActions className='dialog-actions'>\n                    <Button onClick={() => window.history.back()}>Close</Button>\n                </DialogActions>\n            </>\n        </BaseDialog>\n    );\n};\n\nexport const SharePlotDialog  = ({isOpen, setOpen, compares, xAxisLabel, yAxisLabel}) => {\n    const plotType = useAppSelector(selectPlotType);\n    const area = useAppSelector(selectArea);\n    const year = useAppSelector(selectYear);\n    const comparesEnabled = useAppSelector(selectComparesEnabled);\n    const plotTitle = createPlotTitle(\n        plotType, area, year, \n        comparesEnabled ? compares : [], xAxisLabel, yAxisLabel);\n    return <BasicShareDialog isOpen={isOpen} setOpen={setOpen} title={plotTitle} />;\n};\n","import React from 'react';\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport { setYear, selectYear } from './yearSlice';\nimport {Box, Slider, IconButton} from \"@mui/material\";\nimport PlayIcon from '@mui/icons-material/PlayArrow';\nimport {styled} from \"@mui/system\";\nimport {selectPlotType} from \"../plotType/plotTypeSlice\";\nimport {last} from 'ramda';\nimport './YearSlider.scss';\nimport { ANIMATION_DURATION } from '../../dashboard/config';\nimport { selectAvailableYears } from '../../dashboard/selectors';\n\nconst PrettoSlider = styled(Slider)({\n    color: '#318Cf6',\n    height: 8,\n    '& .MuiSlider-track': {\n        border: 'none',\n    },\n    '& .MuiSlider-thumb': {\n        height: 24,\n        width: 24,\n        backgroundColor: '#fff',\n        border: '2px solid currentColor',\n        '&:focus, &:hover, &.Mui-active, &.Mui-focusVisible': {\n            boxShadow: 'inherit',\n        },\n        '&:before': {\n            display: 'none',\n        },\n    },\n    '& .MuiSlider-valueLabel': {\n        lineHeight: 1.2,\n        fontSize: 12,\n        background: 'unset',\n        padding: 0,\n        width: 32,\n        height: 32,\n        borderRadius: '50% 50% 50% 0',\n        backgroundColor: '#318Cf6',\n        transformOrigin: 'bottom left',\n        transform: 'translate(50%, -100%) rotate(-45deg) scale(0)',\n        '&:before': { display: 'none' },\n        '&.MuiSlider-valueLabelOpen': {\n            transform: 'translate(50%, -100%) rotate(-45deg) scale(1)',\n        },\n        '& > *': {\n            transform: 'rotate(45deg)',\n        },\n    },\n    '& .Mui-disabled .MuiSlider-valueLabel': {\n        display: 'none'\n    }\n});\n\nclass PlayButton extends React.Component<{year: number, years: number[], disabled: boolean, setYear: (y: number) => void}, {running: boolean}> {\n    timer;\n\n    constructor(props) {\n        super(props);\n        this.state = {running: false};\n    }\n\n    advanceYear = () => {\n        const {year, years, setYear} = this.props;\n        const yearsRemaining = years.filter(y => y > year);\n        setYear(yearsRemaining[0]);\n        if (yearsRemaining.length > 1) {\n            setTimeout(this.advanceYear, ANIMATION_DURATION);\n        } else {\n            this.setState({running: false});\n        }\n    };\n\n    startSlideshow = () => {\n        this.setState({running: true});\n        const {years, setYear} = this.props;\n        setYear(years[0]);\n        setTimeout(this.advanceYear, ANIMATION_DURATION * 1.5);\n    };\n\n\n    componentWillUnmount() {\n        clearTimeout(this.timer);\n    }\n\n    render() {\n        return (\n            <IconButton \n                className='play' disabled={this.props.disabled || this.state.running}\n                onClick={() => this.startSlideshow()}\n            >\n            <PlayIcon />\n        </IconButton>\n        )\n    }\n}\n\nconst YearSlider = () => {\n    const year = useAppSelector(selectYear);\n    const plotType = useAppSelector(selectPlotType);\n    const years = useAppSelector(selectAvailableYears);\n    const dispatch = useAppDispatch();\n    const marks = years.map(y => ({value: y, label: ''}))\n\n    return plotType && year && years.length > 0 && (\n        <div className='timeline'>\n            <PlayButton \n                disabled={plotType.name === 'line'}\n                year={year}\n                years={years}\n                setYear={(y: number) => dispatch(setYear(y))}\n            />\n            <Box sx={{\n                flex: '1 1'\n            }}>\n                <PrettoSlider\n                    className='custom-slider'\n                    value={year}\n                    step={null}\n                    marks={marks}\n                    min={years[0]}\n                    max={last(years)}\n                    disabled={plotType.name === 'line'}\n                    valueLabelDisplay=\"on\"\n                    onChange={(event, y: number) => {\n                        if (year !== y) {\n                            dispatch(setYear(y))\n                        }\n                    }}\n                    sx={{\n                        paddingTop: '20px',\n                        '& .MuiSlider-markLabel': {\n                            top: '40px'\n                        }\n                    }}\n                />\n            </Box>\n        </div>\n    );\n}\n\nexport default YearSlider;\n","import PlaceIcon from \"@mui/icons-material/Place\";\nimport {ReactComponent as CompareIconSrc} from \"./icons/Compare.svg\";\nimport {ReactComponent as CompareDiffIconSrc} from \"./icons/CompareDiff.svg\";\nimport TagIcon from \"@mui/icons-material/Tag\";\nimport BallotIcon from '@mui/icons-material/Ballot';\nimport AccessTimeFilledIcon from '@mui/icons-material/AccessTimeFilled';\nimport CalendarMonthIcon from '@mui/icons-material/CalendarMonth';\nimport TimelapseIcon from '@mui/icons-material/Timelapse';\nimport PaidIcon from '@mui/icons-material/Paid';\nimport {SvgIcon} from \"@mui/material\";\nimport BubbleChartIcon from \"@mui/icons-material/BubbleChart\";\nimport DoDisturbIcon from '@mui/icons-material/DoDisturb';\nimport TimelineIcon from \"@mui/icons-material/Timeline\";\nimport BarChartIcon from \"@mui/icons-material/BarChart\";\nimport RoomIcon from \"@mui/icons-material/Room\";\n\nconst makeIcon = (iconSrc) => () => (\n    <SvgIcon component={iconSrc} viewBox=\"0 0 256 256\" />\n);\n\nexport const FIELD_TYPE_ICONS_MAP: {[name: string]: any} = {\n    'geo': PlaceIcon,\n    'numeric': makeIcon(CompareIconSrc),\n    'nominal': makeIcon(CompareIconSrc),\n    'ordinal': makeIcon(CompareIconSrc),\n    'percent': TimelapseIcon,\n    'dollars': PaidIcon,\n    'minutes': AccessTimeFilledIcon,\n    'hours': AccessTimeFilledIcon,\n    'years': CalendarMonthIcon,\n    'election': BallotIcon,\n    'none': DoDisturbIcon,\n    'default': TagIcon\n};\n\nexport const PLOT_TYPE_ICONS_MAP: {[name: string]: typeof SvgIcon} = {\n    'bubble': BubbleChartIcon,\n    'line': TimelineIcon,\n    'bar': BarChartIcon,\n    'map': RoomIcon\n};\n","import {ToggleButton, ToggleButtonGroup} from \"@mui/material\";\nimport {PLOT_TYPES} from \"../../dashboard/config\";\nimport React from \"react\";\nimport {useAppDispatch, useAppSelector} from \"../../app/hooks\";\nimport {selectPlotType, setPlotType} from \"./plotTypeSlice\";\nimport {PLOT_TYPE_ICONS_MAP} from \"../../dashboard/icons\";\n\n\nconst PlotTypeSelect = () => {\n    const plotType = useAppSelector(selectPlotType);\n    const dispatch = useAppDispatch();\n\n    const changePlotType = (event, name) => {\n        dispatch(setPlotType(name));\n    }\n\n    return (\n        <div className='plot-type'>\n            <ToggleButtonGroup size='small'\n                               value={plotType.name}\n                               exclusive\n                               onChange={changePlotType}>\n                {PLOT_TYPES.map((pt) => {\n                    const Icon = PLOT_TYPE_ICONS_MAP[pt.name];\n                    return (\n                        <ToggleButton key={pt.name} value={pt.name}>\n                            {<Icon />}\n                        </ToggleButton>\n                    );\n                })}\n            </ToggleButtonGroup>\n        </div>\n    );\n};\n\nexport default PlotTypeSelect;\n","import PlotTypeSelect from \"../plotType/PlotTypeSelect\";\nimport {\n    Button, Divider, Drawer, FormControl, Input,\n    InputLabel, ListItemText, Menu, MenuItem,\n    NativeSelect, ListItemIcon, IconButton\n} from \"@mui/material\";\nimport React, {ChangeEvent, useEffect} from \"react\";\nimport {useAppDispatch, useAppSelector} from \"../../app/hooks\";\nimport {setControls} from \"./controlsSlice\";\nimport {selectPlotType} from \"../plotType/plotTypeSlice\";\nimport {\n    selectAreas,\n    selectAllCompareByFieldDetails,\n    selectLevels, selectFeatureFields\n} from \"../data/dataSlice\";\nimport {selectComparesEnabled, selectControlFields} from \"../../dashboard/selectors\";\nimport {allValuesNotNull, capitalize} from \"../../dashboard/utils/misc\";\nimport {groupBy, curry, zipObj} from \"ramda\";\nimport {\n    BOTTOM_DRAWER_CORNER, BOTTOM_DRAWER_HEIGHT,\n    CompareByField, FeatureField\n} from \"../../dashboard/config\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\nimport {useTheme} from \"@mui/system\";\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\nimport './Controls.scss';\nimport {FIELD_TYPE_ICONS_MAP} from \"../../dashboard/icons\";\nimport Cached from \"@mui/icons-material/Cached\";\n\ntype FieldOption = FeatureField & {\n    disabled: boolean\n}\n\ntype FieldGroup = {\n    name: string,\n    fields: FieldOption[]\n};\n\nconst groupFields = (fields: any[]) : FieldGroup[] => {\n    const gs = groupBy(f => f.group, fields);\n    return Object.keys(gs).map(k => ({ name: k, fields: gs[k] }));\n};\n\nconst DrawerFieldSelect = ({children, title, open, setOpen}) => {\n    useEffect(() => {\n        document.body.style.position = open ? 'fixed' : 'initial';\n    }, [open]);\n\n    return (\n        <Drawer\n            anchor='bottom'\n            PaperProps={{\n                style: {\n                    height: BOTTOM_DRAWER_HEIGHT,\n                    borderRadius: `${BOTTOM_DRAWER_CORNER}px ${BOTTOM_DRAWER_CORNER}px 0 0`\n                }\n            }}\n            ModalProps={{\n                keepMounted: true\n            }}\n            open={open}\n            onClose={() => setOpen(false)}\n        >\n            <div>\n                <div className='select-drawer-bar'>\n                    <div className='title'>{title}</div>\n                    <div className='actions'>\n                        <Button onClick={() => setOpen(false)}>Close</Button>\n                    </div>\n                </div>\n                <div className='select-drawer-content'>\n                    {children}\n                </div>\n            </div>\n        </Drawer>\n    );\n};\n\nconst MenuFieldSelect = ({children, anchorEl, setAnchorEl}) => (\n    <Menu\n        variant=\"menu\"\n        anchorEl={anchorEl}\n        open={anchorEl != null}\n        onClose={() => setAnchorEl(null)}\n        MenuListProps={{\n            role: 'listbox',\n        }}\n    >\n        {children}\n    </Menu>\n);\n\nconst FieldSelect = ({children, title, anchorEl, setAnchorEl}) => {\n    const theme = useTheme();\n    const useDrawer = useMediaQuery(theme.breakpoints.down('md'));\n    return useDrawer ? (\n        <DrawerFieldSelect title={title}\n                           open={anchorEl != null}\n                           setOpen={() => setAnchorEl(null)}>\n            {children}\n        </DrawerFieldSelect>\n    ) : (\n        <MenuFieldSelect anchorEl={anchorEl}\n                         setAnchorEl={setAnchorEl}>\n            {children}\n        </MenuFieldSelect>\n    )\n};\n\nconst BaseFieldSelect = ({field, options, onChange, disabled=false, label,\n                             value, className=undefined} :\n                             {field: string, options: FieldGroup[], onChange,\n                                 disabled?: boolean, label: string,\n                                 value: string, className?: string}) => {\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const handleClickListItem = (event) => {\n        !disabled && setAnchorEl(event.currentTarget);\n    };\n    return (\n        <div>\n            <FormControl className=\"form-control\" disabled={disabled}>\n                <InputLabel variant=\"standard\" htmlFor={`field-${field}`}>\n                    {label}\n                </InputLabel>\n                <div className={`${disabled ? 'Mui-disabled ': ''}${className ? className + ' ' : ''}custom-select MuiInput-root MuiInput-underline MuiInputBase-root MuiInputBase-colorPrimary MuiInputBase-formControl MuiSelect-root`}\n                     onClick={handleClickListItem}>\n                    <div role=\"button\" aria-expanded=\"false\"\n                         aria-haspopup=\"listbox\" aria-labelledby=\"compare-by-1\"\n                         id=\"compare-by-1\"\n                         className=\"MuiSelect-select MuiSelect-standard MuiInput-input MuiInputBase-input\">\n                        {value}\n                    </div>\n                    <ArrowDropDownIcon className='adornment' />\n                    <Input id={`field-${field}`}\n                           className=\"MuiSelect-nativeInput css-yf8vq0-MuiSelect-nativeInput\"\n                           type='hidden'\n                           value={value}\n                           aria-hidden=\"true\"\n                    />\n                </div>\n            </FormControl>\n            <FieldSelect title={label} anchorEl={anchorEl} setAnchorEl={setAnchorEl}>\n                {options.flatMap((g, i) => [\n                    i > 0 ? <Divider key={`${g.name}_divider`} /> : null,\n                    <MenuItem disabled={true}\n                              key={`${g.name}_header`}\n                              className='menu-group-header'>\n                        {g.name}\n                    </MenuItem>,\n                    ...g.fields.map(f => {\n                        const Icon = FIELD_TYPE_ICONS_MAP[f.formatType] || FIELD_TYPE_ICONS_MAP.default;\n                        return (\n                            <MenuItem key={f.id}\n                                      value={f.id}\n                                      selected={f.name === value}\n                                      disabled={f.disabled}\n                                      onClick={() => onChange({[field]: f.id})}>\n                                <ListItemIcon>\n                                    <Icon/>\n                                </ListItemIcon>\n                                <ListItemText primary={f.name}\n                                              secondary={f.description}/>\n                            </MenuItem>\n                        )\n                    })\n                ])}\n            </FieldSelect>\n        </div>\n    );\n};\n\nconst Controls = () => {\n    const plotType = useAppSelector(selectPlotType);\n    const controls = useAppSelector(selectControlFields);\n    const controlsIsReady = allValuesNotNull(controls);\n    const comparesEnabled = useAppSelector(selectComparesEnabled);\n    const featureFields = useAppSelector(selectFeatureFields);\n    const compareByFields = useAppSelector(selectAllCompareByFieldDetails);\n    const areas = useAppSelector(selectAreas);\n    const levels = useAppSelector(selectLevels);\n    const dispatch = useAppDispatch();\n\n    const disableUsedCompares = (fields: CompareByField[]) : CompareByField[] => {\n        const used = controls.compare.map(c => c.id);\n        return fields.map(f => ({\n            ...f,\n            disabled: used.includes(f.id)\n        }));\n    };\n\n    const addRecents = (fields: CompareByField[]) : CompareByField[] => {\n        const none = {\n            id: 'none',\n            colorType: null,\n            name: 'None',\n            description: 'Clear field',\n            group: 'Recently used',\n            allowCompares: true,\n            values: {}\n        };\n        return [none, ...fields];\n    }\n\n    const fieldGroups = groupFields(featureFields);\n    const compareByGroups = groupFields(addRecents(disableUsedCompares(compareByFields)));\n\n    const updateState = (newState: {[key: string]: any}) => {\n        return dispatch(setControls(zipObj(Object.keys(newState), Object.values(newState))));\n    };\n\n    const updateCompare = (i: number, newState: {[key: string]: any}) => {\n        const newNewState = newState;\n        const k = Object.keys(newState)[0];\n        const v = Object.values(newState)[0];\n        if (v === 'none') {\n            switch (i) {\n                case 0: newNewState[k] = controls.compare.length === 2 ?\n                    [controls.compare[1].id] : []; break;\n                case 1: newNewState[k] = [controls.compare[0].id]; break;\n                default: throw new Error('Unexpected compare index: ' + i)\n            }\n        } else {\n            switch (i) {\n                case 0: newNewState[k] = controls.compare.length === 2 ?\n                    [v, controls.compare[1].id] : [v]; break;\n                case 1: newNewState[k] = [controls.compare[0].id, v]; break;\n                default: throw new Error('Unexpected compare index: ' + i)\n            }\n        }\n        return updateState(newNewState);\n    };\n\n    const switchCompares = () => {\n        const newState = {\n            'compare': [controls.compare[1].id, controls.compare[0].id]\n        };\n        return(updateState(newState));\n    };\n\n    const CompareByFieldSelect = ({i, disabled}: {i: number, disabled?: boolean}) => (\n        <BaseFieldSelect field={`compare`}\n                         className='compare-by'\n                         options={compareByGroups}\n                         onChange={curry(updateCompare)(i)}\n                         disabled={disabled || plotType.name === 'map' || i > controls.compare.length}\n                         label='Compare by'\n                         value={controls.compare[i]?.name || ' '}\n        />\n    );\n\n    const FieldSelect = ({field} : {field: string}) => (\n        <BaseFieldSelect field={field}\n                         options={fieldGroups}\n                         onChange={updateState}\n                         disabled={!plotType.fields[field]}\n                         label={plotType.fields[field] || `${field.toUpperCase()}-Axis`}\n                         value={controls[field].name}\n        />\n    );\n\n    const BasicSelect =\n        ({field, options, disabled=false,\n             onChange=(e) => updateState({[field]: e.target.value})} :\n             {field: string, options: {allIds: string[], byId}, disabled?: boolean,\n             onChange?: (e: ChangeEvent<HTMLSelectElement>) => void}) => (\n        <FormControl className=\"form-control\" disabled={disabled}>\n            <InputLabel variant=\"standard\" htmlFor={`field-${field}`}>\n                {capitalize(field)}\n            </InputLabel>\n            <NativeSelect id={field}\n                          className='custom-select'\n                          onChange={onChange}\n                          value={controls[field].id}>\n                {options.allIds.map(id => (\n                    <option key={id} value={id}>{options.byId[id].name}</option>\n                ))}\n            </NativeSelect>\n        </FormControl>\n    )\n\n    // Not working\n    // const AutocompleteSelect =\n    //     ({field, options, disabled=false} :\n    //          {field: string, options: {allIds: string[], byId}, disabled?: boolean}) => (\n    //     <Autocomplete\n    //         freeSolo\n    //         disabled={disabled}\n    //         id={field}\n    //         className=\"form-control\"\n    //         options={options.allIds}\n    //         value={controls[field].id}\n    //         getOptionLabel={(option) => options.byId[option].name}\n    //         renderInput={(params) =>\n    //             <TextField {...params} variant=\"standard\" label={capitalize(field)} />}\n    //     />\n    // )\n\n    return controlsIsReady && areas.allIds.length > 0 && (\n        <div className='controls'>\n            <PlotTypeSelect />\n            <BasicSelect field='area'\n                         options={areas}\n                         onChange={(e) => {\n                             const v = e.target.value;\n                             updateState({\n                                 'area': v,\n                                 'level': v === 'us' ? 'state' : 'county'\n                             });\n                         }} />\n            <BasicSelect field='level' options={levels} disabled={true} />\n            <FieldSelect field='x' />\n            <FieldSelect field='y' />\n            <FieldSelect field='z' />\n            <div className='compare-by-fieldset'>\n                <div className='fields'>\n                    <CompareByFieldSelect i={0} disabled={!comparesEnabled} />\n                    <CompareByFieldSelect i={1} disabled={!comparesEnabled} />\n                </div>\n\n                <div className='switch'>\n                    <IconButton size='small'\n                                disabled={!comparesEnabled || plotType.name === 'map' || controls.compare.length < 2}\n                                onClick={switchCompares}>\n                        <Cached />\n                    </IconButton>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Controls;\n","import React from 'react';\nimport {useAppDispatch, useAppSelector} from \"../../app/hooks\";\nimport {clearDataValues, selectCompareByFields, setData} from \"./dataSlice\";\nimport {DATA_DIR, DataValue, DerivedDataValueSet} from \"../../dashboard/config\";\nimport {groupBy, difference, uniqBy} from 'ramda';\nimport axios from \"axios\";\nimport {flattenArrayOfObjects} from \"../../dashboard/utils/misc\";\nimport {selectComparesEnabled, selectControlFieldIds, selectPlotEnabledFields} from \"../../dashboard/selectors\";\nimport {selectControlsLoaded} from \"../controls/controlsSlice\";\nimport {selectPlotType} from \"../plotType/plotTypeSlice\";\n\ntype ChunkParams = {\n    level: string\n    area: string\n}\n\ntype ValueChunkParams = ChunkParams & {\n    compare: string[]\n    feature: string\n}\n\ntype TopologyChunkParams = {\n\n}\n\ntype ChunkToFetch<P> = {\n    url: string,\n    params: P\n}\n\ntype FetchedChunk<P> = {\n    data: DataValue[],\n    params: P\n}\n\ntype FlattenedValueChunk = {\n    data: DataValue,\n    params: ValueChunkParams\n}\n\nconst sortCompares = (compareFields, compares) => {\n    return compareFields.allIds.filter(c => compares.includes(c));\n};\n\nconst DataManager = () => {\n    const plotType = useAppSelector(selectPlotType);\n    const controls = useAppSelector(selectControlFieldIds);\n    const compareFields = useAppSelector(selectCompareByFields);\n    const comparesEnabled = useAppSelector(selectComparesEnabled);\n    const enabledFields = useAppSelector(selectPlotEnabledFields)\n    const controlsLoaded = useAppSelector(selectControlsLoaded);\n    const dispatch = useAppDispatch();\n\n    const computeValueChunk = (\n        area: string,\n        level: string,\n        feature: string,\n        compare: string[],\n        plotType: string\n    ) : ChunkToFetch<ValueChunkParams> => {\n        const c = !comparesEnabled || compare.length === 0 || plotType === 'map' ? 'all' : compare.join('_');\n        return {\n            url: `/features/${area}/${level}/${feature}/${c}.json`,\n            params: {\n                area,\n                level,\n                compare,\n                feature,\n            }\n        };\n    }\n    \n    const computeTopologyChunk = (\n        area: string,\n        level: string\n    ) : ChunkToFetch<TopologyChunkParams> => {\n        return {\n            url: `/topologies/${area}.json`,\n            params: {\n                area,\n                level\n            }\n        };\n    }\n\n    React.useEffect(() => {\n        const _computeChunks = () : ChunkToFetch<ValueChunkParams|TopologyChunkParams>[] => {\n            const compares = sortCompares(compareFields, controls.compare);\n            const valueChunks = ['x', 'y', 'z']\n                .filter(f => enabledFields.includes(f))\n                .map(f => controls[f])\n                .map(f => computeValueChunk(controls.area, controls.level, f, compares, plotType.name))\n            const uniqueValueChunks = uniqBy((c: ChunkToFetch<ValueChunkParams>) => c.url, valueChunks)\n            return [\n                ...uniqueValueChunks,\n                computeTopologyChunk(controls.area, controls.level)\n            ];\n        }\n\n        const isValueChunk = (c: FetchedChunk<ValueChunkParams|TopologyChunkParams>) : boolean => {\n            // @ts-ignore\n            return !!c.params.compare;\n        }\n\n        const groupByFn = (v: FlattenedValueChunk) => {\n            const compareValues = v.params.compare.map(c => v.data[c]);\n            return v.data.geoid + \"_\" + v.data.year + \"_\" + compareValues.join(\"_\");\n        }\n\n        const mergeFeatures = (vs: FlattenedValueChunk[]) : DerivedDataValueSet => {\n            const featureSet = [...new Set(vs.flatMap(v => v.params.feature))];\n            const allKeys = [...new Set(vs.flatMap(v => Object.keys(v.data)))];\n            const nonFeatureSet = difference(allKeys, featureSet);\n            const output = {};\n            vs.forEach(v => {\n                featureSet.forEach(feature => {\n                    const featureValue = v.data[feature];\n                    if (featureValue != null) {\n                        output[feature] = featureValue\n                    }\n                });\n            });\n            nonFeatureSet.forEach(key => {      // All non-feature values\n                output[key] = vs[0].data[key];  // should be the same\n            });\n            return output;\n        };\n\n        const processValues = (cs: FetchedChunk<ValueChunkParams>[]) : DerivedDataValueSet[] => {\n            const vs: FlattenedValueChunk[] = cs.flatMap(\n                c => c.data.map(d => ({data: d, params: c.params})));\n            const groups: FlattenedValueChunk[][] = Object.values(groupBy(groupByFn, vs));\n            return groups.map(mergeFeatures);\n        };\n\n        const onChunksFetched = (cs: FetchedChunk<ValueChunkParams|TopologyChunkParams>[]): void => {\n            const valueDataArray = cs.filter(isValueChunk) as FetchedChunk<ValueChunkParams>[];\n            const valueData = processValues(valueDataArray);\n            const otherData = cs.filter(c => !isValueChunk(c)).map(c => c.data);\n            const data = { values: valueData, ...flattenArrayOfObjects(otherData) };\n            dispatch(setData(data));\n        };\n\n        const _fetchChunks = (cs: ChunkToFetch<ValueChunkParams|TopologyChunkParams>[]) => {\n            Promise.all(cs.map(c => axios.get(DATA_DIR + c.url))).then((responses) => {\n                const fcs = responses.map((r, i) =>\n                    ({data: r.data, params: cs[i].params}));\n                onChunksFetched(fcs);\n            });\n        };\n\n        const update = () => {\n            return (dispatch, getState) => {\n                dispatch(clearDataValues());\n                _fetchChunks(_computeChunks());\n            }\n        };\n\n        if (controlsLoaded)\n            dispatch(update());\n    }, [dispatch, plotType, controls, controlsLoaded]);  // data left out of deps to prevent infinite loop\n\n    return null;\n}\n\nexport default DataManager;\n","import React from 'react';\nimport {useLocation} from 'react-router-dom';\nimport {useAppDispatch, useAppSelector} from \"../app/hooks\";\nimport {selectControlFields, selectControlFieldIds} from \"./selectors\";\nimport {selectYear, setYear} from \"../features/year/yearSlice\";\nimport {map, filter,} from 'ramda';\nimport {selectPlotType, setPlotType} from \"../features/plotType/plotTypeSlice\";\nimport {setControls, setLoaded} from \"../features/controls/controlsSlice\";\nimport {setSearchPart} from \"./utils/url\";\nconst queryString = require('query-string');\n\nconst Url = () => {\n    const controls = useAppSelector(selectControlFieldIds);\n    const storedYear = useAppSelector(selectYear);\n    const storedPlotType = useAppSelector(selectPlotType);\n    const dispatch = useAppDispatch();\n    const {search} = useLocation();\n\n    // Don't think we need the thunk stuff anymore, but just leave it for now.\n\n    const updateUrl = () => {\n        return (dispatch, getState) => {\n            const state = getState();\n            const controls = selectControlFields(state);\n            const storedYear = selectYear(state);\n            const storedPlotType = selectPlotType(state);\n            if (state.controls.loaded) {\n                const allParams = {\n                    plot: storedPlotType.name,\n                    ...map(f => f ? f.id : null, controls),\n                    compare: controls.compare.map(c => c.id),\n                    year: storedYear\n                };\n                const params = filter(p => !!p, allParams);\n                const newS = queryString.stringify(params, {arrayFormat: 'bracket'});\n                if (newS !== search) {\n                    setSearchPart(newS);\n                    // TODO: Should we really clobber all the history?\n                    // window.history.replaceState({}, null, '?' + s);\n                }\n            }\n        }\n    }\n\n    const configUpdated = () => {\n        const { x, y, z, area, level, compare, plot, year } =\n            queryString.parse(search, {arrayFormat: 'bracket'});\n        const nonNullControls = filter(v => !!v, {x, y, z, area, level, compare});\n        dispatch(setControls(nonNullControls));\n        if (!!plot)\n            dispatch(setPlotType(plot));\n        if (!!year)\n            dispatch(setYear(parseInt(year)));\n    }\n\n    const loadState = () => {\n        return (dispatch, getState) => {\n            dispatch(updateUrl());\n            dispatch(setLoaded());\n        }\n    }\n\n    React.useEffect(() => {  // Only first load\n        dispatch(loadState());\n    }, []);\n\n    React.useEffect(() => {   // On URL change\n        configUpdated();\n    }, [search]);\n\n    React.useEffect(() => {   // On controls change\n        dispatch(updateUrl());\n    }, [dispatch, controls, storedYear, storedPlotType]);\n\n    return null\n};\n\nexport default Url\n","import {FC} from 'react';\nimport './Legend.scss';\nimport {useAppSelector} from \"../app/hooks\";\nimport {\n    selectColorPalette,\n    selectColorCodedFields,\n    selectLegendPosition,\n} from \"./selectors\";\nimport {ColorPalette} from \"./utils/colors\";\nimport {ColoredField} from \"./config\";\nimport Tooltip from '@mui/material/Tooltip';\n\ntype LegendComponentProps = {\n    fields: ColoredField[]\n    colorPalette: ColorPalette\n}\n\nconst bgAlphaHex = 'CC';\n\nconst OrdinalStrip = ({fromColor, toColor, label=null}) => {\n    return (\n        <>\n            <div className='strip'\n                 style={{\n                     backgroundImage: `linear-gradient(to right, ${fromColor + bgAlphaHex}, ${toColor + bgAlphaHex})`\n                 }}>\n                {label}\n            </div>\n        </>\n    )\n}\n\nconst OrdinalLabels = ({start, end}) => (\n    <div className='labels strip'>\n        <div className='label' style={{ top: 0, left: 0 }}>{start}</div>\n        <div className='label' style={{ top: 0, right: 0 }}>{end}</div>\n    </div>\n)\n\nconst OrdinalLegend = ({colorPalette}: LegendComponentProps) => {\n    return (\n        <div className='ordinal'>\n            <OrdinalLabels start={colorPalette.labels.cols[0]}\n                           end={colorPalette.labels.cols[1]} />\n            <OrdinalStrip fromColor={colorPalette.colors.byRowAndCol[0][0]}\n                          toColor={colorPalette.colors.byRowAndCol[0][1]}\n            />\n        </div>\n    );\n};\n\nconst NominalLegend = ({colorPalette}: LegendComponentProps) => {\n    return (\n        <div className='nominal'>\n            {colorPalette.colors.byRowAndCol.map((row, r) =>\n                <div key={'row-' + r}\n                     className='strip'\n                     style={{ backgroundColor: row[0] + bgAlphaHex }}>\n                    {colorPalette.labels.rows[r]}\n                </div>\n            )}\n        </div>\n    );\n};\n\nconst OrdinalByNominalLegend = ({colorPalette}: LegendComponentProps) => (\n    <div className='ordinal'>\n        <OrdinalLabels start={colorPalette.labels.cols[0]}\n                       end={colorPalette.labels.cols[1]} />\n        {colorPalette.colors.byRowAndCol.map((colorRow, r) => (\n            <OrdinalStrip key={'row-' + r}\n                          fromColor={colorRow[0]}\n                          toColor={colorRow[1]}\n                          label={colorPalette.labels.rows[r]}\n            />\n        ))}\n    </div>\n);\n\nconst NominalByNominalLegend = ({colorPalette}: LegendComponentProps) => (\n    <table className='nominal-grid' cellPadding={0} cellSpacing={0}>\n        <tbody>\n            <tr>\n                <th />\n                {colorPalette.labels.cols.map((col, c) => (\n                    <th key={'col-header-' + c} className='col-header'>\n                        {col}\n                    </th>\n                ))}\n            </tr>\n            {colorPalette.colors.byRowAndCol.map((colorRow, r) => (\n                <tr key={'row-' + r} >\n                    <th className='row-header'>\n                        {colorPalette.labels.rows[r]}\n                    </th>\n                    {colorRow.map((colorCell, c) => (\n                        <Tooltip disableFocusListener\n                                 key={`cell-${c}-${r}`}\n                                 title={\n                                     colorPalette.fullNames.rows[r] + ', ' +\n                                     colorPalette.fullNames.cols[c]}>\n                            <td className='cell'\n                                style={{\n                                    backgroundColor: colorCell + bgAlphaHex\n                                }} />\n                        </Tooltip>\n                    ))}\n                </tr>\n            ))}\n        </tbody>\n    </table>\n);\n\nconst OrdinalByOrdinalLegend = ({colorPalette}: LegendComponentProps) => {\n    const cs = colorPalette.colors.byRowAndCol;\n    const ls = colorPalette.labels;\n    return (\n        <div  className='ordinal'>\n            <div className='layer'\n                 style={{\n                     backgroundImage: `linear-gradient(to right, ${cs[0][0] + bgAlphaHex}, ${cs[0][1] + bgAlphaHex})`,\n                }}\n            >\n            </div>\n            <div className='layer'\n                 style={{\n                     backgroundImage: `linear-gradient(to right, ${cs[1][0] + bgAlphaHex}, ${cs[1][1] + bgAlphaHex}`,\n                     WebkitMask: 'linear-gradient(to bottom, #0000, #00000080 50%, #000D 80%, #000 100%)',\n                     mask: 'linear-gradient(to bottom, #0000, #00000080 50%, #000D 80%, #000 100%)',\n                 }}\n            >\n            </div>\n            <div className='label' style={{ top: 4, left: 16}}>${ls.cols[0]}</div>\n            <div className='label' style={{ top: 4, right: 10}}>${ls.cols[1]}</div>\n            <div className='label' style={{ top: 16, left: 6 }}>${ls.rows[0]}</div>\n            <div className='label' style={{ bottom: 10, left: 6 }}>${ls.rows[1]}</div>\n        </div>\n    );\n};\n\nconst getLegendComponent = (fields: ColoredField[]) : FC<LegendComponentProps> => {\n    const types = fields.map(c => c.colorType);\n    switch (fields.length) {\n        case 0:\n            return null;\n        case 1:\n            return types[0] === 'nominal' ? NominalLegend : OrdinalLegend;\n        case 2:\n            if (types[0] === 'nominal') {\n                return types[1] === 'nominal' ? NominalByNominalLegend : OrdinalByNominalLegend;\n            } else {\n                return types[1] === 'ordinal' ? OrdinalByOrdinalLegend : OrdinalByNominalLegend;\n            }\n        default:\n            throw new Error(`Has ${fields.length} compares. Must be 0-2.`)\n    }\n};\n\nconst Legend = () => {\n    const colorPalette = useAppSelector(selectColorPalette);\n    const position = useAppSelector(selectLegendPosition);\n    const colorCodedFields = useAppSelector(selectColorCodedFields);\n    const LegendComponent = getLegendComponent(colorCodedFields);\n    if (!position || colorCodedFields.length === 0) {\n        return null;\n    }\n    return(\n        <div className={`legend ${position.corner}`}>\n            <LegendComponent colorPalette={colorPalette} fields={colorCodedFields} />\n        </div>\n    );\n}\n\nexport default Legend;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport {\n    AppBar, Collapse,\n    Divider, Drawer,\n    Hidden, IconButton,\n    List,\n    ListItemButton, ListItemIcon,\n    ListItemText, Toolbar, Typography\n} from \"@mui/material\";\nimport HomeIcon from \"@mui/icons-material/Home\";\nimport DataIcon from \"@mui/icons-material/Storage\";\nimport MenuIcon from \"@mui/icons-material/Menu\";\nimport LightModeIcon from \"@mui/icons-material/LightMode\";\nimport DarkModeIcon from \"@mui/icons-material/DarkMode\";\nimport ExpandLess from \"@mui/icons-material/ExpandLess\";\nimport ExpandMore from \"@mui/icons-material/ExpandMore\";\nimport './Nav.scss';\nimport ShareIcon from \"@mui/icons-material/Share\";\nimport {useAppSelector} from \"../app/hooks\";\nimport {selectPlotPresets} from \"./selectors\";\n\nconst SideMenuItem = ({text, icon, children=null}) => {\n    const [open, setOpen] = React.useState(false);\n    return (\n        <>\n            <ListItemButton onClick={() => setOpen(!open)}>\n                <ListItemIcon className='menu-item-icon'>{icon}</ListItemIcon>\n                <ListItemText primary={text} />\n                {children && (open ? <ExpandLess /> : <ExpandMore />)}\n            </ListItemButton>\n            {children && (\n                <Collapse in={open} timeout=\"auto\" unmountOnExit className='nested-menu'>\n                    {children}\n                </Collapse>\n            )}\n        </>\n    );\n};\n\nconst Nav = ({darkMode, ShareDialog, children=null}) => {\n    const plotPresets = useAppSelector(selectPlotPresets);\n    const [shareOpen, setShareOpen] = React.useState(false);\n    const [drawerOpen, setDrawerOpen] = React.useState(false);\n    const drawer = (\n        <div className='side-menu'>\n            <Divider />\n            <List>\n                <a href='/'>\n                    <SideMenuItem text='Statistpedia' icon={<HomeIcon />} />\n                </a>\n                {/*<SideMenuItem text='Datasets' icon={<DataIcon />} />*/}\n                <SideMenuItem text='Presets' icon={<DataIcon />}>\n                    <List>\n                        { plotPresets.map((p) => (\n                            <Link to={'/' + p.url} key={p.title}>\n                                <ListItemButton>\n                                    <ListItemText>{p.title}</ListItemText>\n                                </ListItemButton>\n                            </Link>\n                        ))}\n                    </List>\n                </SideMenuItem>\n            </List>\n            <Divider />\n        </div>\n    );\n    return (\n        <>\n            <nav>\n                <Hidden xlUp>\n                    <Drawer\n                        variant=\"temporary\"\n                        open={drawerOpen}\n                        onClose={() => setDrawerOpen(false)}\n                        ModalProps={{\n                            keepMounted: true, // Better open performance on mobile.\n                        }}\n                    >\n                        {drawer}\n                    </Drawer>\n                </Hidden>\n                <Hidden xlDown>\n                    <Drawer\n                        variant=\"permanent\"\n                        open\n                    >\n                        {drawer}\n                    </Drawer>\n                </Hidden>\n            </nav>\n            <AppBar className='top-bar'\n                    position=\"static\"\n                    elevation={darkMode.value ? 0 : 1}>\n                <Toolbar variant=\"dense\">\n                    <IconButton edge=\"start\"\n                                sx={{\n                                    marginRight: '0.5em',\n                                    display: { xs: 'inline-flex', xl: 'none' }\n                                }}\n                                onClick={() => setDrawerOpen(!drawerOpen)}\n                                color=\"inherit\"\n                                aria-label=\"menu\">\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography\n                        id='site-title'\n                        variant=\"h1\"\n                        sx={{\n                            display: ['none', 'block']\n                        }}\n                    >\n                        <Link to='/' style={{\n                            color: 'inherit',\n                            textDecoration: 'none'\n                        }}>\n                            Statistipedia <sub><small><i>EXPLORE</i></small></sub>\n                        </Link>\n                    </Typography>\n                    <Typography\n                        id='site-title'\n                        variant=\"h1\"\n                        sx={{\n                            display: ['block', 'none']\n                        }}\n                    >\n                        <Link to='/' style={{\n                            color: 'inherit',\n                            textDecoration: 'none'\n                        }}>\n                            S<sub><small><i>E</i></small></sub>\n                        </Link>\n                    </Typography>\n                    <div className=\"grow\" />\n                    {children}\n                    <IconButton className='menu-btn'\n                                onClick={() => setShareOpen(true)}\n                                color=\"inherit\">\n                        <ShareIcon />\n                    </IconButton>\n                    <IconButton edge=\"end\"\n                                className='menu-btn'\n                                onClick={darkMode.toggle}\n                                color=\"inherit\">\n                        {darkMode.value ? <LightModeIcon /> : <DarkModeIcon />}\n                    </IconButton>\n                    {shareOpen && <ShareDialog isOpen={shareOpen} setOpen={setShareOpen} />}\n                </Toolbar>\n            </AppBar>\n\n        </>\n    );\n};\n\nexport default Nav;\n","var _style, _g, _path, _circle, _path2, _circle2, _path3, _circle3, _path4, _circle4;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgLogo(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"svg8\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    x: 0,\n    y: 0,\n    viewBox: \"0 0 3492.7 3492.7\",\n    style: {\n      enableBackground: \"new 0 0 3492.7 3492.7\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _style || (_style = /*#__PURE__*/React.createElement(\"style\", null, \".st0{fill:#fad214}.st1{fill:none;stroke:#000;stroke-width:72;stroke-miterlimit:10}\")), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"layer1\",\n    transform: \"translate(0 935.16)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    id: \"rect815\",\n    className: \"st0\",\n    d: \"M50.6 703 1638.1-884.5c59.8-59.8 156.7-59.8 216.5 0L3442.1 703c59.8 59.8 59.8 156.7 0 216.5L1854.6 2506.9c-59.8 59.8-156.7 59.8-216.5 0L50.6 919.5c-59.7-59.8-59.7-156.7 0-216.5z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"rect9557\",\n    d: \"M86.7 739.1 1674.2-848.4c39.9-39.9 104.5-39.9 144.3 0L3406 739.1c39.9 39.9 39.9 104.5 0 144.3L1818.5 2470.9c-39.9 39.9-104.5 39.9-144.3 0L86.7 883.4c-39.8-39.9-39.8-104.5 0-144.3z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"rect9559\",\n    className: \"st0\",\n    d: \"M134.8 787.2 1722.3-800.3c13.3-13.3 34.8-13.3 48.1 0L3357.9 787.2c13.3 13.3 13.3 34.8 0 48.1L1770.4 2422.8c-13.3 13.3-34.8 13.3-48.1 0L134.8 835.3c-13.3-13.3-13.3-34.9 0-48.1z\"\n  }))), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M910.4 1666.4h320v689.1h-320zm453.1-187h320v876.1h-320zm445.8 376.1h320v500h-320zm453-451.9h320v951.9h-320z\"\n  })), _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 1070.4,\n    cy: 1295,\n    r: 80\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st1\",\n    d: \"m1067.3 1300.5 447.8-252.2\"\n  })), _circle2 || (_circle2 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 1520.5,\n    cy: 1065.5,\n    r: 80\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st1\",\n    d: \"m1523.5 1054.5 423.6 325.2\"\n  })), _circle3 || (_circle3 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 1947.1,\n    cy: 1356.7,\n    r: 80\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    className: \"st1\",\n    d: \"m1947.1 1378.7 475.2-323.2\"\n  })), _circle4 || (_circle4 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 2422.3,\n    cy: 1060.5,\n    r: 80\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgLogo);\nexport default __webpack_public_path__ + \"static/media/logo.f1b06215e30a508523e86ea7b7957da4.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\nimport {Provider} from 'react-redux';\nimport {HashRouter, Link, Route, Routes} from \"react-router-dom\";\nimport useDarkMode from 'use-dark-mode';\nimport {store} from '../app/store';\nimport {\n    Box,\n    Button,\n    Card,\n    CircularProgress,\n    CssBaseline,\n    IconButton,\n    ThemeProvider,\n    useMediaQuery\n} from '@mui/material';\nimport {createTheme} from '@mui/material/styles';\nimport BubblePlot from \"./BubblePlot\";\nimport {ParentSize} from \"@visx/responsive\";\nimport './Dashboard.scss';\nimport PhotoCameraIcon from '@mui/icons-material/PhotoCamera';\nimport {AxisLabelSource} from \"./config\";\nimport {setUseWhatChange, useWhatChanged} from '@simbathesailor/use-what-changed';\nimport MapPlot from \"./MapPlot\";\nimport LinePlot from \"./LinePlot\";\nimport BarPlot from \"./BarPlot\";\nimport {BasicShareDialog, ImageDialog, SharePlotDialog} from \"./sharing\";\nimport YearSlider from \"../features/year/YearSlider\";\nimport {useAppSelector} from \"../app/hooks\";\nimport {selectPlotType} from \"../features/plotType/plotTypeSlice\";\nimport Controls from \"../features/controls/Controls\";\nimport DataManager from \"../features/data/DataManager\";\nimport Url from './Url';\nimport {\n    isLoaded,\n    selectComparesEnabled,\n    selectControlFields,\n    selectFeatureRanges, selectPlotData,\n    selectPlotOrientation,\n    selectPlotPresets\n} from \"./selectors\";\nimport {allValuesNotNull} from \"./utils/misc\";\nimport Legend from \"./Legend\";\nimport Nav from \"./Nav\";\nimport LogoIcon from \"./icons/logo.svg\";\n\nsetUseWhatChange(process.env.NODE_ENV === 'development');\nrequire('typeface-roboto');\n\nconst LoadingPlot = ({width, height}) => (\n    <div className='loading-plot' style={{width, height}}>\n        <CircularProgress variant='indeterminate'\n                          size={Math.min(Math.round(width / 7), 80)} />\n    </div>\n);\n\nconst PlotArea = ({plotType,\n                   axisLabels, xAxisLabel=null, yAxisLabel=null,\n                   disableInteraction = false, showLabel, levelVar}) => {\n    const orientation = useAppSelector(selectPlotOrientation);\n    const DumbPlotArea = ({width, height}) => {\n        const data = useAppSelector(selectPlotData);\n        const featureRanges = useAppSelector(selectFeatureRanges);\n        const props = {\n            data,\n            featureRanges,\n            showLabel,\n            disableInteraction,\n            width,\n            height\n        };\n        switch (plotType.name) {\n            case 'bubble': return <BubblePlot {...props} />;\n            case 'line': return <LinePlot {...props}  />;\n            case 'bar': return <BarPlot {...props}  />;\n            default: return <MapPlot {...props} />;\n        }\n    }\n    const loading = !useAppSelector(isLoaded);\n    return (\n        <ParentSize debounceTime={10} className='bg'>\n            {({ width, height }) => {\n                return (width + height) > 0 && (\n                    <div className='plot' style={{width, height}}>\n                        {loading ?\n                        <LoadingPlot width={width} height={height} /> :\n                        <DumbPlotArea width={width} height={height} /> }\n                        {axisLabels && !plotType.hideAxisLabels && (\n                            <>\n                                <div className='x-axis'>\n                                    {orientation === 'vertical' ? xAxisLabel || levelVar : yAxisLabel}\n                                </div>\n                                <div className='y-axis' style={{width: height}}>\n                                    {orientation === 'vertical' ? yAxisLabel : xAxisLabel || levelVar}\n                                </div>\n                            </>\n                        )}\n                        {plotType.name !== 'map' && <Legend />}\n                    </div>\n                )\n            }}\n        </ParentSize>\n    );\n};\n\ntype DumbDashboardProps = {\n    darkMode: any\n    plotType: any\n    controls: any\n}\n\nconst DumbDashboard = ({darkMode, plotType, controls}: DumbDashboardProps) => {\n    const [showLabel, setShowLabel] = React.useState(null);\n    const comparesEnabled = useAppSelector(selectComparesEnabled);\n\n    const computeXAxisLabel = () : string => {\n        switch (plotType.xAxisLabelSource) {\n            case AxisLabelSource.VAR: return controls.x.name;\n            case AxisLabelSource.COMPARE: \n                return comparesEnabled ? controls.compare.map(c => c.name).join('/') : null;\n            case AxisLabelSource.YEAR: return 'Year'\n            default: return null;\n        }\n    };\n\n    const xAxisLabel = computeXAxisLabel();\n    const yAxisLabel = controls.y?.name;\n\n    const Plot = ({axisLabels, showLabel = null, disableInteraction = false}) => {\n        return (\n            <PlotArea plotType={plotType}\n                      axisLabels={axisLabels}\n                      disableInteraction={disableInteraction}\n                      showLabel={showLabel}\n                      xAxisLabel={xAxisLabel}\n                      yAxisLabel={yAxisLabel}\n                      levelVar={controls.level.name}\n            />\n        );\n    };\n\n    const DashboardNav = () => {\n        const [genImgOpen, setGenImgOpen] = React.useState(false);\n        return (\n            <>\n                <Nav darkMode={darkMode} ShareDialog={\n                    ({isOpen, setOpen}) => <SharePlotDialog\n                        compares={controls.compare}\n                        xAxisLabel={xAxisLabel}\n                        yAxisLabel={yAxisLabel}\n                        isOpen={isOpen}\n                        setOpen={setOpen} />\n                }>\n                    <IconButton className='menu-btn'\n                                onClick={() => setGenImgOpen(true)}\n                                color=\"inherit\">\n                        <PhotoCameraIcon />\n                    </IconButton>\n                </Nav>\n                {genImgOpen && <ImageDialog\n                  isOpen={genImgOpen}\n                  setOpen={setGenImgOpen}\n                  label={showLabel}\n                  setLabel={setShowLabel}\n                  compares={controls.compare}\n                  xAxisLabel={xAxisLabel}\n                  yAxisLabel={yAxisLabel}\n                  showAxisLabels={!plotType.hideAxisLabels}\n                  pageInDarkMode={darkMode.value}\n                  plot={<Plot axisLabels={false}\n                              disableInteraction={true}\n                              showLabel={showLabel} />} />}\n            </>\n        );\n    }\n    // useWhatChanged([plotType, controls]);\n\n    return (\n        <>\n            <DashboardNav />\n            <div id=\"dashboard\">\n                <main>\n                    <div className='plot-area'>\n                        <Card className='section'>\n                            <div id='inner-plot-container'>\n                                <Plot axisLabels={true} />\n                            </div>\n                        </Card>\n                    </div>\n                    <YearSlider />\n                </main>\n                <aside>\n                    <Controls />\n                </aside>\n            </div>\n        </>\n    );\n};\n\nconst Dashboard = ({darkMode}) => {\n    const plotType = useAppSelector(selectPlotType);\n    const controls = useAppSelector(selectControlFields);\n    const controlsIsReady = allValuesNotNull(controls);\n    return (\n        <>\n            {\n                controlsIsReady && plotType &&\n                <DumbDashboard darkMode={darkMode}\n                               plotType={plotType}\n                               controls={controls} />\n            }\n            <Url />\n            <DataManager />\n        </>\n    );\n};\n\nconst ExternalLink = ({to, style={}, children}) => (\n    <a href={to}\n          target='_blank'\n          rel='noreferrer'\n          className='external'\n          style={style}\n    >\n        {children}\n    </a>\n);\n\nconst SiteScreenshot = ({file}: {file: string}) => (\n    <a href={'/explore/img/' + file} className='screenshot' target='screenshot'>\n        <img src={'/explore/img/' + file} width='100%' alt='screenshot' />\n    </a>\n);\n\nconst DumbHome = ({darkMode, plotPresets}) => (\n    <>\n        <Nav darkMode={darkMode} ShareDialog={BasicShareDialog} />\n        <div id='home'>\n            <main>\n                <Card className='section'>\n                    <img className='logo' src={LogoIcon} alt='Statistipedia logo' />\n                    <h2>Welcome to Statistipedia <i>Explore!</i></h2>\n                    <p>\n                        This is an interactive dashboard.\n                    </p>\n                    <p style={{textAlign: 'center', margin: '1.5em 0'}}>\n                        <Link to='plot' className='btn'>\n                            <Button variant=\"contained\">Enter dashboard here</Button>\n                        </Link>\n                    </p>\n                    <p>Or you can try these presets:</p>\n                    <table id='presets-table'>\n                        <tbody>\n                        <tr>\n                            <th>Area</th>\n                            <th>Description</th>\n                        </tr>\n                        { plotPresets.map((p) => (\n                            <tr key={p.title}>\n                                <td>\n                                    <ExternalLink to={p.area.link}\n                                          style={{whiteSpace: 'nowrap'}}>\n                                        {p.area.name}\n                                    </ExternalLink>\n                                </td>\n                                <td>\n                                    <Link to={'/' + p.url}>{p.title}</Link>\n                                </td>\n                            </tr>\n                        ))}\n                        </tbody>\n                    </table>\n                </Card>\n            </main>\n            <aside>\n                <SiteScreenshot file='screenshot1.png' />\n                <SiteScreenshot file='screenshot3.png' />\n                <SiteScreenshot file='screenshot2.png' />\n                <SiteScreenshot file='screenshot4.png' />\n            </aside>\n        </div>\n    </>\n);\n\nconst Home = ({darkMode}) => {\n    const plotPresets = useAppSelector(selectPlotPresets);\n    return <DumbHome darkMode={darkMode} plotPresets={plotPresets} />;\n};\n\nconst About = ({darkMode}) => (\n    <>\n        <Nav darkMode={darkMode} ShareDialog={BasicShareDialog} />\n        <div id='about'>\n            Sun God Ra\n        </div>\n    </>\n);\n\nconst DashboardApp = () => {\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n    const darkMode = useDarkMode(prefersDarkMode);\n    const theme = React.useMemo(\n        () =>\n            createTheme({\n                palette: {\n                    mode: darkMode.value ? 'dark' : 'light',\n                    primary: {\n                        main: darkMode.value ? '#175391' : '#2278CF'\n                    }\n                },\n                breakpoints: {\n                    values: {\n                        xs: 1,\n                        sm: 400,\n                        md: 640,\n                        lg: 960,\n                        xl: 1080,\n                    },\n                }\n            }),\n        [darkMode],\n    );\n    return (\n        <Provider store={store}>\n            <ThemeProvider theme={theme}>\n                <CssBaseline />\n                <Box sx={{\n                    boxSizing: 'border-box',\n                    width: '100%',\n                    height: '100%',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    paddingLeft: { xs: 0, xl: '270px' }\n                }}>\n                    <HashRouter>\n                        <Routes>\n                            <Route path=\"\" element={<Home darkMode={darkMode} />}/>\n                            <Route path=\"about\" element={<About darkMode={darkMode} />}/>\n                            <Route path=\"plot\" element={<Dashboard darkMode={darkMode} />}/>\n                        </Routes>\n                    </HashRouter>\n                </Box>\n            </ThemeProvider>\n        </Provider>\n    );\n};\n\nexport default DashboardApp;\n"],"names":["AxisLabelSource","yearSlice","createSlice","name","initialState","value","status","reducers","setYear","state","action","payload","actions","selectYear","year","LegendCorner","PLOT_TYPES","xAxisLabelSource","VAR","fields","x","y","z","YEAR","COMPARE","hideAxisLabels","PLOT_TYPES_MAP","zipObj","map","p","SHARE_SIZES","width","height","SHARE_SIZE_MAP","formatNum","minDigits","maxDigits","num","options","maximumFractionDigits","minimumFractionDigits","Number","toLocaleString","undefined","justAddCommas","curry","removeDecimals","oneDecimalPlace","dollarsAndCents","FIELD_TYPE_FORMAT_VALUES_MAP","_","Error","Math","abs","FIELD_CFGS","formatType","group","colorType","orientation","COMPARE_BY_FIELD_CFGS","PLOT_PRESETS","title","params","area","level","compare","plot","ANIMATION_DURATION","plotTypeSlice","setPlotType","selectPlotType","plotType","augmentField","cfg","f","id","processData","data","newData","areas","byId","a","link","allIds","Object","keys","levels","compareByFields","masterData","values","topologies","byAreaAndLevel","dataSlice","setData","clearDataValues","selectAreas","selectFields","selectCompareByFields","selectLevels","selectValues","selectAllCompareByFieldDetails","createSelector","selectFeatureFields","type","defaultFields","loaded","controlsSlice","setControls","newValue","equals","setLoaded","selectControlsLoaded","controls","store","configureStore","reducer","dataReducer","yearReducer","plotTypeReducer","controlsReducer","elementRef","onClick","useEffect","clickListener","event","current","contains","target","document","addEventListener","removeEventListener","withBoundingRects","initialLeft","left","initialTop","top","offsetLeft","offsetTop","rect","parentRect","children","getRects","style","otherProps","transform","useAppDispatch","useDispatch","useAppSelector","useSelector","bind","xs","flatMap","as","concat","reduceRight","allValuesNotNull","obj","every","firstAndLast","length","nestedFirstAndLast","average","array","reduce","b","sum","DEFAULT_COLOR","h","s","v","HUE_PRESETS","SAT_RANGE","autoScaleColorNominal","c","nFieldValues","index","isPrioritized","n","i","autoHueScale","sStart","sStep","vStep","COMPARE_BY_COLOR_FNS","autoSatScale","COLOR_PRIORITIES","componentToHex","hex","toString","hsvToHex","r","g","h1","floor","q","t","round","hsvToRgb","rgbToHex","DEFAULT_COLOR_HEX","createKey","cbfs","k1","sk","k2","fieldToIndexMap","cbf","field","sortKeys","getColorFromPalette","colorCodedFields","ks","getShortLabels","shortName","getFullLabels","fullName","iterateOverCompareGrid","fn","cbf1","cbf2","v1","v2","_path","_path2","setupColorPalette","kahcs","hashMap","forEach","kahc","color","addColorToPalette","keySets","getColor","getColorGrid","labels","rows","cols","fullNames","colors","byRowAndCol","compose","scbfs","switchToAlwaysMakeLegendHorizontal","getColorForItem","priorities","lowPriority","max","highPriority","min","hsv","accum","cbfi","fieldValue","fieldValues","vi","findIndex","processItemValues","vs","controlFields","divisions","createName","cs","div","geoid","divName","abbrev","areaName","mediumName","join","filter","_findClearestCorner","right","y_mean","forceCorner","topLeft","topRight","bottomLeft","bottomRight","minimum","NW","corner","closestDataPoint","NE","SW","SE","chooseLegendPosition","featureRanges","_splitHalfs","pred","c1","c2","c14","c34","d","sortedData","sort","scaledY","selectControlFieldIds","cv","nfs","selectControlFields","mapObjIndexed","k","selectPlotEnabledFields","selectPlotEnabledFieldIds","efs","ids","ef","selectPlotEnabledFieldDetails","selectComparesEnabled","cfs","allowCompares","selectCurrentCompareDetails","cb","selectColoredFeatureFields","Set","selectColorCodedFields","coloredFeatures","compares","comparesEnabled","selectColorPalette","isAccumDefault","newColors","existing","cbfv","createColorPalette","selectCurrentDivisions","byLevel","dvsByLevel","selectTopologies","tbaal","cvs","selectArea","summaryDataForAllYears","ds","cf","ccf","avs","individualDataForAllYears","individualDataIgnoringComparesForAllYears","selectPlotDataForAllYears","cse","selectPlotData","individualData","individualDataIgnoringCompares","summaryData","selectFeatureRanges","fvs","selectPlotOrientation","selectLegendPosition","force","selectAvailableYears","some","selectPlotPresets","url","queryString","arrayFormat","isLoaded","DEFAULT_OPTIONS","selectedOpacity","unselectedOpacity","defaultOpacity","animate","groupByKeys","keyFields","items","im","groupBy","item","tail","lookupItem","itemMap","results","lookupKeys","matchesAllKeys","keysToMatch","itemKeys","all","range","TooltipContent","FormattedValue","formatValue","className","backgroundColor","showLabel","disableInteraction","nKeyFields","React","selectedKeys","selectKeys","useTooltip","tooltipOpen","tooltipLeft","tooltipTop","tooltipData","showTooltip","hideTooltip","select","scaledX","deselect","getKeys","key1","last","Tooltip","ref","useTouchOutside","defaultTooltipStyles","fontSize","padding","margin","makeSelectable","keyValues","useSpring","animOpacity","setAnim","isSelected","opacity","animated","fillOpacity","to","strokeOpacity","props","key","makeInteractive","callback","resolvedKeyValues","Function","onTouchStart","onMouseMove","onMouseLeave","makeSelectableAndInteractive","concreteKeys","xScale","scaleLinear","domain","yScale","sizeScale","scalePower","exponent","anyNull","size","useSelect","animFn","animX","animY","animSize","config","duration","useSprings","springs","start","cx","cy","fill","stroke","projection","geoAlbersUsa","usMapOffset","opacityOptions","DumbMapPlot","scale","topoFeature","topojson","objects","featColl","features","colorScale","hcl","interpolate","interpolateHcl","path","geoPath","translate","bounds","tempItems","geoCentroid","animColor","AlbersUsa","feature","strokeWidth","lineOptions","pointOptions","hPadding","vPadding","lines","lineKeys","circleSize","voronoiInstance","voronoi","findNearest","line","point","localPoint","find","LinePath","GlyphCircle","getHeightAdjustment","startAtZero","pctOfLowest","HorizontalBarPlot","scaleBand","scaledHeight","animHeight","bandwidth","VerticalBarPlot","heightAdjustment","setSearchPart","parts","window","location","hash","split","replace","BaseDialog","isOpen","setOpen","fullScreen","alreadyOpen","setAlreadyOpen","search","useLocation","includes","Dialog","open","onClose","history","back","keepMounted","createPlotTitle","xAxisLabel","yAxisLabel","toLowerCase","DumbImageDialog","pageInDarkMode","label","setLabel","showAxisLabels","plotTitle","defaultShareSize","sharePresetSize","setSharePresetSize","previewSize","setPreviewSize","shareSize","setShareSize","format","setFormat","imgData","setImgData","theme","useTheme","useMediaQuery","breakpoints","down","darkModeState","setDarkModeState","darkModeRef","ImagePreview","darkMode","useDarkMode","classNameDark","classNameLight","storageKey","enable","disable","GenerateDialog","setNewSize","newSize","ratio","w","calculatePreviewSize","DialogContent","FormGroup","row","FormControl","InputLabel","variant","htmlFor","NativeSelect","onChange","getElementsByClassName","scrollTo","TextField","helperText","DialogActions","Button","el","getElementById","htmlToImage","getGenerateFn","canvasWidth","canvasHeight","pixelRatio","clientWidth","clientHeight","then","dataUrl","DownloadDialog","href","download","alt","src","PinterestShareButton","media","PinterestIcon","ImageDialog","BasicShareDialog","FacebookShareButton","quote","FacebookIcon","TwitterShareButton","TwitterIcon","RedditShareButton","RedditIcon","LinkedinShareButton","LinkedinIcon","display","CopyToClipboard","onCopy","text","IconButton","FileCopyOutlined","SharePlotDialog","PrettoSlider","styled","Slider","border","boxShadow","lineHeight","background","borderRadius","transformOrigin","PlayButton","timer","advanceYear","years","yearsRemaining","setTimeout","setState","running","startSlideshow","clearTimeout","this","disabled","dispatch","marks","Box","sx","flex","step","valueLabelDisplay","paddingTop","_extends","assign","arguments","source","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgCompare","_ref","svgRef","titleId","xmlns","viewBox","fillRule","strokeLinecap","strokeLinejoin","strokeMiterlimit","ForwardRef","makeIcon","iconSrc","SvgIcon","component","FIELD_TYPE_ICONS_MAP","PlaceIcon","CompareIconSrc","TimelapseIcon","PaidIcon","AccessTimeFilledIcon","CalendarMonthIcon","BallotIcon","DoDisturbIcon","TagIcon","PLOT_TYPE_ICONS_MAP","BubbleChartIcon","TimelineIcon","BarChartIcon","RoomIcon","ToggleButtonGroup","exclusive","pt","Icon","ToggleButton","groupFields","gs","DrawerFieldSelect","body","position","Drawer","anchor","PaperProps","ModalProps","MenuFieldSelect","anchorEl","setAnchorEl","Menu","MenuListProps","role","FieldSelect","BaseFieldSelect","currentTarget","ArrowDropDown","Input","Divider","MenuItem","selected","ListItemIcon","ListItemText","primary","secondary","description","controlsIsReady","featureFields","fieldGroups","compareByGroups","used","disableUsedCompares","updateState","newState","updateCompare","newNewState","CompareByFieldSelect","toUpperCase","BasicSelect","e","slice","Cached","compareFields","enabledFields","controlsLoaded","_computeChunks","sortCompares","valueChunks","computeValueChunk","uniqueValueChunks","uniqBy","isValueChunk","groupByFn","compareValues","mergeFeatures","featureSet","allKeys","nonFeatureSet","difference","output","featureValue","onChunksFetched","valueData","processValues","otherData","arr","flatObject","property","flattenArrayOfObjects","getState","Promise","axios","responses","fcs","require","storedYear","storedPlotType","updateUrl","allParams","newS","stringify","parse","nonNullControls","parseInt","configUpdated","bgAlphaHex","OrdinalStrip","fromColor","toColor","backgroundImage","OrdinalLabels","end","OrdinalLegend","colorPalette","NominalLegend","OrdinalByNominalLegend","colorRow","NominalByNominalLegend","cellPadding","cellSpacing","col","colorCell","disableFocusListener","OrdinalByOrdinalLegend","ls","WebkitMask","mask","bottom","LegendComponent","types","getLegendComponent","SideMenuItem","icon","ListItemButton","ExpandLess","ExpandMore","Collapse","in","timeout","unmountOnExit","ShareDialog","plotPresets","shareOpen","setShareOpen","drawerOpen","setDrawerOpen","drawer","List","Home","Hidden","xlUp","xlDown","AppBar","elevation","Toolbar","edge","marginRight","xl","Typography","textDecoration","Share","toggle","LightMode","DarkMode","setUseWhatChange","process","LoadingPlot","CircularProgress","PlotArea","axisLabels","levelVar","DumbPlotArea","loading","ParentSize","debounceTime","DumbDashboard","setShowLabel","computeXAxisLabel","Plot","DashboardNav","genImgOpen","setGenImgOpen","PhotoCamera","Card","Dashboard","ExternalLink","rel","SiteScreenshot","file","DumbHome","LogoIcon","textAlign","whiteSpace","About","prefersDarkMode","createTheme","palette","mode","main","sm","md","lg","ThemeProvider","CssBaseline","boxSizing","flexDirection","paddingLeft","element"],"sourceRoot":""}