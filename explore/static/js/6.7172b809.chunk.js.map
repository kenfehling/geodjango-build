{"version":3,"sources":["dashboard/config.ts","dashboard/utils/misc.ts","dashboard/utils/domain.ts","features/data/dataSlice.ts","features/year/yearSlice.ts","features/plotType/plotTypeSlice.ts","features/controls/controlsSlice.ts","app/store.ts","hooks/useTouchOutside.ts","dashboard/CustomTooltipWithBounds.tsx","app/hooks.ts","dashboard/selectors.ts","hooks/useSelect.tsx","dashboard/BubblePlot.tsx","dashboard/MapPlot.tsx","dashboard/LinePlot.tsx","dashboard/BarPlot.tsx","dashboard/sharing.tsx","features/year/YearSlider.tsx","features/plotType/PlotTypeSelect.tsx","features/controls/Controls.tsx","dashboard/utils/dataSplitting.ts","features/data/DataManager.tsx","dashboard/Url.tsx","dashboard/Dashboard.tsx","utils.ts"],"names":["AxisLabelSource","FieldType","PLOT_TYPES","name","icon","BubbleChartIcon","xAxisLabelSource","VAR","fields","x","y","z","TimelineIcon","YEAR","BarChartIcon","COMPARE","RoomIcon","hideAxisLabels","PLOT_TYPES_MAP","zipObj","map","p","SHARE_SIZES","width","height","SHARE_SIZE_MAP","f","fieldCfgs","type","CURRENCY","NUMERIC","bind","xs","flatMap","as","a","concat","reduceRight","mergeDeepWithConcat","mergeDeepWith","Array","isArray","getNestedValues","obj","level","vals","Object","values","v","invertNestedObject","entries","reduce","acc","innerKey","forEach","outerKey","val","prepareData","dataByYear","year","dataArray","outerKeys","keys","length","arrayLength","all","k","Error","r","range","innerKeys","i","invertMapOfMaps","toPairs","getNumericFields","data","filter","allValuesNotNull","every","augmentField","id","dataSlice","createSlice","initialState","value","levels","areas","years","byLevelAndField","divisions","byLevel","byFieldAndDivision","status","reducers","setData","state","action","processData","payload","actions","selectData","selectAreas","selectNumericFields","yearSlice","setYear","extraReducers","last","selectYear","plotTypeSlice","setPlotType","selectPlotType","plotType","urlParams","getUrlParams","area","compare","controlsSlice","setControl","key","setControls","numericFields","selectControlValues","controls","selectXyzControlValues","createSelector","cv","selectNonNullXyzControlArray","store","configureStore","reducer","dataReducer","yearReducer","plotTypeReducer","controlsReducer","useTouchOutside","elementRef","onClick","useEffect","clickListener","event","current","contains","target","document","addEventListener","removeEventListener","withBoundingRects","initialLeft","left","initialTop","top","offsetLeft","offsetTop","rect","parentRect","children","getRects","style","otherProps","transform","useAppDispatch","useDispatch","useAppSelector","useSelector","selectControlFields","mapObjIndexed","selectCurrentDivisions","dvsByLevel","selectYears","yblaf","cvs","xyz","intersection","tail","processDatasetItem","vbfad","field","selectCurrentDataset","byField","byYear","DEFAULT_OPTIONS","selectedOpacity","unselectedOpacity","defaultOpacity","groupByKeys","keyFields","items","im","groupBy","item","curry","lookupItem","itemMap","results","lookupKeys","matchesAllKeys","keysToMatch","itemKeys","n","Math","min","formatValue","Number","toLocaleString","TooltipContent","className","useSelect","showLabel","disableInteraction","nKeyFields","React","useState","selectedKeys","selectKeys","useTooltip","tooltipOpen","tooltipLeft","tooltipTop","tooltipData","showTooltip","hideTooltip","select","useCallback","scaledX","scaledY","deselect","getKeys","key1","Tooltip","memo","ref","useRef","defaultTooltipStyles","fontSize","padding","margin","makeSelectable","keyValues","c","options","useSpring","animOpacity","setAnim","isSelected","opacity","animate","g","fillOpacity","to","strokeOpacity","join","cloneElement","props","makeInteractive","callback","resolvedKeyValues","Function","onTouchStart","onMouseMove","onMouseLeave","makeSelectableAndInteractive","concreteKeys","DumbBubblePlot","scaleFactor","xScale","scaleLinear","domain","extent","round","yScale","sizeScale","size","animX","animY","animSize","circle","cx","cy","fill","stroke","BubblePlot","unitedStates","topojson","topology","objects","states","features","projection","geoAlbersUsa","opacityOptions","DumbMapPlot","centerX","centerY","scale","colorScale","hcl","interpolate","interpolateHcl","slice","color","includeIds","d","ifs","includes","geoCentroid","AlbersUsa","translate","feature","path","animColor","strokeWidth","MapPlot","lineOptions","pointOptions","DumbLinePlot","useMemo","ds","yvs","a2","convertData","lines","lineKeys","max","circleSize","voronoiInstance","voronoi","findNearest","line","point","localPoint","find","LinePath","GlyphCircle","LinePlot","DumbBarPlot","hPadding","vPadding","tempItems","scaleBand","bandwidth","BarPlot","ShareTransition","forwardRef","Collapse","timeout","BaseDialog","setOpen","fullScreen","Dialog","open","onClose","TransitionComponent","keepMounted","createPlotTitle","compareByVar","xAxisLabel","yAxisLabel","toLowerCase","DumbImageDialog","plot","label","setLabel","showAxisLabels","theme","useTheme","useMediaQuery","breakpoints","down","plotTitle","defaultShareSize","sharePresetSize","setSharePresetSize","previewSize","setPreviewSize","shareSize","setShareSize","format","setFormat","imgData","setImgData","GenerateDialog","setNewSize","newSize","ratio","h1","w","calculatePreviewSize","DialogContent","FormControl","InputLabel","variant","htmlFor","NativeSelect","onChange","getElementsByClassName","scrollTo","s","FormGroup","row","TextField","helperText","FormControlLabel","control","Switch","DialogActions","Button","el","getElementById","htmlToImage","getGenerateFn","canvasWidth","canvasHeight","quality","pixelRatio","then","dataUrl","DownloadDialog","url","window","location","href","download","alt","src","PinterestShareButton","media","PinterestIcon","ImageDialog","ShareDialog","FacebookShareButton","quote","FacebookIcon","TwitterShareButton","title","TwitterIcon","RedditShareButton","RedditIcon","LinkedinShareButton","LinkedinIcon","display","onCopy","text","IconButton","PrettoSlider","styled","Slider","border","backgroundColor","boxShadow","lineHeight","background","borderRadius","transformOrigin","YearSlider","dispatch","Box","sx","flex","defaultValue","step","disabled","valueLabelDisplay","paddingTop","PlotTypeSelect","ToggleButtonGroup","exclusive","pt","ToggleButton","Controls","controlsIsReady","updateState","newState","Autocomplete","getOptionLabel","option","renderInput","params","SplittingDataFetcher","config","_computeChunkUrls","paramsToChunkUrls","u","BASE_CHUNK_URL","_fetchChunks","urls","axios","get","spread","responses","onChunkFetch","fetchChunks","this","DataManager","chunk","Url","storedYear","useQueryParams","StringParam","createEnumParam","NumberParam","query","setQuery","nonNullControls","urlFields","pickBy","allParams","setUseWhatChange","process","require","LoadingPlot","CircularProgress","PlotArea","loading","axisLabels","showPlot","sizeVar","yAxisVar","ParentSize","debounceTime","SideMenuItem","ListItem","button","ListItemIcon","ListItemText","primary","in","unmountOnExit","DumbDashboard","prefersDarkMode","computeXAxisLabel","createTheme","palette","mode","main","sm","md","lg","xl","Plot","SideMenu","drawerOpen","setDrawerOpen","genImgOpen","setGenImgOpen","shareOpen","setShareOpen","setShowLabel","drawer","Divider","List","Hidden","lgUp","Drawer","ModalProps","lgDown","AppBar","position","elevation","Toolbar","edge","marginRight","spacing","Typography","ThemeProvider","CssBaseline","boxSizing","flexDirection","paddingLeft","Card","myHistory","push","history","pushState","replace","replaceState","Dashboard","DashboardApp","noThrow","from","zipmap","arr1","arr2","decodeURI","question","indexOf","hash","substring","result","split","part","eq","substr","decodeURIComponent","index"],"mappings":"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","file":"static/js/6.7172b809.chunk.js","sourcesContent":["import SvgIcon from \"@mui/material/SvgIcon/SvgIcon\";\nimport BubbleChartIcon from '@mui/icons-material/BubbleChart';\nimport TimelineIcon from '@mui/icons-material/Timeline';\nimport BarChartIcon from '@mui/icons-material/BarChart';\nimport RoomIcon from '@mui/icons-material/Room';\nimport {zipObj, range} from \"ramda\";\nimport {RouteComponentProps} from \"@reach/router\";\n\nexport enum AxisLabelSource {\n    VAR,\n    COMPARE,\n    YEAR\n}\n\nexport type PlotType = {\n    name: string,\n    icon: typeof SvgIcon,\n    xAxisLabelSource?: AxisLabelSource,\n    hideAxisLabels?: boolean,\n    fields: {\n        x?: string,\n        y?: string,\n        z?: string\n    }\n};\n\nexport const PLOT_TYPES: PlotType[] = [{\n    name: 'bubble',\n    icon: BubbleChartIcon,\n    xAxisLabelSource: AxisLabelSource.VAR,\n    fields: {\n        x: 'X-Axis',\n        y: 'Y-Axis',\n        z: 'Size'\n    }\n}, {\n    name: 'line',  // aka. time series chart\n    icon: TimelineIcon,\n    xAxisLabelSource: AxisLabelSource.YEAR,\n    fields: {\n        // X-Axis is always time. Existing selection is kept, only disabled\n        y: 'Y-Axis'\n    }\n}, {\n    name: 'bar',\n    icon: BarChartIcon,\n    xAxisLabelSource: AxisLabelSource.COMPARE,\n    fields: {\n        // compare: 'Compare by',  // Secondary grouping nested under \"Compare by\"\n        y: 'Y-Axis'\n    }\n}, {\n    name: 'map',\n    icon: RoomIcon,\n    hideAxisLabels: true,\n    fields: {\n        y: 'Color'\n    }\n}];\n\nexport const PLOT_TYPES_MAP: Map<string, PlotType> =\n    zipObj(PLOT_TYPES.map(p => p.name), PLOT_TYPES);\n\nexport type ShareSize = {\n  name: string,\n  width: number,\n  height: number\n};\n\nexport const SHARE_SIZES: ShareSize[] = [{\n    name: 'Instagram Square',\n    width: 1080,\n    height: 1080\n}, {\n    name: 'Twitter',\n    width: 1024,\n    height: 512\n}, {\n    name: 'Pinterest',\n    width: 800,\n    height: 1200\n}, {\n    name: 'Tumblr',\n    width: 1280,\n    height: 1920\n}];\n\nexport const SHARE_SIZE_MAP: Map<string, ShareSize> =\n    zipObj(SHARE_SIZES.map(p => p.name), SHARE_SIZES);\n\nexport type Area = {\n    id: string\n    abbrev: string\n    name: string\n}\n\nexport const AREAS: Area[] = [{\n    id: 'us',\n    abbrev: 'us',\n    name: 'United States'\n}];\n\nexport interface IDashboardProps extends RouteComponentProps {\n    area?: string;\n    compare?: string\n}\n\nexport enum FieldType {\n    NUMERIC,\n    CURRENCY\n}\n\nexport type DataFieldCfg = {\n    id: string,\n    type?: FieldType\n};\n\nexport type DataField = {\n    id: string,\n    name: string,\n    type?: FieldType\n};\n\nexport const fieldCfgs: {[id: string]: {type: FieldType}} = {\n    'median_price': {\n        type: FieldType.CURRENCY\n    },\n    'median_rent': {\n        type: FieldType.CURRENCY\n    },\n    'total_pop': {\n        type: FieldType.NUMERIC\n    }\n};\n\nexport type Data = {\n    areas: {[id: string]: { id: string, name: string }},\n    levels: {[id: string]: { id: string, name: string }},\n    fields: {[id: string]: DataField},\n    years: { byLevelAndField: {[levelId: string]: {[fieldId: string]: any[]}}}\n    divisions: { byLevel: {[levelId: string]: any[]} }\n    values: { byFieldAndDivision: {[fieldId: string]: any[]} }\n}\n\nexport const getOgImageUrl = (params: IDashboardProps) : string => {\n    return '';\n};\n","import {zipObj, mergeDeepWith, concat, intersection, reduce, tail, all, range, map} from 'ramda';\n\n// bind ::  [a] -> (a -> [b]) -> [b]\nconst bind = xs => f => xs.flatMap(f);\n\n// foldr :: (a -> b -> b) -> b -> [a] -> b\nconst foldr = f => a => xs =>\n    xs.reduceRight((a, x) => f(x)(a), a);\n\nexport const cartProdN = foldr(\n    xs => as =>\n        bind(as)(\n            x => bind(xs)(\n                a => [\n                    [a].concat(x)\n                ]\n            )\n        )\n)([\n    []\n]);\n\nexport type ObjWithId = {id: string};\n\nexport function normalize<T extends ObjWithId>(objArray: T[]) : { [key: string]: T } {\n    return zipObj(objArray.map(item => item.id), objArray);\n}\n\nexport const mergeDeepWithConcat = mergeDeepWith((x, y) => Array.isArray(x) ? concat(x, y) : y);\n\nexport const intersectAll = (xs) => reduce(intersection, xs[0], tail(xs));\n\nexport const getNestedValues = (obj: Object, level: number = 1) : any[] => {\n    const vals = Object.values(obj);\n    if (level > 1)\n        return vals.flatMap(v => getNestedValues(level - 1, v));\n    else\n        return vals.flatMap(v => Object.values(v));\n}\n\nexport const invertMapOfMaps = (\n    obj: {[key1: string]: {[key2: string]: any[]}}\n) : {[key2: string]: {[key1: string]: any[]}} => {\n    const outerKeys = Object.keys(obj);\n    if (outerKeys.length === 0)\n        return {}\n    const arrayLength = Object.values(obj[outerKeys[0]]).length;\n    if (!all(k => Object.values(obj[k]).length === arrayLength, outerKeys))\n        throw new Error(\"All arrays must be the same length.\");\n    const r = range(0, arrayLength);\n    const innerKeys = Object.keys(obj[outerKeys[0]]);\n    const vals = r.map(i => zipObj(outerKeys, outerKeys.map(k => obj[k][innerKeys[i]])));\n    return zipObj(innerKeys, vals);\n}\n\nexport const invertNestedObject = x => {\n    return x == null || Object.values(x)[0] == null ? null :\n        Object.entries(x).reduce((acc, [innerKey, obj]) => {\n            Object.entries(obj).forEach(([outerKey, val]) => {\n                acc[outerKey] = acc[outerKey] || {}; // grab the object already stored at the `outerKey` or create a new one.\n                acc[outerKey][innerKey] = val;\n            })\n            return acc;\n        }, {});\n};\n","import {Data, DataField, FieldType} from \"../config\";\nimport {invertMapOfMaps} from \"./misc\";\nimport {toPairs, map} from 'ramda';\n\nexport const prepareData = (dataByYear, year) => {\n    const dataArray = invertMapOfMaps(dataByYear[year]);\n    return toPairs(map(v => ({\n        ...v,\n        year\n    }), dataArray));\n};\n\nexport const getNumericFields = (data: Data) : DataField[] =>\n    data.fields ? Object.values(data.fields)\n        .filter(f =>\n            f.type === FieldType.NUMERIC ||\n            f.type === FieldType.CURRENCY\n        ) : null\n\nexport const allValuesNotNull = (obj: Object) : boolean =>\n    Object.values(obj).every(f => f != null);\n","import {\n    createAsyncThunk,\n    createSelector,\n    createSlice,\n    PayloadAction\n} from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport {getNumericFields} from \"../../dashboard/utils/domain\";\nimport {Data, DataField, fieldCfgs} from \"../../dashboard/config\";\nimport {mergeDeepWithConcat} from \"../../dashboard/utils/misc\";\nimport {map} from 'ramda';\n\n// export const incrementAsync = createAsyncThunk(\n//     'counter/fetchCount',\n//     async (amount: number) => {\n//         const response = await dataSplitter.fetchChunks()\n//         // The value we return becomes the `fulfilled` action payload\n//         return response.data;\n//     }\n// );\n\nexport interface DataState {\n    value: Data,\n    status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: DataState = {\n    value: {\n        levels: {},\n        areas: {},\n        fields: {},\n        years: {byLevelAndField: {}},\n        divisions: {byLevel: {}},\n        values: {byFieldAndDivision: {}}\n    },\n    status: 'idle',\n};\n\nconst augmentField = (f: DataField) : DataField =>\n    ({...f, ...fieldCfgs[f.id]});\n\nconst processData = (data: Data) : Data => {\n    if (data.fields) {\n        return {\n            ...data,\n            fields: map(augmentField, data.fields)\n        }\n    } else {\n        return data;\n    }\n};\n\nexport const dataSlice = createSlice({\n    name: 'data',\n    initialState,\n    // The `reducers` field lets us define reducers and generate associated actions\n    reducers: {\n        // Use the PayloadAction type to declare the contents of `action.payload`\n        setData: (state, action: PayloadAction<Data>) => {\n            const data = processData(action.payload);\n            state.value = mergeDeepWithConcat(state.value, data);\n        },\n    }\n});\n\nexport const { setData } = dataSlice.actions;\nexport const selectData = (state: RootState) => state.data.value;\nexport const selectAreas = (state: RootState) => state.data.value?.areas;\nexport const selectFields = (state: RootState) => state.data.value?.fields;\nexport const selectNumericFields = (state: RootState) => getNumericFields(state.data.value);\nexport const selectLevels = (state: RootState) => state.data.value?.levels;\nexport const selectYearsByLevelAndField = (state: RootState) =>\n    state.data.value?.years.byLevelAndField;\nexport const selectDivisionsByLevel = (state: RootState) =>\n    state.data.value?.divisions.byLevel;\nexport const selectValuesByFieldAndDivision = (state: RootState) =>\n    state.data.value?.values.byFieldAndDivision;\n\nexport default dataSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport {last} from 'ramda';\nimport { RootState } from '../../app/store';\nimport {dataSlice} from \"../data/dataSlice\";\nimport {Data} from \"../../dashboard/config\";\n\nexport interface YearState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: YearState = {\n  value: null,\n  status: 'idle',\n};\n\nexport const yearSlice = createSlice({\n  name: 'year',\n  initialState,\n  reducers: {\n    setYear: (state, action: PayloadAction<number>) => {\n      const value = action.payload;\n      if (value != null && value !== state.value) {\n          state.value = value;\n      }\n    }\n  },\n  extraReducers: {\n    // @ts-ignore\n    [dataSlice.actions.setData]: (state, action: PayloadAction<Data>) => {\n      const data = action.payload;\n      // TODO: I'd like to use the state but it's not set in the store yet.\n      // TODO: Also selectors cannot be run from reducers?\n      // TODO: That'd be the preferred way wouldn't it?\n      if (data.years) {\n        // TODO: We need to know what level and field it actually has\n        // TODO: which might pose a problem because we don't know that\n        // TODO: this reducer runs after the one in controlsSlice.\n        const level = \"state\";\n        const field = \"total_pop\";\n        state.value = last(data.years.byLevelAndField[level][field]);\n      }\n    }\n  }\n});\n\nexport const { setYear } = yearSlice.actions;\nexport const selectYear = (state: RootState) => state.year.value;\nexport default yearSlice.reducer;\n","import {PLOT_TYPES_MAP} from \"../../dashboard/config\";\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\n\nexport interface PlotTypeState {\n    value: string;\n    status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: PlotTypeState = {\n    value: 'bar',\n    status: 'idle',\n};\n\nexport const plotTypeSlice = createSlice({\n    name: 'plotType',\n    initialState,\n    // The `reducers` field lets us define reducers and generate associated actions\n    reducers: {\n        // Use the PayloadAction type to declare the contents of `action.payload`\n        setPlotType: (state, action: PayloadAction<string>) => {\n            const value = action.payload;\n            if (value != null && value !== '')\n                state.value = value;\n        },\n    }\n});\n\nexport const { setPlotType } = plotTypeSlice.actions;\nexport const selectPlotType = (state: RootState) => PLOT_TYPES_MAP[state.plotType.value];\nexport default plotTypeSlice.reducer;\n","import {createSelector, createSlice, PayloadAction} from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport {getUrlParams} from \"../../utils\";\nimport {getNumericFields} from \"../../dashboard/utils/domain\";\nimport {Data} from \"../../dashboard/config\";\nimport {dataSlice,} from \"../data/dataSlice\";\n\nexport interface ControlValues {\n    area: string,\n    compare: string,\n    x: string,\n    y: string,\n    z: string\n}\n\nexport interface ControlsState {\n    value: ControlValues\n}\n\nexport interface ControlsStateItem {\n    key: string\n    value: string\n}\n\nconst urlParams = getUrlParams();\n\nconst initialState: ControlsState = {\n    value: {\n        area: \"us\",\n        compare: \"state\",\n        x: urlParams.x,\n        y: urlParams.y,\n        z: urlParams.z\n    }\n};\n\nexport const controlsSlice = createSlice({\n    name: 'controls',\n    initialState,\n    // The `reducers` field lets us define reducers and generate associated actions\n    reducers: {\n        // Use the PayloadAction type to declare the contents of `action.payload`\n        setControl: (state, action: PayloadAction<ControlsStateItem>) => {\n            state.value[action.payload.key] = action.payload.value;\n        },\n        setControls: (state, action: PayloadAction<Object>) => {\n            state.value = {...state.value, ...action.payload};\n        }\n    },\n    extraReducers: {\n        // @ts-ignore\n        [dataSlice.actions.setData]: (state, action: PayloadAction<Data>) => {\n            const data = action.payload;\n            const numericFields = getNumericFields(data);\n            if (!!numericFields) {\n                state.value = {\n                    ...state.value,\n                    x: state.value.x || numericFields[0].id,\n                    y: state.value.y || numericFields[1].id,\n                    z: state.value.z || numericFields[2].id\n                }\n            }\n        }\n    }\n});\n\nexport const { setControl, setControls } = controlsSlice.actions;\n\nexport const selectControlValues = (state: RootState) : ControlValues => {\n    return state.controls.value;\n}\n\nexport const selectXyzControlValues = createSelector(\n    selectControlValues,\n    (cv) => ({\n        x: cv.x,\n        y: cv.y,\n        z: cv.z\n    }),\n)\n\nexport const selectNonNullXyzControlArray = createSelector(\n    selectXyzControlValues,\n    (cv) => Object.values(cv).filter(v => !!v)\n);\n\nexport default controlsSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport yearReducer from '../features/year/yearSlice';\nimport plotTypeReducer from '../features/plotType/plotTypeSlice';\nimport dataReducer from '../features/data/dataSlice';\nimport controlsReducer from '../features/controls/controlsSlice';\n\nexport const store = configureStore({\n  reducer: {\n    data: dataReducer,\n    year: yearReducer,\n    plotType: plotTypeReducer,\n    controls: controlsReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import { useEffect } from \"react\"\n\nconst useTouchOutside = (elementRef, onClick) => {\n    useEffect(() => {\n        const clickListener = event => {\n            if (!elementRef.current || elementRef.current.contains(event.target)) {\n                return\n            }\n            onClick(event)\n        }\n        // const moveListener = event => {\n        //     if (!elementRef.current || elementRef.current.contains(event.target)) {\n        //         return\n        //     }\n        //     onMove(event);\n        // }\n        document.addEventListener(\"touchstart\", clickListener)\n        // document.addEventListener(\"mousemove\", moveListener)\n        return () => {\n            document.removeEventListener(\"touchstart\", clickListener)\n            // document.removeEventListener(\"mousemove\", moveListener)\n        }\n    }, [elementRef, onClick])\n}\n\nexport default useTouchOutside\n","import React from 'react';\nimport { Tooltip } from '@visx/tooltip';\nimport { withBoundingRects } from '@visx/bounds';\n\nfunction CustomTooltipWithBounds({\n                                     left: initialLeft,\n                                     top: initialTop,\n                                     offsetLeft = 20,\n                                     offsetTop = 20,\n                                     rect,\n                                     parentRect,\n                                     getRects,\n                                     children,\n                                     style,\n                                     ...otherProps\n                                 }) {\n\n    let left = initialLeft;\n    let top = initialTop;\n\n    if (parentRect) {\n        if (parentRect.width > 0) {\n            if (left + offsetLeft + rect.width > parentRect.width) {\n                left = parentRect.width - rect.width - offsetLeft;\n            }\n            if (left < 0) {\n                left = 0;\n            }\n        }\n\n        if (parentRect.height > 0) {\n            if (top + offsetTop + rect.height > parentRect.height) {\n                top = parentRect.height - rect.height - offsetTop;\n            }\n            if (top < 0) {\n                top = 0;\n            }\n        }\n    }\n\n    return (\n        <Tooltip\n            style={{ top: 0, transform: `translate(${left}px, ${top}px)`, ...style }}\n            {...otherProps}\n        >\n            {children}\n        </Tooltip>\n    );\n}\nexport default withBoundingRects(CustomTooltipWithBounds);\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import {createSelector} from \"@reduxjs/toolkit\";\nimport {\n    selectAreas,\n    selectDivisionsByLevel,\n    selectFields, selectLevels, selectValuesByFieldAndDivision,\n    selectYearsByLevelAndField\n} from \"../features/data/dataSlice\";\nimport {intersectAll, invertNestedObject} from \"./utils/misc\";\nimport {\n    selectControlValues,\n    selectNonNullXyzControlArray\n} from \"../features/controls/controlsSlice\";\nimport {mapObjIndexed} from \"ramda\";\n\nexport const selectControlFields = createSelector(\n    selectAreas,\n    selectLevels,\n    selectFields,\n    selectControlValues,\n    (areas, levels, fields, values) => {\n        return mapObjIndexed((v, k) => {\n            if (!fields || !v) {\n                return null;\n            }\n            if (k === 'area') {\n                return areas[v];\n            }\n            if (k === 'compare') {\n                return levels[v];\n            } else {\n                return fields[v];\n            }\n        }, values)\n    }\n);\n\nexport const selectCurrentDivisions = createSelector(\n    selectDivisionsByLevel,\n    selectControlValues,\n    (dvsByLevel, cv): any[] =>\n        dvsByLevel[cv.compare]\n);\n\nexport const selectYears = createSelector(\n    selectYearsByLevelAndField,\n    selectControlValues,\n    selectNonNullXyzControlArray,\n    (yblaf, cvs, xyz) =>\n        intersectAll(xyz.map(cv => yblaf[cvs.compare][cv]))\n);\n\n\nconst processDatasetItem = (vbfad, field) => {\n    return field ? invertNestedObject(vbfad[field]) : null\n};\n\nexport const selectCurrentDataset = createSelector(\n    selectValuesByFieldAndDivision,\n    selectControlValues,\n    (vbfad, cv) => ({\n        byField: {\n            x: vbfad[cv.x],\n            y: vbfad[cv.y],\n            z: vbfad[cv.z]\n        },\n        byYear: invertNestedObject({\n                x: processDatasetItem(vbfad, cv.x),\n                y: processDatasetItem(vbfad, cv.y),\n                z: processDatasetItem(vbfad, cv.z)\n\n        })\n    })\n);\n","import React from \"react\";\nimport {defaultStyles as defaultTooltipStyles, useTooltip} from \"@visx/tooltip\";\nimport {\n    all,\n    curry,\n    groupBy,\n    keys,\n    last,\n    map,\n    range,\n    reduce,\n    tail,\n    values\n} from \"ramda\";\nimport useTouchOutside from \"./useTouchOutside\";\nimport TooltipWithBounds from '../dashboard/CustomTooltipWithBounds';\nimport {animated, useSpring} from \"react-spring\";\nimport {useAppSelector} from \"../app/hooks\";\nimport {selectPlotType} from \"../features/plotType/plotTypeSlice\";\nimport {DataField, FieldType} from \"../dashboard/config\";\nimport {selectControlFields} from \"../dashboard/selectors\";\n\nconst DEFAULT_OPTIONS = {\n    selectedOpacity: 0.8,\n    unselectedOpacity: 0.15,\n    defaultOpacity: 0.6\n};\n\ntype ItemMap = Map<string, any[] | ItemMap>;\ntype KeyValue = any | ((event: Event) => any)\n\nconst groupByKeys = (keyFields: string[], items: any[]) : ItemMap => {\n    const im = groupBy(item => item[keyFields[0]], values(items));\n    if (keyFields.length === 1) {\n        return im;\n    } else {\n        return map(curry(groupByKeys)(tail(keyFields)), im);\n    }\n};\n\nconst lookupKeys = (keys: string[], itemMap: ItemMap) => {\n    return reduce((im, k) => im[k], itemMap, keys);\n};\n\nconst lookupItem = (keys: string[], itemMap: ItemMap) => {\n    const results = lookupKeys(keys, itemMap);\n    if (results.length === 1) {\n        return results[0];\n    } else {\n        throw new Error(`Found ${results.length} results for lookup of ${keys}`);\n    }\n};\n\nconst matchesAllKeys = (keysToMatch: string[], itemKeys: string[]) : boolean => {\n    const n = Math.min(keysToMatch.length, itemKeys.length);\n    // Keys will be coerced into strings, but they might be originally numbers\n    // eslint-disable-next-line eqeqeq\n    return all(i => keysToMatch[i] == itemKeys[i], range(0, n));\n};\n\nconst formatValue = (field: DataField, value) => {\n    if (field.type === FieldType.CURRENCY) {\n        return '$' + Number(value).toLocaleString();\n    } else {\n        return Number(value).toLocaleString();\n    }\n};\n\nconst TooltipContent = ({item}) => {\n    const controls = useAppSelector(selectControlFields);\n    const plotType = useAppSelector(selectPlotType);\n    return (\n        <div className='tooltip-content'>\n            <div className='tooltip-title'>\n                <h3>{item.name}</h3>\n                <div className='year'>{item.year}</div>\n            </div>\n            <div className='tooltip-body'>\n                <div>{controls.y.name}: {formatValue(controls.y, item.y)}</div>\n                {plotType.fields.x && (\n                    <div>{controls.x.name}: {formatValue(controls.x, item.x)}</div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nconst useSelect = (items: any[], keyFields: string[],\n                   showLabel, disableInteraction = false) => {\n    const nKeyFields = keyFields.length;\n    const itemMap = groupByKeys(keyFields, items);\n    const [selectedKeys, selectKeys] = React.useState<string[]>(null);\n    const {\n        tooltipOpen,\n        tooltipLeft,\n        tooltipTop,\n        tooltipData,\n        showTooltip,\n        hideTooltip\n    } = useTooltip();\n\n    const select = React.useCallback(\n        (itemKeys: string[]) => {\n            if (!selectedKeys || !matchesAllKeys(selectedKeys, itemKeys)) {\n                selectKeys(itemKeys);\n                const item = lookupItem(itemKeys, itemMap);\n                showTooltip({\n                    tooltipData: <TooltipContent item={item} />,\n                    tooltipLeft: item.scaledX,\n                    tooltipTop: item.scaledY,\n                });\n            }\n        },\n        [showTooltip, itemMap, selectedKeys]\n    );\n\n    const deselect = React.useCallback(() => {\n        selectKeys(null);\n        hideTooltip();\n    }, [hideTooltip]);\n\n    const getKeys = (key1) : string[] => {\n        switch (nKeyFields) {\n            case 1: return [key1];\n            case 2: return [key1, last(keys(itemMap[key1]))];\n            default: throw new Error(\"Unsupported # of keys: \" + nKeyFields);\n        }\n    };\n\n    React.useEffect(() => {\n        if (showLabel) {\n            select(getKeys(showLabel));\n        }\n    });\n\n    const Tooltip = React.memo(() => {\n        const ref = React.useRef(null);\n        // On touch outside isn't needed for closing the tooltip,\n        // but actually to be able to select the next point (on touchscreen)\n        useTouchOutside(ref, deselect);\n        return tooltipData ? (\n            <>\n                {tooltipOpen && tooltipData && (\n                    // @ts-ignore\n                    <TooltipWithBounds\n                        top={tooltipTop}\n                        left={tooltipLeft}\n                        style={{\n                            ...defaultTooltipStyles,\n                            fontSize: '1em',\n                            padding: '0.6em',\n                            margin: '0.75em'\n                        }}\n                        className='tooltip MuiPaper-elevation5'\n                    >\n                        <div ref={ref}>\n                            {tooltipData}\n                        </div>\n                    </TooltipWithBounds>\n                )}\n            </>\n        ) : null;\n    });\n\n    const makeSelectable = React.useCallback((keyValues: any[], c, options= DEFAULT_OPTIONS) => {\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const [{ animOpacity }, setAnim] = useSpring(() => ({\n            animOpacity: options.defaultOpacity,\n        }));\n        const isSelected = selectedKeys && matchesAllKeys(selectedKeys, keyValues);\n        const opacity = isSelected ? options.selectedOpacity : selectedKeys ? options.unselectedOpacity : options.defaultOpacity;\n        const animate = options.animate == null || options.animate === true;\n        if (animate) {\n            setAnim({animOpacity: opacity});\n            // return React.cloneElement(c, {\n            //     key: keyValues.join('_'),\n            //     fillOpacity: animOpacity.to(x => x),\n            //     strokeOpacity:  animOpacity.to(x => x)\n            // });\n            return (\n                <animated.g\n                    fillOpacity={animOpacity.to(x => x)}\n                    strokeOpacity={animOpacity.to(x => x)}\n                    key={keyValues.join('_')}\n                >\n                    {c}\n                </animated.g>\n            );\n        } else {\n            return React.cloneElement(c, {\n                ...c.props,\n                key: keyValues.join('_'),\n                fillOpacity: opacity,\n                strokeOpacity: opacity\n            });\n        }\n    }, [selectedKeys]);\n\n    const makeInteractive = React.useCallback((keyValues: KeyValue[], c) => {\n        if (disableInteraction) {\n            return c;\n        } else {\n            const callback = (event) => {\n                const resolvedKeyValues = keyValues.map(k => k instanceof Function ? k(event) : k);\n                select(resolvedKeyValues);\n            }\n            return React.cloneElement(c, {\n                ...c.props,\n                onTouchStart: callback,\n                onMouseMove: callback,\n                onMouseLeave: deselect\n            });\n        }\n    }, [select, deselect, disableInteraction]);\n\n    const makeSelectableAndInteractive = React.useCallback(\n            (keyValues: KeyValue[], c, options= DEFAULT_OPTIONS) => {\n                const concreteKeys = keyValues.filter(k => !(k instanceof Function))\n        return makeInteractive(keyValues, makeSelectable(concreteKeys, c, options));\n    }, [makeSelectable, makeInteractive]);\n\n    return {makeSelectable, makeInteractive, makeSelectableAndInteractive, Tooltip};\n};\n\nexport default useSelect;\n","import React from \"react\";\nimport {animated, useSpring} from 'react-spring';\nimport {extent} from 'd3-array';\nimport {scaleLinear, scalePower} from \"@visx/scale\";\nimport useSelect from \"../hooks/useSelect\";\nimport {useAppSelector} from \"../app/hooks\";\nimport {selectYear} from \"../features/year/yearSlice\";\nimport {selectCurrentDivisions} from \"./selectors\";\nimport {getNestedValues} from \"./utils/misc\";\nimport {prepareData} from \"./utils/domain\";\n\nconst paddingPct = 0.1;\n\nexport type BubblePlotProps = {\n    data: any\n    showLabel?: string\n    disableInteraction?: boolean\n    width: number\n    height: number\n};\n\nconst DumbBubblePlot = ({\n    data,\n    showLabel = null,\n    disableInteraction = false,\n    width,\n    height,\n    year,\n    divisions\n}) => {\n    const scaleFactor = Math.min(width, height) / 100;\n    const padding = Math.min(width, height) * paddingPct;\n    const xScale = scaleLinear<number>({\n        domain: extent(getNestedValues(data.byField.x)),\n        range: [padding, width - padding],\n        round: true\n    });\n    const yScale = scaleLinear<number>({\n        domain: extent(getNestedValues(data.byField.y)),\n        range: [height - padding / 2, padding],\n        round: true\n    });\n    const sizeScale = scaleLinear<number>({\n        domain: extent(getNestedValues(data.byField.z)),\n        range: [scaleFactor, scaleFactor * 10]\n    });\n    const items = prepareData(data.byYear, year)\n        .map(([k, v]) => ({\n            ...divisions[k],\n            ...v,\n            scaledX: xScale(v.x),\n            scaledY: yScale(v.y),\n            size: sizeScale(v.z)\n        }));\n\n    const {makeSelectableAndInteractive, Tooltip} =\n        useSelect(items, ['name'], showLabel, disableInteraction);\n    return (\n        <>\n            <svg width={width} height={height}>\n                {items.map(item => {\n                    // eslint-disable-next-line react-hooks/rules-of-hooks\n                    const [{animX, animY, animSize}, setAnim] = useSpring(() => ({\n                        animX: item.scaledX,\n                        animY: item.scaledY,\n                        animSize: item.size\n                    }));\n\n                    setAnim({\n                        animX: item.scaledX,\n                        animY: item.scaledY,\n                        animSize: item.size\n                    })\n\n                    return makeSelectableAndInteractive([item.name],\n                        <animated.circle\n                            cx={animX}\n                            cy={animY}\n                            r={animSize}\n                            fill={'#3188f6EE'}\n                            stroke={'#3188f6'}\n                        />\n                    );\n                })}\n            </svg>\n            <Tooltip />\n        </>\n    );\n};\n\nconst BubblePlot = (props: BubblePlotProps) => {\n    const year = useAppSelector(selectYear);\n    const divisions = useAppSelector(selectCurrentDivisions);\n    return year && divisions &&\n        <DumbBubblePlot {...props} year={year} divisions={divisions} />\n};\n\nexport default BubblePlot;\n","import React from 'react';\nimport { geoCentroid, geoAlbersUsa } from 'd3-geo';\nimport {animated, useSpring} from 'react-spring';\nimport { AlbersUsa } from '@visx/geo';\nimport * as topojson from 'topojson-client';\nimport topology from '../data/usa-topo.json';\nimport {extent} from 'd3-array';\nimport {zipObj, toPairs} from \"ramda\";\nimport { hcl } from 'd3-color';\nimport { scaleLinear } from 'd3-scale';\nimport { interpolateHcl } from 'd3-interpolate';\nimport {useAppSelector} from \"../app/hooks\";\nimport {selectYear} from \"../features/year/yearSlice\";\nimport useSelect from \"../hooks/useSelect\";\nimport {DataField} from \"./config\";\nimport {selectCurrentDivisions} from \"./selectors\";\nimport {getNestedValues} from \"./utils/misc\";\n\nexport const borderColor = '#FFF';\n\nexport type MapPlotProps = {\n    width: number\n    height: number\n    data: any\n    yAxisVar: DataField\n    showLabel?: string\n    disableInteraction?: boolean\n};\n\ninterface FeatureShape {\n    type: 'Feature';\n    id: string;\n    geometry: { coordinates: [number, number][][]; type: 'Polygon' };\n    properties: { name: string };\n}\n\n// @ts-ignore\nconst { features: unitedStates } = topojson.feature(topology, topology.objects.states) as {\n    type: 'FeatureCollection';\n    features: FeatureShape[];\n};\nconst projection = geoAlbersUsa();\n\nconst opacityOptions = {\n    selectedOpacity: 1,\n    unselectedOpacity: 0.2,\n    defaultOpacity: 1\n};\n\nconst DumbMapPlot = ({ data, width, height, year, divisions,\n                  showLabel = null, disableInteraction = false }) => {\n    const centerX = width / 2;\n    const centerY = height / 2;\n    const scale = Math.round(Math.min(width, height) * 1.4);\n\n    const colorScale = scaleLinear()\n        .domain(extent(getNestedValues(data.byField.y)))\n        // @ts-ignore\n        .range([\n            hcl('rgba(41,122,204,0.1)'),\n            hcl('#0265c9')])\n        // @ts-ignore\n        .interpolate(interpolateHcl)\n\n    const items = toPairs(data.byYear[year].y)\n        .map(([k, y]) => ({\n            ...divisions[k],\n            id: divisions[k]['geoid'].slice(-2),\n            y,\n            year,\n            color: colorScale(y),\n        }));\n    const includeIds = items.map(d => d.id);\n    const itemMap = zipObj(items.map(d => d.id), items);\n\n    const ifs = unitedStates\n        .filter(f => includeIds.includes(f.id))\n        .map((f) => {\n            const c = projection(geoCentroid(f));\n            return {\n                ...itemMap[f.id],\n                scaledX: c[0] / 1.55,\n                scaledY: c[1] / 1.55\n            };\n        });\n\n    const {makeSelectableAndInteractive, Tooltip} =\n        useSelect(ifs, ['name'], showLabel, disableInteraction);\n\n    return width < 10 ? null : (\n        <>\n            <svg width={width} height={height}>\n                <AlbersUsa<FeatureShape>\n                    data={unitedStates}\n                    scale={scale}\n                    translate={[centerX, centerY]}\n                >\n                    {({ features}) =>\n                        features\n                            .filter(f => includeIds.includes(f.feature.id))\n                            .map(({ feature, path }) => {\n                                const item = itemMap[feature.id];\n\n                                // eslint-disable-next-line react-hooks/rules-of-hooks\n                                const [{ animColor }, setAnim] = useSpring(() => ({\n                                    animColor: item.color\n                                }));\n\n                                setAnim({\n                                    animColor: item.color\n                                });\n                                return makeSelectableAndInteractive([item.name],\n                                    <animated.path\n                                        d={path || ''}\n                                        fill={animColor.to(x => x)}\n                                        stroke={borderColor}\n                                        strokeWidth={1}\n                                    />, opacityOptions\n                                )\n                            })\n                    }\n                </AlbersUsa>\n            </svg>\n            <Tooltip />\n        </>\n    );\n};\n\nconst MapPlot = (props: MapPlotProps) => {\n    const year = useAppSelector(selectYear);\n    const divisions = useAppSelector(selectCurrentDivisions);\n    return year && divisions &&\n      <DumbMapPlot {...props} year={year} divisions={divisions} />\n}\n\nexport default MapPlot;\n","import React from 'react';\nimport { LinePath } from '@visx/shape';\nimport {extent} from 'd3-array';\nimport {scaleLinear} from \"@visx/scale\";\nimport {GlyphCircle} from '@visx/glyph';\nimport { localPoint } from '@visx/event';\nimport { voronoi } from '@visx/voronoi';\nimport {groupBy, curry} from \"ramda\";\nimport useSelect from \"../hooks/useSelect\";\nimport {useAppSelector} from \"../app/hooks\";\nimport {selectCurrentDivisions} from \"./selectors\";\nimport {mapObjIndexed} from \"ramda\";\n\nconst paddingPct = 0.015;\n\nexport type ScatterPlotProps = {\n    data: any\n    showLabel?: string\n    disableInteraction?: boolean\n    width: number\n    height: number\n};\n\nconst lineOptions = {\n    selectedOpacity: 0.9,\n    unselectedOpacity: 0.15,\n    defaultOpacity: 0.6\n};\n\nconst pointOptions = {\n    selectedOpacity: 1,\n    unselectedOpacity: 0,\n    defaultOpacity: 0,\n    animate: false\n};\n\nconst convertData = (ds: Object) : any[] => {\n    const a = mapObjIndexed((yvs, id) =>\n            mapObjIndexed((y, year) => ({\n                id,\n                year,\n                y\n            }), yvs)\n        , ds);\n    return Object.values(a).flatMap(a2 => Object.values(a2));\n};\n\nconst DumbLinePlot = ({\n    data,\n    showLabel = null,\n    disableInteraction = false,\n    width,\n    height,\n    divisions\n}) => {\n    const padding = React.useMemo(() =>\n            Math.min(width, height) * paddingPct,\n        [width, height]\n    );\n    const dataArray = convertData(data.byField.y);\n\n    const xScale = scaleLinear<number>({\n        domain: extent(dataArray, d => +d.year),\n        range: [padding, width - padding],\n        round: true\n    });\n    const yScale = scaleLinear<number>({\n        domain: extent(dataArray, d => +d.y),\n        range: [height - padding, padding],\n        round: true\n    });\n    const items = dataArray\n        .map(d => ({\n            ...divisions[d.id],\n            ...d,\n            scaledX: xScale(d.year),\n            scaledY: yScale(d.y),\n        }));\n\n    const lines = groupBy(d => d.name, items);\n    const lineKeys = Object.keys(lines);\n    const {makeSelectable, makeSelectableAndInteractive, Tooltip} =\n        useSelect(items, ['name', 'year'], showLabel, disableInteraction);\n    const scaledX = (d) => d.scaledX;\n    const scaledY = (d) => d.scaledY;\n    const strokeWidth = Math.max(Math.round(width / 150), 1);\n    const circleSize = Math.round(strokeWidth * 16);\n\n    const voronoiInstance = voronoi({\n        x: scaledX,\n        y: scaledY,\n        width,\n        height\n    });\n\n    const findNearest = (line, event) => {\n        const point = localPoint(event);\n        const nearest = voronoiInstance(line).find(point.x, point.y).data;\n        return nearest.year;\n    };\n\n    return (\n        <>\n            <svg width={width} height={height}>\n                <>\n                    {lineKeys.map((key) => {\n                        const line = lines[key];\n                        return (\n                            <g key={key}>\n                                {makeSelectableAndInteractive([line[0].name, curry(findNearest)(line)],\n                                    <LinePath\n                                    data={line}\n                                    x={(point: any) => point.scaledX}\n                                    y={(point: any) => point.scaledY}\n                                    stroke='#3188f6'\n                                    strokeWidth={strokeWidth}\n                                    />, lineOptions\n                                )}\n                                {line.map(point => makeSelectable([point.name, point.year],\n                                    <GlyphCircle\n                                    left={point.scaledX}\n                                    top={point.scaledY}\n                                    fill='#3188f6'\n                                    stroke='#FFFFFF'\n                                    size={circleSize}\n                                    strokeWidth={Math.max(strokeWidth / 3, 1)}\n                                    />, pointOptions\n                                ))}\n                            </g>\n                        );\n                    })}\n                </>\n            </svg>\n            <Tooltip />\n        </>\n    );\n};\n\nconst LinePlot = (props: ScatterPlotProps) => {\n    const divisions = useAppSelector(selectCurrentDivisions);\n    return divisions && <DumbLinePlot {...props} divisions={divisions} />;\n}\n\nexport default LinePlot;\n","import React from \"react\";\nimport {max} from 'd3-array';\nimport {scaleBand, scaleLinear} from \"@visx/scale\";\nimport useSelect from \"../hooks/useSelect\";\nimport {animated, useSpring} from 'react-spring';\nimport {useAppSelector} from \"../app/hooks\";\nimport {selectYear} from \"../features/year/yearSlice\";\nimport {getNestedValues} from \"./utils/misc\";\nimport {selectCurrentDivisions} from \"./selectors\";\nimport {prepareData} from \"./utils/domain\";\n\nconst hPaddingPct = 0.015;\nconst vPaddingPct = 0.02\n\nexport type ScatterPlotProps = {\n    data: any\n    showLabel?: string\n    disableInteraction?: boolean\n    width: number\n    height: number\n};\n\nconst DumbBarPlot = ({\n    data,\n    showLabel = null,\n    disableInteraction = false,\n    width,\n    height,\n    divisions,\n    year\n}) => {\n    const hPadding = React.useMemo(() =>\n        Math.min(width, height) * hPaddingPct,\n        [width, height]\n    );\n    const vPadding = React.useMemo(() =>\n        Math.min(width, height) * vPaddingPct,\n        [width, height]\n    );\n    const tempItems = prepareData(data.byYear, year)\n        .map(([k, v]) => ({\n            ...divisions[k],\n            ...v\n        }));\n\n    const xScale = React.useMemo(() => scaleBand<string>({\n        range: [hPadding, width - hPadding],\n        round: false,\n        domain: tempItems.map(item => item.name),\n        padding: 0.25,\n    }), [tempItems, hPadding, width]);\n    const yScale = React.useMemo(() => scaleLinear<number>({\n        domain: [0, max(getNestedValues(data.byField.y))],\n        range: [height - vPadding, vPadding],\n        round: true\n    }), [data, height, vPadding]);\n\n    const items = tempItems.map(item => ({\n        ...item,\n        scaledX: xScale(item.name),\n        scaledY: yScale(item.y)\n    }));\n\n    const {makeSelectableAndInteractive, Tooltip} =\n        useSelect(items, ['name'], showLabel, disableInteraction);\n\n    return (\n        <>\n            <svg width={width} height={height - vPadding}>\n                {items.map(item => {\n                    // eslint-disable-next-line react-hooks/rules-of-hooks\n                    const [{ animY }, setAnim] = useSpring(() => ({\n                        animY: item.scaledY\n                    }));\n\n                    setAnim({\n                        animY: item.scaledY\n                    });\n\n                    return makeSelectableAndInteractive([item.name],\n                        <animated.rect\n                            y={animY.to(x => x)}\n                            height={animY.to(x => height - x)}\n                            x={item.scaledX}\n                            width={xScale.bandwidth()}\n                            fill='#318Cf6'\n                        />\n                    )\n                })}\n            </svg>\n            <Tooltip />\n        </>\n    );\n};\n\nconst BarPlot = (props: ScatterPlotProps) => {\n    const year = useAppSelector(selectYear);\n    const divisions = useAppSelector(selectCurrentDivisions);\n    return year && divisions &&\n      <DumbBarPlot {...props} year={year} divisions={divisions} />\n}\n\nexport default BarPlot;\n","import React from \"react\";\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport {TransitionProps} from \"@mui/material/transitions\";\nimport {\n    Button,\n    Collapse,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    FormControl,\n    FormControlLabel,\n    FormGroup,\n    IconButton,\n    InputLabel,\n    NativeSelect,\n    Switch,\n    TextField\n} from \"@mui/material\";\nimport {\n    FacebookIcon,\n    FacebookShareButton,\n    LinkedinIcon,\n    LinkedinShareButton,\n    PinterestIcon,\n    PinterestShareButton,\n    RedditIcon,\n    RedditShareButton,\n    TwitterIcon,\n    TwitterShareButton,\n} from \"react-share\";\nimport FileCopyOutlinedIcon from '@mui/icons-material/FileCopyOutlined';\nimport * as htmlToImage from 'html-to-image';\nimport {\n    AxisLabelSource, PlotType,\n    SHARE_SIZE_MAP,\n    SHARE_SIZES,\n    ShareSize\n} from \"./config\";\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport {useAppSelector} from \"../app/hooks\";\nimport {selectPlotType} from \"../features/plotType/plotTypeSlice\";\nimport {selectYear} from \"../features/year/yearSlice\";\nimport {selectCurrentDivisions} from \"./selectors\";\nimport './sharing.scss';\nimport {useTheme} from \"@mui/system\";\n\nconst MAX_PREVIEW_WIDTH = 208 * 4;\nconst MAX_PREVIEW_HEIGHT = 208 * 4;\n\nconst calculatePreviewSize = ({width, height}) => {\n    const ratio = height / width;\n    const h1 = Math.min(ratio * MAX_PREVIEW_WIDTH, MAX_PREVIEW_HEIGHT);\n    const w = Math.min(h1 / ratio, MAX_PREVIEW_WIDTH);\n    const h = Math.min(w * ratio);\n    return {width: w, height: h};\n};\n\nconst ShareTransition = React.forwardRef(function Transition(\n    props: TransitionProps & { children?: React.ReactElement<any, any> },\n    ref: React.Ref<unknown>,\n) {\n    return <Collapse ref={ref} {...props} timeout={1500} />;\n});\n\nconst BaseDialog = ({setOpen, children, fullScreen=false}) => {\n    return (\n        <Dialog\n            className='share-dialog'\n            open={true}\n            onClose={() => setOpen(false)}\n            fullScreen={fullScreen}\n            TransitionComponent={ShareTransition}\n            keepMounted\n        >\n            {children}\n        </Dialog>\n    );\n}\n\nconst createPlotTitle = (plotType: PlotType, year: number, compareByVar, xAxisLabel, yAxisLabel) => {\n    return (!plotType.xAxisLabelSource || plotType.xAxisLabelSource === AxisLabelSource.COMPARE ?\n        yAxisLabel + ' by ' +\n        compareByVar.toLowerCase()\n        :\n        yAxisLabel + ' / ' +\n        xAxisLabel.toLowerCase() + ' by ' +\n        compareByVar.toLowerCase()) +\n        (plotType.name === 'line' ? '' : ` (${year})`)\n}\n\nexport const DumbImageDialog = ({plot, setOpen, label, setLabel,\n                                compareByVar, xAxisLabel, yAxisLabel, showAxisLabels,\n                                plotType, year, items}) => {\n    const theme = useTheme();\n    const fullScreen = useMediaQuery(theme.breakpoints.down('xs'));\n    const plotTitle = createPlotTitle(plotType, year, compareByVar, xAxisLabel, yAxisLabel);\n    const defaultShareSize = SHARE_SIZES[0];\n    const [sharePresetSize, setSharePresetSize] = React.useState(defaultShareSize);\n    const [previewSize, setPreviewSize] = React.useState({\n        width: MAX_PREVIEW_WIDTH,\n        height: MAX_PREVIEW_HEIGHT\n    });\n    const [shareSize, setShareSize] = React.useState({\n        width: defaultShareSize.width,\n        height: defaultShareSize.height\n    });\n    const [format, setFormat] = React.useState('PNG');\n    const [imgData, setImgData] = React.useState<string>(null);\n\n    const getGenerateFn = () => {\n        switch (format) {\n            case 'PNG': return htmlToImage.toPng;\n            case 'SVG': return htmlToImage.toSvg;\n            default: throw Error('Unhandled format: ' + format);\n        }\n    }\n\n    const GenerateDialog = ({setImgData}) => {\n        const generate = () => {\n            const el: any = document\n                .getElementById('preview')\n                .getElementsByClassName('gen-target')[0];\n            getGenerateFn()(el, {\n                canvasWidth: shareSize.width,\n                canvasHeight: shareSize.height,\n                quality: 1.0,\n                pixelRatio: 1\n            }).then((dataUrl) => {\n                setImgData(dataUrl);\n            });\n        };\n\n        const setNewSize = (newSize) => {\n            setShareSize(newSize);\n            setPreviewSize(calculatePreviewSize(newSize));\n        };\n\n        const onPresetSizeSelect = (event) => {\n            const name = event.target.value;\n            if (name === 'Custom') {\n                setSharePresetSize(null);\n                document\n                    .getElementsByClassName('MuiDialog-container')[0]\n                    .getElementsByClassName('MuiPaper-root')[0]\n                    .scrollTo(0, 9999);\n            } else {\n                const s = SHARE_SIZE_MAP[name];\n                setSharePresetSize(s);\n                setNewSize(s);\n            }\n        };\n\n        const onSizeChange = (newSize) => {\n            setSharePresetSize(null);\n            setNewSize(newSize);\n        };\n\n        const onLabelChange = (event) => {\n            const value = event.target.value;\n            setLabel(value === ' ' ? null : value);\n        };\n\n        const onFormatChange = (event) => {\n            const value = event.target.value;\n            setFormat(value);\n        }\n\n        const fontSize = Math.round(previewSize.width / 40);\n\n        return (\n            <>\n                <div className='dialog-title'>Generate image</div>\n                <DialogContent className='dialog-content'>\n                    <div id='preview-container'>\n                        <div id='preview' style={{...previewSize, fontSize}}>\n                            <div className='gen-target'>\n                                <div className='title'>{plotTitle}</div>\n                                <div className='subtitle'>\n                                    Statistipedia: statistipedia.org/explore\n                                </div>\n                                <div className='plot-frame'>\n                                    {plot}\n                                </div>\n                                { showAxisLabels && xAxisLabel &&\n                                <div className='x-axis'>\n                                    {xAxisLabel || 'Year'}\n                                </div>\n                                }\n                                { showAxisLabels && yAxisLabel &&\n                                <div className='y-axis'>\n                                    {yAxisLabel}\n                                </div>\n                                }\n                            </div>\n                        </div>\n                        <div className=\"MuiFormLabel-root caption\">\n                            Preview\n                        </div>\n                    </div>\n                    <div className='share-controls'>\n                        <div className='size-inputs'>\n                            <FormControl>\n                                <InputLabel variant=\"standard\" htmlFor=\"preset-size\">Size</InputLabel>\n                                <NativeSelect id=\"preset-size\"\n                                              onChange={onPresetSizeSelect}\n                                              value={sharePresetSize ? sharePresetSize.name : 'Custom'}>\n                                    <optgroup label=\"Presets\">\n                                        {SHARE_SIZES.map((s) => (\n                                            <option key={s.name}>{s.name}</option>\n                                        ))}\n                                    </optgroup>\n                                    <option>Custom</option>\n                                </NativeSelect>\n                            </FormControl>\n                            <FormGroup row className='custom-size-inputs top-padded row'>\n                                {['width', 'height'].map((s) => (\n                                    <FormControl key={s} className='top-padded custom-size-input'>\n                                        <TextField helperText={s}\n                                                   variant=\"standard\"\n                                                   onChange={(event) =>\n                                                       onSizeChange({...shareSize, [s]: event.target.value})}\n                                                   value={shareSize[s]} />\n                                    </FormControl>\n                                ))}\n                            </FormGroup>\n                            <FormGroup row className='row'>\n                                <FormControl className=\"form-control\">\n                                    <InputLabel variant=\"standard\" htmlFor=\"label\">Labeled item</InputLabel>\n                                    <NativeSelect id=\"label\"\n                                                  value={label ? label : ' '}\n                                                  onChange={onLabelChange}>\n                                        <option value=' ' />\n                                        {items.map(({name}) => (\n                                            <option key={name}>{name}</option>\n                                        ))}\n                                    </NativeSelect>\n                                </FormControl>\n                            </FormGroup>\n                            <FormGroup row className='top-padded row'>\n                                <FormControl className=\"form-control\">\n                                    <InputLabel variant=\"standard\" htmlFor=\"format\">Format</InputLabel>\n                                    <NativeSelect id=\"format\"\n                                                  value={format}\n                                                  onChange={onFormatChange}\n                                    >\n                                        <option>PNG</option>\n                                        <option>SVG</option>\n                                    </NativeSelect>\n                                </FormControl>\n                                <FormControl className=\"form-control\">\n                                    <InputLabel variant=\"standard\" htmlFor=\"light_dark\">\n                                        Mode\n                                    </InputLabel>\n                                    <NativeSelect id=\"light_dark\" value='Light mode'>\n                                        <option>Light</option>\n                                        <option>Dark</option>\n                                    </NativeSelect>\n                                </FormControl>\n                            </FormGroup>\n                            <FormControl className=\"form-control\">\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            color=\"primary\"\n                                        />\n                                    }\n                                    label=\"Add QR code\"\n                                />\n                            </FormControl>\n                        </div>\n                    </div>\n                </DialogContent>\n                <DialogActions className='dialog-actions'>\n                    <Button onClick={() => setOpen(false)}>Close</Button>\n                    <Button onClick={generate}>Generate</Button>\n                </DialogActions>\n            </>\n        );\n    };\n\n    const DownloadDialog = ({imgData, setImgData}) => {\n        const url = window.location.href;\n\n        // const share = () => {\n        //     if (navigator.share) {\n        //         navigator.share({\n        //             title: 'web.dev',\n        //             text: 'Check out web.dev.',\n        //             // url: 'https://web.dev/',\n        //             files: [image]\n        //         })\n        //             .then(() => alert('Successful share'))\n        //             .catch((error) => alert(error));\n        //     }\n        // };\n        return (\n            <>\n                <div className='dialog-title'>Download image</div>\n                <DialogContent className='dialog-content'>\n                    <div className='generated-image'>\n                        <a download={plotTitle} href={imgData}>\n                            <img alt=\"Generated\" src={imgData} />\n                        </a>\n                    </div>\n                    <div className='share-controls'>\n                        <div className='image-share-btns'>\n                            <div className='image-share-btn'>\n                                <PinterestShareButton\n                                    url={url}\n                                    media={imgData}\n                                >\n                                    <PinterestIcon round />\n                                    <div style={{color: '#C9242E'}}>\n                                        Share on Pinterest\n                                    </div>\n                                </PinterestShareButton>\n                            </div>\n                        </div>\n                    </div>\n                </DialogContent>\n                <DialogActions className='dialog-actions'>\n                    <Button onClick={() => setImgData(null)}>Back</Button>\n                    <Button onClick={() => setOpen(false)}>Close</Button>\n                    <Button href={imgData} download={plotTitle}>Download</Button>\n                </DialogActions>\n            </>\n        )\n    };\n    return (\n        <BaseDialog setOpen={setOpen} fullScreen={fullScreen}>\n            {imgData\n                ? <DownloadDialog imgData={imgData} setImgData={setImgData} />\n                : <GenerateDialog setImgData={setImgData} />\n            }\n        </BaseDialog>\n    )\n}\n\nexport const ImageDialog = (props) => {\n    const plotType = useAppSelector(selectPlotType);\n    const year = useAppSelector(selectYear);\n    const items = Object.values(useAppSelector(selectCurrentDivisions));\n    return <DumbImageDialog {...props} plotType={plotType} year={year} items={items} />\n};\n\nexport const ShareDialog = ({setOpen, compareByVar, xAxisLabel, yAxisLabel}) => {\n    const url = window.location.href;\n    const plotType = useAppSelector(selectPlotType);\n    const year = useAppSelector(selectYear);\n    const plotTitle = createPlotTitle(plotType, year, compareByVar, xAxisLabel, yAxisLabel);\n    return (\n        <BaseDialog setOpen={setOpen}>\n            <>\n                <div className='dialog-header'>\n                    <div className='dialog-title'>Share</div>\n                </div>\n                <DialogContent className='dialog-content'>\n                    <div className='social-btns'>\n                        <FacebookShareButton\n                            url={url}\n                            quote={plotTitle}\n                        >\n                            <FacebookIcon round />\n                        </FacebookShareButton>\n                        <TwitterShareButton\n                            url={url}\n                            title={plotTitle}\n                        >\n                            <TwitterIcon round />\n                        </TwitterShareButton>\n                        <RedditShareButton\n                            url={url}\n                            title={plotTitle}\n                        >\n                            <RedditIcon round />\n                        </RedditShareButton>\n                        <LinkedinShareButton url={url}>\n                            <LinkedinIcon round />\n                        </LinkedinShareButton>\n                    </div>\n                    <div style={{display: 'flex'}}>\n                        <TextField value={url} />\n                        <CopyToClipboard onCopy={() => {}} text={url}>\n                            <IconButton aria-label=\"copy\"\n                                        className='copy-btn'\n                                        title='Copy to clipboard'>\n                                <FileCopyOutlinedIcon />\n                            </IconButton>\n                        </CopyToClipboard>\n                    </div>\n                </DialogContent>\n            </>\n        </BaseDialog>\n    );\n}\n","import React from 'react';\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport { setYear, selectYear } from './yearSlice';\nimport {Box, Slider} from \"@mui/material\";\nimport {styled} from \"@mui/system\";\nimport {selectPlotType} from \"../plotType/plotTypeSlice\";\nimport {last} from 'ramda';\nimport {selectYears} from \"../../dashboard/selectors\";\n\nconst PrettoSlider = styled(Slider)({\n    color: '#318Cf6',\n    height: 8,\n    '& .MuiSlider-track': {\n        border: 'none',\n    },\n    '& .MuiSlider-thumb': {\n        height: 24,\n        width: 24,\n        backgroundColor: '#fff',\n        border: '2px solid currentColor',\n        '&:focus, &:hover, &.Mui-active, &.Mui-focusVisible': {\n            boxShadow: 'inherit',\n        },\n        '&:before': {\n            display: 'none',\n        },\n    },\n    '& .MuiSlider-valueLabel': {\n        lineHeight: 1.2,\n        fontSize: 12,\n        background: 'unset',\n        padding: 0,\n        width: 32,\n        height: 32,\n        borderRadius: '50% 50% 50% 0',\n        backgroundColor: '#318Cf6',\n        transformOrigin: 'bottom left',\n        transform: 'translate(50%, -100%) rotate(-45deg) scale(0)',\n        '&:before': { display: 'none' },\n        '&.MuiSlider-valueLabelOpen': {\n            transform: 'translate(50%, -100%) rotate(-45deg) scale(1)',\n        },\n        '& > *': {\n            transform: 'rotate(45deg)',\n        },\n    },\n    '& .Mui-disabled .MuiSlider-valueLabel': {\n        display: 'none'\n    }\n});\n\nconst YearSlider = () => {\n    const year = useAppSelector(selectYear);\n    const plotType = useAppSelector(selectPlotType);\n    const years = useAppSelector(selectYears);\n    const dispatch = useAppDispatch();\n\n    return plotType && years && year && (\n        <Box sx={{\n            flex: '1 1'\n        }}>\n            <PrettoSlider\n                defaultValue={last(years)}\n                min={years[0]}\n                max={last(years)}\n                step={1}\n                disabled={plotType.name === 'line'}\n                valueLabelDisplay=\"on\"\n                onChange={(event, y: number) => {\n                    if (year !== y) {\n                        dispatch(setYear(y))\n                    }\n                }}\n                sx={{\n                    paddingTop: '20px',\n                    '& .MuiSlider-markLabel': {\n                        top: '40px'\n                    }\n                }}\n            />\n        </Box>\n    );\n}\n\nexport default YearSlider;\n","import {ToggleButton, ToggleButtonGroup} from \"@mui/lab\";\nimport {PLOT_TYPES} from \"../../dashboard/config\";\nimport React from \"react\";\nimport {useAppDispatch, useAppSelector} from \"../../app/hooks\";\nimport {selectPlotType, setPlotType} from \"./plotTypeSlice\";\n\n\nconst PlotTypeSelect = () => {\n    const plotType = useAppSelector(selectPlotType);\n    const dispatch = useAppDispatch();\n\n\n    const changePlotType = (event, name) => {\n        dispatch(setPlotType(name));\n    }\n\n    return (\n        <div className='plot-type'>\n            <ToggleButtonGroup size='small'\n                               value={plotType.name}\n                               exclusive\n                               onChange={changePlotType}>\n                {PLOT_TYPES.map((pt) => (\n                    <ToggleButton key={pt.name} value={pt.name}>\n                        {<pt.icon/>}\n                    </ToggleButton>\n                ))}\n            </ToggleButtonGroup>\n        </div>\n    );\n};\n\nexport default PlotTypeSelect;\n","import PlotTypeSelect from \"../plotType/PlotTypeSelect\";\nimport {\n    Autocomplete,\n    FormControl,\n    InputLabel,\n    NativeSelect,\n    TextField\n} from \"@mui/material\";\nimport React from \"react\";\nimport {useAppDispatch, useAppSelector} from \"../../app/hooks\";\nimport {setControl} from \"./controlsSlice\";\nimport {selectPlotType} from \"../plotType/plotTypeSlice\";\nimport {selectAreas, selectNumericFields} from \"../data/dataSlice\";\nimport {selectControlFields} from \"../../dashboard/selectors\";\nimport {allValuesNotNull} from \"../../dashboard/utils/domain\";\n\nconst Controls = () => {\n    const plotType = useAppSelector(selectPlotType);\n    const controls = useAppSelector(selectControlFields);\n    const controlsIsReady = allValuesNotNull(controls);\n    const numericFields = useAppSelector(selectNumericFields);\n    const areas = useAppSelector(selectAreas);\n    const dispatch = useAppDispatch();\n\n    const updateState = (newState: {[key: string]: string}) => {\n        const s = {\n            key: Object.keys(newState)[0],\n            value: Object.values(newState)[0]\n        };\n        return dispatch(setControl(s))\n    };\n\n    return controlsIsReady && (\n        <div className='controls'>\n            <PlotTypeSelect />\n            <Autocomplete\n                id=\"area\"\n                className=\"form-control\"\n                options={Object.keys(areas)}\n                value={controls.area.id}\n                getOptionLabel={(option) => areas[option].name}\n                renderInput={(params) =>\n                    <TextField variant=\"standard\" label='Area' {...params} />}\n            />\n            <FormControl className=\"form-control\">\n                <InputLabel variant=\"standard\" htmlFor=\"compare-by\">Compare by</InputLabel>\n                <NativeSelect id=\"compare-by\" value={controls.compare.id}\n                              onChange={(event) =>\n                                  updateState({compare: event.target.value})}\n                >\n                    <optgroup label='Area'>\n                        <option value='state'>State</option>\n                        <option>County</option>\n                        <option disabled={true}>Place</option>\n                    </optgroup>\n                    <optgroup label='Demographics'>\n                        <option>Sex</option>\n                        <option>Race</option>\n                        <option>Age</option>\n                    </optgroup>\n                </NativeSelect>\n            </FormControl>\n            <FormControl className=\"form-control\"\n                         disabled={!plotType.fields.x}>\n                <InputLabel variant=\"standard\" htmlFor=\"x-axis\">{plotType.fields.x || 'X-Axis'}</InputLabel>\n                <NativeSelect id=\"x-axis\" value={controls.x.id}\n                              onChange={(event) =>\n                                  updateState({x: event.target.value})}\n                >\n                    {numericFields.map(f => (\n                        <option key={f.id} value={f.id}>{f.name}</option>\n                    ))}\n                </NativeSelect>\n            </FormControl>\n            <FormControl className=\"form-control\"\n                         disabled={!plotType.fields.y}>\n                <InputLabel variant=\"standard\" htmlFor=\"y-axis\">{plotType.fields.y || 'Y-Axis'}</InputLabel>\n                <NativeSelect id=\"y-axis\" value={controls.y.id}\n                              onChange={(event) =>\n                                  updateState({y: event.target.value})}\n                >\n                    {numericFields.map(f => (\n                        <option key={f.id} value={f.id}>{f.name}</option>\n                    ))}\n                </NativeSelect>\n            </FormControl>\n            <FormControl className=\"form-control\"\n                         disabled={!plotType.fields.z}>\n                <InputLabel variant=\"standard\" htmlFor=\"size\">{plotType.fields.z || 'Size'}</InputLabel>\n                <NativeSelect id=\"z\" value={controls.z.id}\n                              onChange={(event) =>\n                                  updateState({z: event.target.value})}\n                >\n                    {numericFields.map(f => (\n                        <option key={f.id} value={f.id}>{f.name}</option>\n                    ))}\n                </NativeSelect>\n            </FormControl>\n        </div>\n    );\n};\n\nexport default Controls;\n","import {getUrlParams} from \"../../utils\";\nimport axios from 'axios';\n\nexport type Params = Map<string, any>\n\nexport type DataSplittingConfig = {\n    paramsToChunkUrls: (params: Params) => string[],\n    onChunkFetch: (chunk: any) => void\n}\n\nexport const MASTER_CHUNK_FILENAME = 'master.json';\nexport const CHUNK_DIR = \"public/data\";\nconst BASE_CHUNK_URL = \"/data\";\n\nexport const computeChunkUrl = (level: string, feature: string) : string => {\n    return 'values.json';\n};\n\nexport class SplittingDataFetcher {\n    private config: DataSplittingConfig;\n\n    constructor(config: DataSplittingConfig) {\n        this.config = config;\n    }\n\n    private _computeChunkUrls = () : string[] => {\n        const urlParams = getUrlParams();\n        return this.config.paramsToChunkUrls(urlParams)\n            .map(u => BASE_CHUNK_URL + '/' + u);\n    };\n\n    private _fetchChunks = (urls: string[]) => {\n        axios.all(urls.map(url => axios.get(url)))\n            .then(axios.spread((...responses) =>\n                responses.map(r => this.config.onChunkFetch(r.data))\n            ));\n    };\n\n    fetchChunks = () => this._fetchChunks(this._computeChunkUrls());\n}\n\n","import React from 'react';\nimport {\n    computeChunkUrl,\n    SplittingDataFetcher,\n    MASTER_CHUNK_FILENAME\n} from \"../../dashboard/utils/dataSplitting\";\nimport {useAppDispatch, useAppSelector} from \"../../app/hooks\";\nimport {selectData, setData} from \"./dataSlice\";\n\nconst DataManager = () => {\n    const data = useAppSelector(selectData);\n    const dispatch = useAppDispatch();\n\n    React.useEffect(() => {\n        const paramsToChunkUrls = (params) : string[] => {\n            return [\n                MASTER_CHUNK_FILENAME,\n                computeChunkUrl('', '')\n            ];\n        };\n\n        const onChunkFetch = (chunk: any): void => {\n            dispatch(setData(chunk));\n        };\n\n        const dataSplitter = new SplittingDataFetcher({\n            paramsToChunkUrls,\n            onChunkFetch\n        });\n         dataSplitter.fetchChunks();\n    }, [dispatch]);\n\n    return null;\n}\n\nexport default DataManager;\n","import React from 'react';\nimport {\n    createEnumParam,\n    NumberParam,\n    StringParam,\n    useQueryParams\n} from \"use-query-params\";\nimport {useAppDispatch, useAppSelector} from \"../app/hooks\";\nimport {selectControlFields} from \"./selectors\";\nimport {selectYear, setYear} from \"../features/year/yearSlice\";\nimport {map, filter, pickBy} from 'ramda';\nimport {selectPlotType, setPlotType} from \"../features/plotType/plotTypeSlice\";\nimport {setControls} from \"../features/controls/controlsSlice\";\nimport {allValuesNotNull} from \"./utils/domain\";\n\nconst Url = () => {\n    const controls = useAppSelector(selectControlFields);\n    const storedYear = useAppSelector(selectYear);\n    const plotType = useAppSelector(selectPlotType);\n    const dispatch = useAppDispatch();\n\n    const [query, setQuery] = useQueryParams({\n        x: StringParam,\n        y: StringParam,\n        z: StringParam,\n        compare: StringParam,\n        plot: createEnumParam(['line', 'bubble', 'bar', 'map']),\n        year: NumberParam\n    });\n\n    React.useEffect(() => {\n        const { x, y, z, compare, plot, year } = query;\n        const nonNullControls = filter(v => !!v, {x, y, z, compare});\n        dispatch(setControls(nonNullControls));\n        dispatch(setPlotType(plot));\n        dispatch(setYear(year));\n    }, [dispatch]);  // Only run 1st time, so query isn't a dependency\n\n    React.useEffect(() => {\n        if (allValuesNotNull(controls)) {\n            const urlFields = pickBy((v, k) => k !== 'area', controls);\n            const allParams = {\n                plot: plotType ? plotType.name : null,\n                ...map(f => f ? f.id : null, urlFields),\n                year: storedYear\n            };\n            const params = filter(p => !!p, allParams);\n            setQuery(params, 'pushIn');\n        }\n    }, [dispatch, query, setQuery, controls, storedYear, plotType]);\n\n    return null;\n};\n\nexport default Url;\n","import React from 'react';\nimport {Router, Link, Redirect, globalHistory} from \"@reach/router\"\nimport { Provider } from 'react-redux';\nimport { store } from '../app/store';\nimport {\n    AppBar,\n    Box,\n    Card,\n    CircularProgress,\n    Collapse,\n    CssBaseline,\n    Divider,\n    Drawer,\n    Hidden,\n    IconButton,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    ThemeProvider,\n    Toolbar,\n    Typography,\n    useMediaQuery\n} from '@mui/material';\nimport { createTheme } from '@mui/material/styles';\nimport BubblePlot from \"./BubblePlot\";\nimport {ParentSize} from \"@visx/responsive\";\nimport './Dashboard.scss';\nimport MenuIcon from \"@mui/icons-material/Menu\";\nimport HomeIcon from \"@mui/icons-material/Home\";\nimport DataIcon from \"@mui/icons-material/Storage\";\nimport ChartIcon from \"@mui/icons-material/InsertChart\";\nimport PlayIcon from '@mui/icons-material/PlayArrow';\nimport ShareIcon from '@mui/icons-material/Share';\nimport PhotoCameraIcon from '@mui/icons-material/PhotoCamera';\nimport ExpandLess from '@mui/icons-material/ExpandLess';\nimport ExpandMore from '@mui/icons-material/ExpandMore';\nimport {AxisLabelSource, IDashboardProps} from \"./config\";\nimport {setUseWhatChange, useWhatChanged} from '@simbathesailor/use-what-changed';\nimport MapPlot from \"./MapPlot\";\nimport LinePlot from \"./LinePlot\";\nimport BarPlot from \"./BarPlot\";\nimport {ImageDialog, ShareDialog} from \"./sharing\";\nimport YearSlider from \"../features/year/YearSlider\";\nimport {useAppDispatch, useAppSelector} from \"../app/hooks\";\nimport {selectPlotType} from \"../features/plotType/plotTypeSlice\";\nimport Controls from \"../features/controls/Controls\";\nimport DataManager from \"../features/data/DataManager\";\nimport Url from './Url';\nimport {setControl} from \"../features/controls/controlsSlice\";\nimport {selectControlFields, selectCurrentDataset} from \"./selectors\";\nimport { QueryParamProvider } from 'use-query-params';\nimport {allValuesNotNull} from \"./utils/domain\";\n\nsetUseWhatChange(process.env.NODE_ENV === 'development');\nrequire('typeface-roboto');\n\nconst LoadingPlot = ({width, height}) => (\n    <div className='loading-plot' style={{width, height}}>\n        <CircularProgress variant='indeterminate'\n                          size={Math.min(Math.round(width / 7), 80)} />\n    </div>\n);\n\nconst PlotArea = ({data, loading, plotType,\n                      axisLabels, xAxisLabel=null, yAxisLabel=null,\n                      disableInteraction = false, showLabel,\n                      x, y, sizeVar}) => {\n    const showPlot = (width: number, height: number) => {\n        if (!data)\n            return null;\n        switch (plotType.name) {\n            case 'bubble': return <BubblePlot data={data}\n                                              showLabel={showLabel}\n                                              disableInteraction={disableInteraction}\n                                              width={width}\n                                              height={height} />;\n            case 'line': return <LinePlot data={data}\n                                          showLabel={showLabel}\n                                          disableInteraction={disableInteraction}\n                                          width={width}\n                                          height={height} />;\n            case 'bar': return <BarPlot data={data}\n                                        showLabel={showLabel}\n                                        disableInteraction={disableInteraction}\n                                        width={width}\n                                        height={height} />;\n            default: return <MapPlot data={data}\n                                     showLabel={showLabel}\n                                     disableInteraction={disableInteraction}\n                                     width={width}\n                                     height={height}\n                                     yAxisVar={y} />;\n        }\n    };\n    return (\n        <ParentSize debounceTime={10} className='bg'>\n            {({ width, height }) => {\n                const fontSize = Math.min(Math.round(width / 18), 16);\n                return (width + height) > 0 && (\n                    <div className='plot' style={{width, height, fontSize}}>\n                        {loading &&\n                        <LoadingPlot width={width} height={height}/>}\n                        {showPlot(width, height)}\n                        {axisLabels && !plotType.hideAxisLabels && (\n                            <>\n                                <div className='x-axis'>\n                                    {xAxisLabel || 'Year'}\n                                </div>\n                                <div className='y-axis' style={{width: height}}>\n                                    {yAxisLabel}\n                                </div>\n                            </>\n                        )}\n                    </div>\n                )\n            }}\n        </ParentSize>\n    );\n};\n\nconst SideMenuItem = ({text, icon, children=null}) => {\n    const [open, setOpen] = React.useState(false);\n    return (\n        <>\n            <ListItem button onClick={() => setOpen(!open)}>\n                <ListItemIcon className='menu-item-icon'>{icon}</ListItemIcon>\n                <ListItemText primary={text} />\n                {children && (open ? <ExpandLess /> : <ExpandMore />)}\n            </ListItem>\n            {children && (\n                <Collapse in={open} timeout=\"auto\" unmountOnExit className='nested-menu'>\n                    {children}\n                </Collapse>\n            )}\n        </>\n    );\n};\n\nconst DumbDashboard = ({area, plotType, controls}) => {\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n    const dispatch = useAppDispatch();\n\n    React.useEffect(() => {\n        dispatch(setControl({key: 'area', value: area}));\n    }, [area, dispatch]);\n\n    const computeXAxisLabel = () : string => {\n        switch (plotType.xAxisLabelSource) {\n            case AxisLabelSource.VAR: return controls.x.name;\n            case AxisLabelSource.COMPARE: return controls.compare.name;\n            case AxisLabelSource.YEAR: return 'Year'\n            default: return null;\n        }\n    };\n\n    const xAxisLabel = computeXAxisLabel();\n    const yAxisLabel = controls.y?.name;\n\n    const theme = React.useMemo(\n        () =>\n            createTheme({\n                palette: {\n                    mode: prefersDarkMode ? 'dark' : 'light',\n                    primary: {\n                        main: prefersDarkMode ? '#175391' : '#2278CF'\n                    }\n                },\n                breakpoints: {\n                    values: {\n                        xs: 360,\n                        sm: 640,\n                        md: 960,\n                        lg: 1080,\n                        xl: 1920,\n                    },\n                }\n            }),\n        [prefersDarkMode],\n    );\n\n    const Plot = ({axisLabels, showLabel = null, disableInteraction = false}) => {\n        const data = useAppSelector(selectCurrentDataset);\n        return controls.y && (\n            <PlotArea data={data}\n                      loading={!data}\n                      plotType={plotType}\n                      axisLabels={axisLabels}\n                      disableInteraction={disableInteraction}\n                      showLabel={showLabel}\n                      x={controls.x}\n                      y={controls.y}\n                      xAxisLabel={xAxisLabel}\n                      yAxisLabel={yAxisLabel}\n                      sizeVar={controls.size}\n            />\n        );\n    };\n\n    const SideMenu = () => {\n        const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n        const [drawerOpen, setDrawerOpen] = React.useState(false);\n        const [genImgOpen, setGenImgOpen] = React.useState(false);\n        const [shareOpen, setShareOpen] = React.useState(false);\n        const [showLabel, setShowLabel] = React.useState(null);\n\n        const drawer = (\n            <div className='side-menu'>\n                <Divider />\n                <List>\n                    <Link to=\"/\">\n                        <SideMenuItem text='Statistpedia' icon={<HomeIcon />} />\n                    </Link>\n                    <SideMenuItem text='Datasets' icon={<DataIcon />} />\n                    <SideMenuItem text='Presets' icon={<ChartIcon />}>\n                        <List>\n                            <ListItem button>\n                                <ListItemText>\n                                    Home prices vs rents\n                                </ListItemText>\n                            </ListItem>\n                            <ListItem button>\n                                <ListItemText>\n                                    Income by sex\n                                </ListItemText>\n                            </ListItem>\n                        </List>\n                    </SideMenuItem>\n                </List>\n                <Divider />\n            </div>\n        );\n        return (\n            <>\n                <nav>\n                    <Hidden lgUp>\n                        <Drawer\n                            variant=\"temporary\"\n                            open={drawerOpen}\n                            onClose={() => setDrawerOpen(false)}\n                            ModalProps={{\n                                keepMounted: true, // Better open performance on mobile.\n                            }}\n                        >\n                            {drawer}\n                        </Drawer>\n                    </Hidden>\n                    <Hidden lgDown>\n                        <Drawer\n                            variant=\"permanent\"\n                            open\n                        >\n                            {drawer}\n                        </Drawer>\n                    </Hidden>\n                </nav>\n                <AppBar className='top-bar'\n                        position=\"static\"\n                        elevation={prefersDarkMode ? 0 : 1}>\n                    <Toolbar variant=\"dense\">\n                        <IconButton edge=\"start\"\n                                    sx={{\n                                        marginRight: theme.spacing(2),\n                                        display: { xs: 'block', sm: 'none' }\n                                    }}\n                                    onClick={() => setDrawerOpen(!drawerOpen)}\n                                    color=\"inherit\"\n                                    aria-label=\"menu\">\n                            <MenuIcon />\n                        </IconButton>\n                        <Typography\n                            variant=\"h6\"\n                            sx={{\n                                display: { xs: 'none', sm: 'block' }\n                            }}\n                        >\n                            Statistipedia Explore\n                        </Typography>\n                        <div className=\"grow\" />\n                        <IconButton className='menu-btn'\n                                    onClick={() => setGenImgOpen(true)}\n                                    color=\"inherit\">\n                            <PhotoCameraIcon />\n                        </IconButton>\n                        <IconButton edge=\"end\"\n                                    className='menu-btn'\n                                    onClick={() => setShareOpen(true)}\n                                    color=\"inherit\">\n                            <ShareIcon />\n                        </IconButton>\n                    </Toolbar>\n                </AppBar>\n                {genImgOpen && <ImageDialog\n                                    setOpen={setGenImgOpen}\n                                    label={showLabel}\n                                    setLabel={setShowLabel}\n                                    compareByVar={controls.compare.name}\n                                    xAxisLabel={xAxisLabel}\n                                    yAxisLabel={yAxisLabel}\n                                    showAxisLabels={!plotType.hideAxisLabels}\n                                    plot={<Plot axisLabels={false}\n                                                disableInteraction={true}\n                                                showLabel={showLabel} />} />}\n                {shareOpen && <ShareDialog\n                                  compareByVar={controls.compare.name}\n                                  xAxisLabel={xAxisLabel}\n                                  yAxisLabel={yAxisLabel}\n                                  setOpen={setShareOpen} />}\n            </>\n        );\n    };\n\n    // useWhatChanged([data, state]);\n\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <Box sx={{\n                boxSizing: 'border-box',\n                width: '100%',\n                height: '100%',\n                display: 'flex',\n                flexDirection: 'column',\n                paddingLeft: { xs: 0, lg: '270px' }\n            }}>\n                <SideMenu />\n                <div id=\"dashboard\">\n                    <main>\n                        <div className='plot-area'>\n                            <Card className='section'>\n                                <div id='inner-plot-container'>\n                                    <Plot axisLabels={true} />\n                                </div>\n                            </Card>\n                        </div>\n                        <div className='timeline'>\n                            <IconButton className='play' disabled={plotType.name === 'line'}>\n                                <PlayIcon />\n                            </IconButton>\n                            <YearSlider />\n                        </div>\n                    </main>\n                    <aside>\n                        <Controls />\n                    </aside>\n                </div>\n            </Box>\n        </ThemeProvider>\n    );\n};\n\nconst myHistory = {\n    // eslint-disable-next-line no-restricted-globals\n    push: (location: Location) => history.pushState({}, null, location.href),\n    // eslint-disable-next-line no-restricted-globals\n    replace: (location: Location) => history.replaceState({}, null, location.href),\n};\n\nconst Dashboard = ({area}: IDashboardProps) => {\n    const plotType = useAppSelector(selectPlotType);\n    const controls = useAppSelector(selectControlFields);\n    const controlsIsReady = allValuesNotNull(controls);\n    return (\n        <>\n            {\n                controlsIsReady && plotType &&\n                <DumbDashboard area={area} plotType={plotType} controls={controls} />\n            }\n            <DataManager />\n            <QueryParamProvider history={myHistory}>\n                <Url />\n            </QueryParamProvider>\n        </>\n    );\n}\n\nconst DashboardApp = () => (\n    <Provider store={store}>\n        <Router className='router'>\n            <Redirect noThrow={true} from=\"/\" to=\"/places/us\" />\n            <Redirect noThrow={true} from=\"/places\" to=\"/places/us\" />\n            <Dashboard path=\"/places/:area\" />\n        </Router>\n    </Provider>\n)\n\nexport default DashboardApp;\n","\nexport const zipmap = (arr1 ,arr2) => arr1.reduce((p,c,i) => {\n    p[c] = arr2[i];\n    return p;\n},{});\n\nexport const getUrlParams = () : any => {\n    const url = decodeURI(window.location.href);\n    const question = url.indexOf(\"?\");\n    let hash = url.indexOf(\"#\");\n    if (hash === -1 && question === -1) return {};\n    if (hash === -1) hash = url.length;\n    const query = question === -1 || hash === question + 1 ? url.substring(hash) :\n        url.substring(question+1,hash);\n    let result = {};\n    query.split(\"&\").forEach(function(part) {\n        if (!part) return;\n        part = part.split(\"+\").join(\" \"); // replace every + with space, regexp-free version\n        const eq = part.indexOf(\"=\");\n        let key = eq>-1 ? part.substr(0,eq) : part;\n        const val = eq>-1 ? decodeURIComponent(part.substr(eq + 1)) : \"\";\n        const from = key.indexOf(\"[\");\n        if (from === -1) result[decodeURIComponent(key)] = val;\n        else {\n            const to = key.indexOf(\"]\",from);\n            const index = decodeURIComponent(key.substring(from + 1,to));\n            key = decodeURIComponent(key.substring(0, from));\n            if (!result[key]) result[key] = [];\n            if (!index) result[key].push(val);\n            else result[key][index] = val;\n        }\n    });\n    return result;\n}\n"],"sourceRoot":""}