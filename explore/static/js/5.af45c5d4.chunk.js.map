{"version":3,"sources":["dashboard/config.tsx","features/data/dataSlice.ts","features/year/yearSlice.ts","features/plotType/plotTypeSlice.ts","features/controls/controlsSlice.ts","app/store.ts","hooks/useTouchOutside.ts","dashboard/CustomTooltipWithBounds.tsx","dashboard/utils/misc.ts","app/hooks.ts","dashboard/utils/colors.ts","dashboard/icons/Compare.svg","dashboard/utils/domain.ts","dashboard/selectors.ts","hooks/useSelect.tsx","dashboard/BubblePlot.tsx","dashboard/MapPlot.tsx","dashboard/LinePlot.tsx","dashboard/BarPlot.tsx","dashboard/sharing.tsx","features/year/YearSlider.tsx","dashboard/icons.tsx","features/plotType/PlotTypeSelect.tsx","features/controls/Controls.tsx","features/data/DataManager.tsx","dashboard/Url.tsx","dashboard/Legend.tsx","dashboard/Nav.tsx","dashboard/icons/logo.svg","dashboard/Dashboard.tsx","utils.ts"],"names":["AxisLabelSource","LegendCorner","PLOT_TYPES","name","xAxisLabelSource","VAR","fields","x","y","z","YEAR","COMPARE","hideAxisLabels","PLOT_TYPES_MAP","zipObj","map","p","SHARE_SIZES","width","height","SHARE_SIZE_MAP","formatNum","minDigits","maxDigits","num","options","maximumFractionDigits","minimumFractionDigits","Number","toLocaleString","undefined","justAddCommas","curry","removeDecimals","oneDecimalPlace","dollarsAndCents","FIELD_TYPE_FORMAT_VALUES_MAP","_","Error","value","NUMERIC_FIELDS","indexBy","prop","FIELD_CFGS","type","group","COMPARE_BY_FIELD_CFGS","PLOT_PRESETS","title","params","area","level","compare","plot","augmentField","cfg","f","id","processData","data","newData","areas","byId","a","link","allIds","Object","keys","levels","compareByFields","initialState","masterData","values","topologies","byAreaAndLevel","status","dataSlice","createSlice","reducers","setData","state","action","payload","clearDataValues","actions","selectAreas","selectFields","selectCompareByFields","selectLevels","selectYears","years","selectValues","selectAllCompareByFieldDetails","createSelector","selectNumericFields","filter","includes","yearSlice","setYear","extraReducers","last","selectYear","year","plotTypeSlice","setPlotType","selectPlotType","plotType","urlParams","getUrlParams","defaultFields","loaded","controlsSlice","setControls","setLoaded","selectControlsLoaded","controls","store","configureStore","reducer","dataReducer","yearReducer","plotTypeReducer","controlsReducer","useTouchOutside","elementRef","onClick","useEffect","clickListener","event","current","contains","target","document","addEventListener","removeEventListener","withBoundingRects","initialLeft","left","initialTop","top","offsetLeft","offsetTop","rect","parentRect","children","getRects","style","otherProps","transform","useAppDispatch","useDispatch","useAppSelector","useSelector","bind","xs","flatMap","as","concat","reduceRight","allValuesNotNull","obj","every","firstAndLast","length","nestedFirstAndLast","capitalize","s","toUpperCase","slice","average","array","reduce","b","sum","DEFAULT_COLOR","h","v","HUE_PRESETS","SAT_RANGE","autoScaleColorNominal","c","nFieldValues","index","isPrioritized","n","i","autoHueScale","sStart","sStep","vStep","COMPARE_BY_COLOR_FNS","shortName","autoSatScale","COMPARE_BY_COLOR_PRIORITIES","componentToHex","hex","toString","hsvToHex","r","g","h1","Math","floor","q","t","round","hsvToRgb","rgbToHex","createKey","cbfs","k1","sk","k2","fieldToIndexMap","cbf","field","sortKeys","_getColorFromPalette","ks","getColorFromPalette","hashMap","k","createKeySet","getShortLabels","getFullLabels","fullName","iterateOverCompareGrid","fn","cbf1","cbf2","v1","v2","_defs","_rect","_rect2","_path","setupColorPalette","kahcs","forEach","kahc","color","addColorToPalette","keySets","getColor","getColorGrid","labels","rows","cols","colors","byRowAndCol","compose","scbfs","switchToAlwaysMakeLegendHorizontal","processItemValues","vs","controlFields","divisions","colorPalette","createName","cs","div","geoid","divName","abbrev","areaName","place","join","_findClearestCorner","right","y_mean","forceCorner","topLeft","max","topRight","bottomLeft","min","bottomRight","minimum","NW","corner","closestDataPoint","NE","SW","SE","chooseLegendPosition","featureRanges","_splitHalfs","pred","c1","c2","c14","c34","d","sortedData","sort","scaledY","selectControlFieldValues","cv","nfs","selectControlFields","mapObjIndexed","selectColorPalette","priorities","lowPriority","highPriority","accum","cbfi","isAccumDefault","newColors","existing","fieldValues","cbfv","vi","createColorPalette","selectCurrentDivisions","byLevel","dvsByLevel","selectTopologies","tbaal","cvs","selectArea","selectCurrentCompareDetails","cb","summaryDataForAllYears","ds","cf","cp","avs","individualDataForAllYears","selectPlotData","individualData","summaryData","individualDataIgnoringCompares","selectFeatureRanges","individualDataIgnoringComparesForAllYears","fvs","selectLegendPosition","selectPlotPresets","url","queryString","stringify","arrayFormat","isLoaded","DEFAULT_OPTIONS","selectedOpacity","unselectedOpacity","defaultOpacity","groupByKeys","keyFields","items","im","groupBy","item","tail","lookupItem","itemMap","results","lookupKeys","matchesAllKeys","keysToMatch","itemKeys","all","range","TooltipContent","FormattedValue","formatValue","className","useSelect","showLabel","disableInteraction","nKeyFields","React","useState","selectedKeys","selectKeys","useTooltip","tooltipOpen","tooltipLeft","tooltipTop","tooltipData","showTooltip","hideTooltip","select","useCallback","scaledX","deselect","getKeys","key1","Tooltip","memo","ref","useRef","defaultTooltipStyles","fontSize","padding","margin","makeSelectable","keyValues","useSpring","animOpacity","setAnim","isSelected","opacity","animate","fillOpacity","to","strokeOpacity","cloneElement","props","key","makeInteractive","callback","resolvedKeyValues","Function","onTouchStart","onMouseMove","onMouseLeave","makeSelectableAndInteractive","concreteKeys","BubblePlot","xScale","scaleLinear","domain","yScale","sizeScale","scalePower","exponent","size","animX","animY","animSize","circle","cx","cy","fill","stroke","projection","geoAlbersUsa","usMapOffset","opacityOptions","DumbMapPlot","scale","topoFeature","topojson","objects","featColl","features","colorScale","hcl","interpolate","interpolateHcl","path","geoPath","translate","bounds","tempItems","geoCentroid","AlbersUsa","feature","animColor","strokeWidth","MapPlot","lineOptions","pointOptions","LinePlot","hPadding","useMemo","vPadding","lines","lineKeys","circleSize","voronoiInstance","voronoi","findNearest","line","point","localPoint","find","LinePath","GlyphCircle","BarPlot","heightAdjustment","startAtZero","pctOfLowest","getHeightAdjustment","scaleBand","bandwidth","BaseDialog","setOpen","fullScreen","window","location","hash","onHashChange","Dialog","open","onClose","history","back","keepMounted","createPlotTitle","compares","xAxisLabel","yAxisLabel","toLowerCase","DumbImageDialog","pageInDarkMode","label","setLabel","showAxisLabels","plotTitle","defaultShareSize","sharePresetSize","setSharePresetSize","previewSize","setPreviewSize","shareSize","setShareSize","format","setFormat","imgData","setImgData","theme","useTheme","useMediaQuery","breakpoints","down","darkModeState","setDarkModeState","darkModeRef","ImagePreview","darkMode","useDarkMode","classNameDark","classNameLight","storageKey","enable","disable","canvasToPng","canvas","toDataURL","GenerateDialog","setNewSize","newSize","ratio","w","calculatePreviewSize","DialogContent","FormControl","InputLabel","variant","htmlFor","NativeSelect","onChange","getElementsByClassName","scrollTo","FormGroup","row","TextField","helperText","DialogActions","Button","el","getElementById","then","htmlToImage","getGenerateFn","canvasWidth","canvasHeight","pixelRatio","clientWidth","clientHeight","quality","zoom","dataUrl","DownloadDialog","href","download","alt","src","PinterestShareButton","media","PinterestIcon","ImageDialog","BasicShareDialog","FacebookShareButton","quote","FacebookIcon","TwitterShareButton","TwitterIcon","RedditShareButton","RedditIcon","LinkedinShareButton","LinkedinIcon","display","onCopy","text","IconButton","SharePlotDialog","PrettoSlider","styled","Slider","border","backgroundColor","boxShadow","lineHeight","background","borderRadius","transformOrigin","YearSlider","dispatch","Box","sx","flex","defaultValue","step","disabled","valueLabelDisplay","paddingTop","_extends","assign","arguments","source","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgCompare","_ref","svgRef","titleId","xmlns","viewBox","fillRule","strokeLinecap","strokeLinejoin","strokeMiterlimit","ForwardRef","makeIcon","iconSrc","SvgIcon","component","FIELD_TYPE_ICONS_MAP","PlaceIcon","CompareIconSrc","TimelapseIcon","PaidIcon","AccessTimeFilledIcon","CalendarMonthIcon","DoDisturbIcon","TagIcon","PLOT_TYPE_ICONS_MAP","BubbleChartIcon","TimelineIcon","BarChartIcon","RoomIcon","PlotTypeSelect","ToggleButtonGroup","exclusive","pt","Icon","ToggleButton","groupFields","gs","DrawerFieldSelect","body","position","Drawer","anchor","PaperProps","ModalProps","MenuFieldSelect","anchorEl","setAnchorEl","Menu","MenuListProps","role","FieldSelect","BaseFieldSelect","currentTarget","Input","Divider","MenuItem","default","selected","ListItemIcon","ListItemText","primary","secondary","description","Controls","controlsIsReady","numericFields","numericFieldGroups","compareByGroups","used","disableUsedCompares","updateState","newState","updateCompare","newNewState","CompareByFieldSelect","BasicSelect","e","DataManager","compareFields","controlsLoaded","isValueChunk","groupByFn","compareValues","mergeFeatures","featureSet","Set","allKeys","nonFeatureSet","difference","output","featureValue","onChunksFetched","valueData","processValues","otherData","arr","flatObject","property","flattenArrayOfObjects","getState","Array","from","sortCompares","computeValueChunk","_computeChunks","Promise","axios","get","responses","fcs","require","Url","storedYear","storedPlotType","updateUrl","allParams","search","replaceState","parse","nonNullControls","parseInt","bgAlphaHex","OrdinalStrip","fromColor","toColor","backgroundImage","OrdinalLabels","start","end","OrdinalLegend","NominalLegend","OrdinalByNominalLegend","colorRow","NominalByNominalLegend","cellPadding","cellSpacing","col","colorCell","OrdinalByOrdinalLegend","ls","WebkitMask","mask","bottom","Legend","LegendComponent","types","getLegendComponent","SideMenuItem","icon","ListItemButton","Collapse","in","timeout","unmountOnExit","Nav","ShareDialog","plotPresets","shareOpen","setShareOpen","drawerOpen","setDrawerOpen","drawer","List","Hidden","xlUp","xlDown","AppBar","elevation","Toolbar","edge","marginRight","xl","Typography","textDecoration","toggle","setUseWhatChange","process","LoadingPlot","CircularProgress","PlotArea","axisLabels","levelVar","DumbPlotArea","yAxisVar","loading","ParentSize","debounceTime","DumbDashboard","genImgOpen","setGenImgOpen","setShowLabel","computeXAxisLabel","Plot","Card","Dashboard","ExternalLink","SiteScreenshot","DumbHome","LogoIcon","textAlign","whiteSpace","Home","About","DashboardApp","prefersDarkMode","createTheme","palette","mode","main","sm","md","lg","ThemeProvider","CssBaseline","boxSizing","flexDirection","paddingLeft","element","zipmap","arr1","arr2","decodeURI","question","query","substring","result","split","part","eq","substr","val","decodeURIComponent","push"],"mappings":"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","file":"static/js/5.af45c5d4.chunk.js","sourcesContent":["import {zipObj, indexBy, prop, curry} from \"ramda\";\n\nexport const DATA_DIR = process.env.REACT_APP_ENV === 'production' ?\n    'https://storage.googleapis.com/statistipedia/data' : '';\n\nexport enum AxisLabelSource {\n    VAR,\n    COMPARE,\n    YEAR\n}\n\nexport type PlotType = {\n    name: string,\n    xAxisLabelSource?: AxisLabelSource,\n    hideAxisLabels?: boolean,\n    fields: {\n        x?: string,\n        y?: string,\n        z?: string\n    }\n};\n\nexport const PLOT_TYPES: PlotType[] = [{\n    name: 'bubble',\n    xAxisLabelSource: AxisLabelSource.VAR,\n    fields: {\n        x: 'X-Axis',\n        y: 'Y-Axis',\n        z: 'Size'\n    }\n}, {\n    name: 'line',  // aka. time series chart\n    xAxisLabelSource: AxisLabelSource.YEAR,\n    fields: {\n        // X-Axis is always time. Existing selection is kept, only disabled\n        y: 'Y-Axis'\n    }\n}, {\n    name: 'bar',\n    xAxisLabelSource: AxisLabelSource.COMPARE,\n    fields: {\n        // compare: 'Compare by',  // Secondary grouping nested under \"Compare by\"\n        y: 'Y-Axis'\n    }\n}, {\n    name: 'map',\n    hideAxisLabels: true,\n    fields: {\n        y: 'Color'\n    }\n}];\n\nexport const PLOT_TYPES_MAP: Map<string, PlotType> =\n    zipObj(PLOT_TYPES.map(p => p.name), PLOT_TYPES);\n\nexport type FeatureRanges = {\n    x: [number, number],\n    y: [number, number],\n    z: [number, number],\n    year: [number, number]\n};\n\nexport type ShareSize = {\n  name: string,\n  width: number,\n  height: number\n};\n\nexport const SHARE_SIZES: ShareSize[] = [{\n    name: 'Instagram Square',\n    width: 1080,\n    height: 1080\n}, {\n    name: 'Twitter',\n    width: 1024,\n    height: 512\n}, {\n    name: 'Pinterest',\n    width: 800,\n    height: 1200\n}, {\n    name: 'Tumblr',\n    width: 1280,\n    height: 1920\n}];\n\nexport const SHARE_SIZE_MAP: Map<string, ShareSize> =\n    zipObj(SHARE_SIZES.map(p => p.name), SHARE_SIZES);\n\nexport type Area = {\n    id: string\n    abbrev: string\n    name: string\n    geoid: string\n    link: string\n}\n\nexport interface IDashboardProps {\n    area?: string;\n    compare?: string[]\n}\n\nconst FIELD_TYPES = [\n    'geo',\n    'numeric',\n    'percent',\n    'dollars',\n    'minutes',\n    'hours',\n    'nominal',\n    'ordinal'\n];\n\nconst formatNum = (minDigits: number, maxDigits: number, num: number) : string => {\n    const options = {maximumFractionDigits: maxDigits, minimumFractionDigits: minDigits};\n    return Number(num).toLocaleString(undefined, options);\n};\n\nconst justAddCommas = curry(formatNum)(undefined, undefined);\nconst removeDecimals = curry(formatNum)(undefined, 0);\nconst oneDecimalPlace = curry(formatNum)(undefined, 1);\nconst twoDecimalPlaces = curry(formatNum)(undefined, 2);\nconst dollarsAndCents = curry(formatNum)(2, 2);\n\nexport const FIELD_TYPE_FORMAT_VALUES_MAP: {[name: string]: (value: any) => string} = {\n    'geo': _ => { throw new Error('Should not be asked to format value') },\n    'numeric': justAddCommas,\n    'percent': (value) => oneDecimalPlace(value) + '%',\n    'dollars': (value) => '$' + (value >= 1000 ? justAddCommas(value) : dollarsAndCents(value)),\n    'minutes': (value) => removeDecimals(value) + ' minutes',\n    'hours': (value) => removeDecimals(value) + ' hours',\n    'years': (value) => removeDecimals(value) + ' years',\n};\n\nexport type FieldType = {\n    name: string\n    formatValue: (value: any) => string\n}\n\nexport type DataField = {\n    id: string,\n    name: string,\n    description: string,\n    group: string\n    type: string\n};\n\nexport type CompareByFieldValue = {\n    shortName: string\n    fullName: string\n}\n\nexport type CompareByField = DataField & {\n    values: {[cbfvId: string]: CompareByFieldValue}\n}\n\nexport type CompareByFields = {\n    [id: string]: CompareByField\n}\n\nexport const FIELD_TYPES_MAP: {[name: string]: FieldType} =\n    indexBy(prop('name'), FIELD_TYPES);\n\nexport const NUMERIC_FIELDS = ['numeric', 'percent', 'dollars', 'minutes', 'hours', 'years'];\n\n// The processData script uses this config object,\n// so changes may not be reflected until reprocessing\nexport const FIELD_CFGS: {[id: string]: {type: string, group: string}} = {\n    'pct_total_pop': {\n        type: 'percent',\n        group: 'General'\n    },\n    'income': {\n        type: 'dollars',\n        group: 'Employment'\n    },\n    'income_per_hr': {\n        type: 'dollars',\n        group: 'Employment'\n    },\n    'work_hrs_per_wk': {\n        type: 'hours',\n        group: 'Employment'\n    },\n    'commute_time': {\n        type: 'minutes',\n        group: 'Employment'\n    },\n    'avg_age': {\n        type: 'years',\n        group: 'Demographics'\n    },\n    'wh_pct': {\n        type: 'percent',\n        group: 'Demographics'\n    },\n    'bl_pct': {\n        type: 'percent',\n        group: 'Demographics'\n    },\n    'as_pct': {\n        type: 'percent',\n        group: 'Demographics'\n    },\n    'hi_pct': {\n        type: 'percent',\n        group: 'Demographics'\n    }\n};\n\nexport type CompareByFieldCfg = {\n    type: string,\n    group: string\n}\n\nexport const COMPARE_BY_FIELD_CFGS: {[id: string]: CompareByFieldCfg} = {\n    'sex': {\n        type: 'nominal',\n        group: 'Demographic'\n    },\n    'age': {\n        type: 'ordinal',\n        group: 'Demographic'\n    },\n    'race': {\n        type: 'nominal',\n        group: 'Demographic'\n    },\n    'marital': {\n        type: 'nominal',\n        group: 'Demographic'\n    },\n    'education': {\n        type: 'nominal',\n        group: 'Demographic'\n    }\n}\n\nexport type DataValue = any & {\n    geoid: string\n    year: number\n}\n\nexport type DerivedDataValueSet = any & {\n    geoid: string\n    name: string\n    year: number\n    x: number\n    y: number\n    z: number\n}\n\nexport type ApiData = {\n    areas: {[id: string]: Area},\n    levels: {[id: string]: DataField},\n    fields: {[id: string]: DataField},\n    compareByFields: CompareByFields,\n    years: number[],\n    divisions: { byLevel: {[levelId: string]: any[]} }\n    values: DerivedDataValueSet[]\n    topologies: { byAreaAndLevel: {[areaId: string]: {[levelId: string]: any}}}\n}\n\nexport type Data = {\n    areas: { byId: {[id: string]: Area}, allIds: string[]}\n    levels: { byId: {[id: string]: DataField}, allIds: string[]}\n    fields: { byId: {[id: string]: DataField}, allIds: string[]}\n    compareByFields: { byId: CompareByFields, allIds: string[]}\n    years: number[],\n    divisions: { byLevel: {[levelId: string]: any[]} }\n    values: DerivedDataValueSet[]\n    topologies: { byAreaAndLevel: {[areaId: string]: {[levelId: string]: any}}}\n}\n\nexport interface ControlValues {\n    area: string,\n    level: string,\n    compare: string[],\n    x: string,\n    y: string,\n    z: string\n}\n\nexport type UrlParams = {\n    level?: string\n    area?: string\n    compare?: string[]\n    plot?: string\n    x?: string\n    y?: string\n    z?: string\n}\n\nexport const getOgImageUrl = (params: IDashboardProps) : string => {\n    return '';\n};\n\ntype PlotPresetCfg = {\n    title: string\n    params: UrlParams\n}\n\nexport type PlotPreset = {\n    title: string\n    area: Area\n    url: string\n}\n\nexport const PLOT_PRESETS: PlotPresetCfg[] = [{\n    title: 'Hourly income by sex / marital status',\n    params: {\n        area: 'us',\n        level: 'state',\n        compare: ['sex', 'marital'],\n        plot: 'bubble',\n        x: 'work_hrs_per_wk',\n        y: 'income_per_hr'\n    }\n}, {\n    title: 'Hourly income by education',\n    params: {\n        area: 'us',\n        level: 'state',\n        compare: ['education'],\n        plot: 'bar',\n        x: 'work_hrs_per_wk',\n        y: 'income_per_hr'\n    }\n}, {\n    title: 'NY county populations',\n    params: {\n        area: 'ny',\n        level: 'county',\n        plot: 'map',\n        y: 'pct_total_pop'\n    }\n}];\n\nexport enum LegendCorner {\n    NW = 'nw',\n    NE = 'ne',\n    SW = 'sw',\n    SE = 'se'\n}\n\nexport type LegendPosition = {\n    corner: LegendCorner\n    closestDataPoint: number\n}\n\nexport const BOTTOM_DRAWER_HEIGHT = 320;\nexport const BOTTOM_DRAWER_CORNER = 4;\nexport const PCT_V_SPACE_LEFT_FOR_LEGEND = 1/3;\n","import {createSelector, createSlice, PayloadAction} from '@reduxjs/toolkit';\nimport {RootState} from '../../app/store';\nimport {\n    ApiData, Area, COMPARE_BY_FIELD_CFGS, CompareByField, CompareByFields,\n    Data,\n    DataField, DerivedDataValueSet,\n    FIELD_CFGS,\n    NUMERIC_FIELDS\n} from \"../../dashboard/config\";\nimport {map, zipObj} from 'ramda';\nimport masterData from '../../dashboard/data/master.json'\n\nexport interface DataState {\n    value: Data,\n    status: 'idle' | 'loading' | 'failed';\n}\n\nconst augmentField = (cfg: {[id: string]: any}, f: DataField) : DataField =>\n    ({...f, ...cfg[f.id]});\n\n/**\n * Takes (partial) incoming API data and formats it for Redux store\n */\nconst processData = (data: ApiData) : Data => {\n    // @ts-ignore\n    const newData: Data = {...data};\n    if (!!data.areas) {\n        newData['areas'] = {\n            byId: map((a: Area) => ({\n                ...a,\n                link: `/places/us${a.id === 'us' ? '' : '/' + a.id}`\n            }), data.areas),\n            allIds: Object.keys(data.areas)\n        }\n    }\n    if (!!data.levels) {\n        newData['levels'] = {\n            byId: data.levels,\n            allIds: Object.keys(data.levels)\n        }\n    }\n    if (!!data.fields) {\n        newData['fields'] = {\n            byId: map(f => augmentField(FIELD_CFGS, f), data.fields),\n            allIds: Object.keys(FIELD_CFGS)\n        }\n    }\n    if (!!data.compareByFields) {\n        newData['compareByFields'] = {\n            byId: map(f => augmentField(COMPARE_BY_FIELD_CFGS, f), data.compareByFields),\n            allIds: Object.keys(data.compareByFields)\n        }\n    }\n    return newData;\n};\n\nconst initialState: DataState = {\n    value: {\n        // @ts-ignore\n        ...processData(masterData),\n        values: [],\n        topologies: {byAreaAndLevel: {}}\n    },\n    status: 'idle',\n};\n\nexport const dataSlice = createSlice({\n    name: 'data',\n    initialState,\n    reducers: {\n        setData: (state, action: PayloadAction<any>) => {\n            const newData = processData(action.payload);\n            state.value.values = [];\n            state.value = {...state.value, ...newData};\n        },\n        clearDataValues: (state) => {\n            state.value.values = [];\n        }\n    }\n});\n\nexport const { setData, clearDataValues } = dataSlice.actions;\nexport const selectData = (state: RootState) => state.data.value;\nexport const selectAreas = (state: RootState) => state.data.value?.areas;\nexport const selectFields = (state: RootState) => state.data.value?.fields;\nexport const selectCompareByFields = (state: RootState) :\n    {byId: CompareByFields, allIds: string[]} => state.data.value?.compareByFields;\nexport const selectLevels = (state: RootState) => state.data.value?.levels;\nexport const selectTopologiesByAreaAndLevel = (state: RootState) =>\n    state.data.value?.topologies.byAreaAndLevel;\nexport const selectYears = (state: RootState) => state.data.value?.years;\nexport const selectDivisionsByLevel = (state: RootState) =>\n    state.data.value?.divisions.byLevel;\nexport const selectValues = (state: RootState) : DerivedDataValueSet[] =>\n    state.data.value?.values;\n\nexport const selectAllCompareByFieldDetails = createSelector(\n    selectCompareByFields,\n    (compareByFields) : CompareByField[] => {\n        return compareByFields ? compareByFields.allIds\n            .map(id => compareByFields.byId[id])\n            : null\n    }\n);\n\nexport const selectNumericFields = createSelector(\n    selectFields,\n    (fields) : DataField[] => {\n        return fields ? fields.allIds\n            .map(id => fields.byId[id])\n            .filter(f => NUMERIC_FIELDS.includes(f.type)\n            ) : null\n    }\n);\n\nexport const selectGeoDivisionFields = createSelector(\n    selectLevels,\n    (levels) : DataField[] => {\n        return Object.values(levels.byId).map(level => ({\n            ...level,\n            group: 'Geographic',\n            type: 'geo'\n        }))\n    }\n);\n\nexport default dataSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport {last} from 'ramda';\nimport { RootState } from '../../app/store';\nimport {dataSlice} from \"../data/dataSlice\";\nimport {Data} from \"../../dashboard/config\";\n\nexport interface YearState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: YearState = {\n  value: 2019,\n  status: 'idle',\n};\n\nexport const yearSlice = createSlice({\n  name: 'year',\n  initialState,\n  reducers: {\n    setYear: (state, action: PayloadAction<number>) => {\n      const value = action.payload;\n      if (value != null /* && value !== state.value */) {\n          state.value = value;\n      }\n    }\n  },\n  extraReducers: {\n    // @ts-ignore\n    [dataSlice.actions.setData]: (state, action: PayloadAction<Data>) => {\n      const data = action.payload;\n      // TODO: I'd like to use the state but it's not set in the store yet.\n      // TODO: Also selectors cannot be run from reducers?\n      // TODO: That'd be the preferred way wouldn't it?\n      if (data.years) {\n        state.value = last(data.years);\n      }\n    }\n  }\n});\n\nexport const { setYear } = yearSlice.actions;\nexport const selectYear = (state: RootState) => state.year.value;\nexport default yearSlice.reducer;\n","import {PLOT_TYPES_MAP} from \"../../dashboard/config\";\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\n\nexport interface PlotTypeState {\n    value: string;\n    status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: PlotTypeState = {\n    value: 'map',\n    status: 'idle',\n};\n\nexport const plotTypeSlice = createSlice({\n    name: 'plotType',\n    initialState,\n    // The `reducers` field lets us define reducers and generate associated actions\n    reducers: {\n        // Use the PayloadAction type to declare the contents of `action.payload`\n        setPlotType: (state, action: PayloadAction<string>) => {\n            const value = action.payload;\n            if (value != null && value !== '' /* && state.value !== value */)\n                state.value = value;\n        },\n    }\n});\n\nexport const { setPlotType } = plotTypeSlice.actions;\nexport const selectPlotType = (state: RootState) => PLOT_TYPES_MAP[state.plotType.value];\nexport default plotTypeSlice.reducer;\n","import {createSlice, PayloadAction} from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport {getUrlParams} from \"../../utils\";\nimport masterData from '../../dashboard/data/master.json';\nimport {ControlValues} from \"../../dashboard/config\";\n\nexport interface ControlsState {\n    value: ControlValues,\n    loaded: boolean\n}\n\nconst urlParams = getUrlParams();\nconst defaultFields = Object.keys(masterData.fields);\n\nconst initialState: ControlsState = {\n    value: {\n        area: \"us\",\n        compare: [],\n        level: \"state\",\n        x: urlParams.x || defaultFields[0],\n        y: urlParams.y || defaultFields[1],\n        z: \"pct_total_pop\"\n    },\n    loaded: false\n};\n\nexport const controlsSlice = createSlice({\n    name: 'controls',\n    initialState,\n    // The `reducers` field lets us define reducers and generate associated actions\n    reducers: {\n        setControls: (state, action: PayloadAction<Object>) => {\n            state.value = {...state.value, ...action.payload};\n        },\n        setLoaded: (state) => {\n            state.loaded = true;\n        }\n    }\n});\n\nexport const { setControls, setLoaded } = controlsSlice.actions;\n\nexport const selectActualControlValues = (state: RootState) : ControlValues =>\n    state.controls.value;\n\nexport const selectControlsLoaded = (state: RootState) : boolean =>\n    state.controls.loaded;\n\nexport default controlsSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport yearReducer from '../features/year/yearSlice';\nimport plotTypeReducer from '../features/plotType/plotTypeSlice';\nimport dataReducer from '../features/data/dataSlice';\nimport controlsReducer from '../features/controls/controlsSlice';\n\nexport const store = configureStore({\n  reducer: {\n    data: dataReducer,\n    year: yearReducer,\n    plotType: plotTypeReducer,\n    controls: controlsReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import { useEffect } from \"react\"\n\nconst useTouchOutside = (elementRef, onClick) => {\n    useEffect(() => {\n        const clickListener = event => {\n            if (!elementRef.current || elementRef.current.contains(event.target)) {\n                return\n            }\n            onClick(event)\n        }\n        // const moveListener = event => {\n        //     if (!elementRef.current || elementRef.current.contains(event.target)) {\n        //         return\n        //     }\n        //     onMove(event);\n        // }\n        document.addEventListener(\"touchstart\", clickListener)\n        // document.addEventListener(\"mousemove\", moveListener)\n        return () => {\n            document.removeEventListener(\"touchstart\", clickListener)\n            // document.removeEventListener(\"mousemove\", moveListener)\n        }\n    }, [elementRef, onClick])\n}\n\nexport default useTouchOutside\n","import React from 'react';\nimport { Tooltip } from '@visx/tooltip';\nimport { withBoundingRects } from '@visx/bounds';\n\nfunction CustomTooltipWithBounds({\n                                     left: initialLeft,\n                                     top: initialTop,\n                                     offsetLeft = 20,\n                                     offsetTop = 20,\n                                     rect,\n                                     parentRect,\n                                     getRects,\n                                     children,\n                                     style,\n                                     ...otherProps\n                                 }) {\n\n    let left = initialLeft;\n    let top = initialTop;\n\n    if (parentRect) {\n        if (parentRect.width > 0) {\n            if (left + offsetLeft + rect.width > parentRect.width) {\n                left = parentRect.width - rect.width - offsetLeft;\n            }\n            if (left < 0) {\n                left = 0;\n            }\n        }\n\n        if (parentRect.height > 0) {\n            if (top + offsetTop + rect.height > parentRect.height) {\n                top = parentRect.height - rect.height - offsetTop;\n            }\n            if (top < 0) {\n                top = 0;\n            }\n        }\n    }\n\n    return (\n        <Tooltip\n            style={{ top: 0, transform: `translate(${left}px, ${top}px)`, ...style }}\n            {...otherProps}\n        >\n            {children}\n        </Tooltip>\n    );\n}\nexport default withBoundingRects(CustomTooltipWithBounds);\n","import {intersection, reduce, tail} from 'ramda';\n\n// bind ::  [a] -> (a -> [b]) -> [b]\nconst bind = xs => f => xs.flatMap(f);\n\n// foldr :: (a -> b -> b) -> b -> [a] -> b\nconst foldr = f => a => xs =>\n    xs.reduceRight((a, x) => f(x)(a), a);\n\nexport const cartProdN = foldr(\n    xs => as =>\n        bind(as)(\n            x => bind(xs)(\n                a => [\n                    [a].concat(x)\n                ]\n            )\n        )\n)([\n    []\n]);\n\n// TODO: Are these (above and below) the same?\n\nexport function cartProduct<T>(...sets: T[][]) : T[][] {\n    return sets.reduce((acc: T[][], set: T[]) =>\n            acc.flatMap((x) => set.map(y => [...x, y])),\n        [[]]);\n}\n\nexport const intersectAll = (xs) => reduce(intersection, xs[0], tail(xs));\n\nexport const allValuesNotNull = (obj: Object) : boolean =>\n    Object.values(obj).every(f => f != null);\n\nexport const flattenArrayOfObjects = (arr: Object[]) : Object => {\n    const flatObject = {};\n    for(let i = 0; i < arr.length; i++) {\n        for(const property in arr[i]){\n            flatObject[`${property}`] = arr[i][property];\n        }\n    }\n    return flatObject;\n};\n\nexport function firstAndLast<T>(values: T[]) : T[] {\n    return [values[0], values[values.length - 1]];\n}\n\nexport function nestedFirstAndLast<T>(values: T[][]) : T[][] {\n    return values.map(firstAndLast);\n}\n\nexport function capitalize(s: string) : string {\n    return s[0].toUpperCase() + s.slice(1);\n}\n\nexport const sum = (array) => array.reduce((a, b) => a + b);\nexport const average = (array) => sum(array) / array.length;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import {\n    CompareByField,\n    CompareByFields,\n    CompareByFieldValue\n} from \"../config\";\nimport {firstAndLast, nestedFirstAndLast} from \"./misc\";\nimport {curry, compose, zipObj} from 'ramda';\n\ntype ColorHsv = {\n    h: number,\n    s: number,\n    v: number\n}\n\nconst DEFAULT_COLOR: ColorHsv = {h: 214, s: 0.8, v: 1};\n\nconst HUE_PRESETS = [\n    210,\n    350,\n    32,\n    285,\n    160\n];\n\nconst SAT_RANGE = [0.3, 1];\n\n// Generates a single color for a compare feature value\ntype ColorFn = (inputColor: ColorHsv,\n                value: CompareByFieldValue,\n                nFieldValues: number,\n                valueIndex: number,\n                isPrioritized: boolean) => ColorHsv\n\nexport const autoHueScale = (c: ColorHsv, n: number, i: number) : ColorHsv  => {\n    return {...c, h: HUE_PRESETS[i]};\n};\n\nexport const autoSatScale = (c: ColorHsv, n: number, i: number) : ColorHsv  => {\n    const s = ((SAT_RANGE[1] - SAT_RANGE[0]) / n) * i + SAT_RANGE[0];\n    return {...c, s, v: s >= 1/2 ? 1 - s/3 : 1 };\n};\n\nexport const autoScaleColorNominal = (\n    c, value, nFieldValues, index, isPrioritized\n) : ColorHsv => {\n    if (isPrioritized) {\n        return autoHueScale(c, nFieldValues, index);\n    } else {\n        // Assume ascending order\n        const sStart = SAT_RANGE[0];\n        const sEnd = 1;\n        const vStart = 1;\n        const vEnd = 0.5;\n        const sStep = (sEnd - sStart) / nFieldValues;\n        const vStep = (vEnd - vStart) / nFieldValues;\n        return {...c, s: sStart + sStep * index, v: vStart + vStep * index};\n    }\n};\n\nexport const autoScaleColorOrdinal = (\n    c, value, nFieldValues, index, isPrioritized\n) : ColorHsv => {\n    return autoSatScale(c, nFieldValues, index);\n};\n\nconst COMPARE_BY_COLOR_FNS: {[id: string]: ColorFn} = {  // Listed in priority order\n    'sex':  (c, value) =>\n        ({...c, h: value.shortName === 'M' ? 210 : 330}),\n    'race': autoScaleColorNominal,\n    'marital': autoScaleColorNominal,\n    'education': autoScaleColorNominal,\n    'age': autoScaleColorOrdinal,\n};\n\nconst COMPARE_BY_COLOR_PRIORITIES : {[key: string]: number} = {\n    'sex': 1,\n    'race': 2,\n    'marital': 2,\n    'education': 2,\n    'age': 3\n};\n\nfunction hsvToRgb(h, s, v) {\n    let r, g, b;\n    const h1 = h / 360;  // Convert hue to a value between 0 and 1\n    const i = Math.floor(h1 * 6);\n    const f = h1 * 6 - i;\n    const p = v * (1 - s);\n    const q = v * (1 - f * s);\n    const t = v * (1 - (1 - f) * s);\n    switch (i % 6) {\n        case 0: r = v; g = t; b = p; break;\n        case 1: r = q; g = v; b = p; break;\n        case 2: r = p; g = v; b = t; break;\n        case 3: r = p; g = q; b = v; break;\n        case 4: r = t; g = p; b = v; break;\n        case 5: r = v; g = p; b = q; break;\n    }\n    return [ r * 255, g * 255, b * 255 ].map(x => Math.round(x));\n}\n\nfunction componentToHex(c) {\n    // @ts-ignore\n    const hex = c.toString(16);\n    return hex.length === 1 ? \"0\" + hex : hex;\n}\n\nfunction rgbToHex(r, g, b) {\n    return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n}\n\nexport const hsvToHex = (h, s, v) : string => {\n    const [r, g, b] = hsvToRgb(h, s, v);\n    return rgbToHex(r, g, b);\n};\n\ntype FieldValueKey = {\n    field: string\n    value: string\n}\n\ntype ColorKeySet = {\n    k1?: FieldValueKey\n    k2?: FieldValueKey\n}\n\ntype KeysAndHsvColor = {\n    keys: ColorKeySet\n    color: ColorHsv\n}\n\ntype ColorPaletteHashMap = { [key: string]: string }\n\nexport type ColorPalette = {\n    hashMap: ColorPaletteHashMap\n    labels: {\n        rows: string[],\n        cols: string[]\n    },\n    colors: {\n        byRowAndCol: string[][]\n    }\n}\n\nconst sortKeys = (cbfs: CompareByField[], keys: ColorKeySet) : ColorKeySet => {\n    if (keys.k2) {  // If it has 2 keys (0 or 1 and the order doesn't matter)\n        const fieldToIndexMap = zipObj(\n            cbfs.map((cbf) => cbf.id),\n            cbfs.map((_, i) => i)\n        );\n        if (fieldToIndexMap[keys.k1.field] > fieldToIndexMap[keys.k2.field]) {\n            return { k1: keys.k2, k2: keys.k1 };  // Switch order\n        }\n    }\n    return keys;  // Just return original order\n};\n\nconst createKey = (cbfs: CompareByField[], keys: ColorKeySet) : string => {\n    if (!keys.k1) {\n        return ''\n    } else {\n        const sk = sortKeys(cbfs, keys);\n        return sk.k1.field + '=' + sk.k1.value +\n        (sk.k2 ? (';' + sk.k2.field + '=' + sk.k2.value) : '')\n    }\n}\n\nconst addColorToPalette = (p: ColorPaletteHashMap,\n                           cbfs: CompareByField[],\n                           keys: ColorKeySet, color: string) => {\n    p[createKey(cbfs, keys)] = color;\n}\n\nconst createKeySet = (compareByFields: CompareByField[],\n                      value: Object) : ColorKeySet => {\n    const cbfs = Object.values(compareByFields);\n    if (cbfs.length === 0) {\n        return {};\n    }\n    const k = { k1: { field: cbfs[0].id, value: value[cbfs[0].id] }};\n    switch (cbfs.length) {\n        case 1: return k;\n        case 2: return { ...k, k2: { field: cbfs[1].id, value: value[cbfs[1].id] }};\n        default: throw new Error('Invalid compare by field length: ' + cbfs.length);\n    }\n};\n\nconst _getColorFromPalette = (p: ColorPaletteHashMap,\n                              cbfs: CompareByField[],\n                              ks: ColorKeySet) : string => {\n    return p[createKey(cbfs, ks)];\n}\n\nexport const getColorFromPalette = (p: ColorPalette,\n                                    cbfs: CompareByField[],\n                                    value: Object) : string =>\n    _getColorFromPalette(p.hashMap, cbfs, createKeySet(cbfs, value))\n\nconst getShortLabels = (compare: CompareByField) : string[] =>\n    Object.values(compare.values).map(v => v.shortName);\n\nconst getFullLabels = (compare: CompareByField) : string[] =>\n    Object.values(compare.values).map(v => v.fullName);\n\nfunction iterateOverCompareGrid<T>(fn: (ks: ColorKeySet) => T,\n                                   cbf1: CompareByField,\n                                   cbf2: CompareByField) : T[][] {\n    return Object.values(cbf1.values).map((v1) =>\n        Object.values(cbf2.values).map((v2) => fn({\n            k1: {field: cbf1.id, value: v1.shortName},\n            k2: {field: cbf2.id, value: v2.shortName}\n        })));\n}\n\nconst switchToAlwaysMakeLegendHorizontal = (cbfs: CompareByField[]) : CompareByField[] =>\n    Object.values(cbfs[1].values).length >= Object.values(cbfs[0].values).length\n        ? cbfs : [cbfs[1], cbfs[0]];\n\nconst setupColorPalette = (cbfs: CompareByField[],\n                           kahcs: KeysAndHsvColor[]) : ColorPalette => {\n    const p = { hashMap: {} };\n    kahcs.forEach((kahc) => {\n        addColorToPalette(\n            p.hashMap,\n            cbfs,\n            kahc.keys,\n            hsvToHex(kahc.color.h, kahc.color.s, kahc.color.v));\n    });\n    const keySets = kahcs.map(kahc => kahc.keys);\n    const getColor = curry(_getColorFromPalette)(p.hashMap, cbfs);\n    const getColorGrid = curry(iterateOverCompareGrid)(getColor);\n    switch (cbfs.length) {\n        case 0:\n            return {\n                ...p,\n                labels: { rows: [], cols: [] },\n                colors: { byRowAndCol: [] }\n            }\n        case 1:\n            return cbfs[0].type === 'nominal' ? {\n                ...p,\n                labels: {\n                    rows: getFullLabels(cbfs[0]),\n                    cols: []\n                },\n                colors: {\n                    byRowAndCol: keySets.map(compose(x => [x], getColor))\n                }\n            } : {\n                ...p,\n                labels: {\n                    rows: [],\n                    cols: firstAndLast(getShortLabels(cbfs[0])),\n                },\n                colors: {\n                    byRowAndCol: [firstAndLast(keySets.map(getColor))]\n                }\n            };\n        case 2:\n            if (cbfs[0].type === 'nominal') {  // nominal x nominal\n                const scbfs = switchToAlwaysMakeLegendHorizontal(cbfs);\n                return cbfs[1].type === 'nominal' ? {\n                    ...p,\n                    labels: {\n                        rows: getShortLabels(scbfs[0]),\n                        cols: getShortLabels(scbfs[1])\n                    },\n                    colors: {\n                        byRowAndCol: getColorGrid(scbfs[0], scbfs[1])\n                    }\n                } : {  // nominal x ordinal\n                    ...p,\n                    labels: {\n                        rows: getFullLabels(cbfs[0]),\n                        cols: firstAndLast(getShortLabels(cbfs[1]))\n                    },\n                    colors: {\n                        byRowAndCol: nestedFirstAndLast(getColorGrid(cbfs[0], cbfs[1]))\n                    }\n                }\n            } else {\n                return cbfs[1].type === 'ordinal' ? {  // ordinal x ordinal\n                    ...p,\n                    labels: {\n                        rows: firstAndLast(getShortLabels(cbfs[0])),\n                        cols: firstAndLast(getShortLabels(cbfs[1])),\n                    },\n                    colors: {\n                        byRowAndCol: firstAndLast(nestedFirstAndLast(getColorGrid(cbfs[0], cbfs[1])))\n                    }\n                } : {  // ordinal x nominal\n                    ...p,\n                    labels: {\n                        rows: getFullLabels(cbfs[1]),\n                        cols: firstAndLast(getShortLabels(cbfs[0]))\n                    },\n                    colors: {\n                        byRowAndCol: nestedFirstAndLast(getColorGrid(cbfs[1], cbfs[0]))\n                    }\n                };\n            }\n        default:\n            throw new Error(`Has ${cbfs.length} compares. Must be 0-2.`)\n    }\n}\n\nexport const createColorPalette = (compareByFields: CompareByFields) : ColorPalette => {\n    const cbfs = Object.values(compareByFields);\n    const priorities = cbfs.map(cbf => COMPARE_BY_COLOR_PRIORITIES[cbf.id]);\n    const lowPriority = Math.max(...priorities);\n    const highPriority = Math.min(...priorities);\n    const isPrioritized = (cbf: CompareByField, i: number) : boolean => {\n        if (lowPriority === highPriority) {\n            return i === 0;\n        } else {\n            return COMPARE_BY_COLOR_PRIORITIES[cbf.id] === highPriority;\n        }\n    }\n    const kahcs = cbfs.reduce((\n        accum: KeysAndHsvColor[],\n        cbf: CompareByField,\n        cbfi: number\n    ) : KeysAndHsvColor[] => {\n        const isAccumDefault = !accum[0].keys.k1;\n        const fn = COMPARE_BY_COLOR_FNS[cbf.id];\n        if (!fn) {\n            throw new Error(\"Color function not found for \" + cbf.id);\n        }\n        const newColors: KeysAndHsvColor[] = accum.flatMap((\n            existing: KeysAndHsvColor\n        ) => {\n            const fieldValues = Object.values(cbf.values);\n            const nFieldValues = fieldValues.length;\n            return fieldValues.map((cbfv: CompareByFieldValue, vi) => ({\n                keys: isAccumDefault ? {\n                    k1: {\n                        field: cbf.id,\n                        value: cbfv.shortName,\n                    }\n                } : {\n                    ...existing.keys,\n                    k2: {\n                        field: cbf.id,\n                        value: cbfv.shortName\n                    }\n                },\n                color: fn(\n                    existing.color,\n                    cbfv,\n                    nFieldValues,\n                    vi,\n                    isPrioritized(cbf, cbfi))\n            }));\n        });\n        return isAccumDefault ? newColors : [...accum, ...newColors];\n    }, [{color: DEFAULT_COLOR, keys: {}}]);\n    return setupColorPalette(cbfs, kahcs);\n};\n","var _defs, _rect, _rect2, _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgCompare(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"256pt\",\n    height: \"256pt\",\n    viewBox: \"0 0 256 256\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null)), _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    id: \"shape0\",\n    transform: \"translate(69, 114.849943765131)\",\n    fill: \"#757575\",\n    fillRule: \"evenodd\",\n    stroke: \"#757575\",\n    strokeWidth: 1,\n    strokeLinecap: \"square\",\n    strokeLinejoin: \"bevel\",\n    width: 48,\n    height: 104.650056234869\n  })), _rect2 || (_rect2 = /*#__PURE__*/React.createElement(\"rect\", {\n    id: \"shape0\",\n    transform: \"matrix(0.999999974659999 0 0 0.999999974659999 135.620811114999 20.4867467256721)\",\n    fill: \"#757575\",\n    fillRule: \"evenodd\",\n    stroke: \"#757575\",\n    strokeWidth: 1,\n    strokeLinecap: \"square\",\n    strokeLinejoin: \"bevel\",\n    width: 48,\n    height: 199.180836768358\n  })), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    id: \"shape1\",\n    transform: \"translate(20, 236.020978189907)\",\n    fill: \"#757575\",\n    fillRule: \"evenodd\",\n    stroke: \"#757575\",\n    strokeWidth: 10,\n    strokeLinecap: \"square\",\n    strokeLinejoin: \"miter\",\n    strokeMiterlimit: 2,\n    d: \"M0 0.0001L216 0\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgCompare);\nexport default __webpack_public_path__ + \"static/media/Compare.01e7631b.svg\";\nexport { ForwardRef as ReactComponent };","import {\n    DerivedDataValueSet,\n    FeatureRanges,\n    LegendCorner,\n    LegendPosition,\n    PlotType\n} from \"../config\";\nimport {max, min} from 'd3-array';\nimport {ColorPalette, getColorFromPalette} from \"./colors\";\nimport {average} from \"./misc\";\n\nexport const processItemValues = (\n    vs: DerivedDataValueSet[],\n    controlFields,\n    divisions,\n    colorPalette: ColorPalette\n) => {\n    const createName = (v: DerivedDataValueSet) => {\n        const cs = controlFields.compare;\n        const div = divisions[v.geoid];\n        const area = controlFields.area;\n        const divName = cs.length > 0 ? div?.abbrev || div?.name : div?.name;\n        const areaName = cs.length > 0 ? area.abbrev : area.name;\n        const place = divName || areaName;\n        const getC = c => {\n            if (!c.values[v[c.id]]) {\n                throw new Error(`Compare value '${c.id}' not found in ${place}`);\n            }\n            return place.length <= 5 ?\n                c.values[v[c.id]].fullName : c.values[v[c.id]].shortName\n        }\n        const parts = [\n            place,\n            cs.map(getC).join(', ')\n        ];\n        return parts.filter(x => x.length > 0).join(': ')\n    };\n    return vs.map(v => ({\n        ...v,\n        name: createName(v),\n        x: v[controlFields.x.id],\n        y: v[controlFields.y.id],\n        z: v[controlFields.z.id],\n        color: getColorFromPalette(colorPalette, controlFields.compare, v)\n    }));\n};\n\n/**\n * Assumes a linear scale\n */\nconst _findClearestCorner = (left: number[],\n                             right: number[],\n                             y_mean: number,\n                             forceCorner?: LegendCorner) : LegendPosition => {\n    const topLeft = (max(left) - y_mean) / y_mean;\n    const topRight = (max(right) - y_mean) / y_mean;\n    // Avoid lower corners by tipping the scale a little\n    const bottomLeft = ((y_mean * 2 - min(left)) / y_mean);\n    const bottomRight = ((y_mean * 1.5 - min(right)) / y_mean);\n    const minimum = min([topLeft, topRight, bottomLeft, bottomRight]);\n    if (forceCorner != null) {\n        if (forceCorner === LegendCorner.NW) {\n            return {corner: LegendCorner.NW, closestDataPoint: topLeft };\n        } else if (forceCorner === LegendCorner.NE) {\n            return {corner: LegendCorner.NE, closestDataPoint: topRight };\n        } else if (forceCorner === LegendCorner.SW) {\n            return {corner: LegendCorner.SW, closestDataPoint: bottomLeft };\n        } else if (forceCorner === LegendCorner.SE) {\n            return {corner: LegendCorner.SE, closestDataPoint: bottomRight };\n        }\n    }\n    if (topLeft === minimum) {\n        return {corner: LegendCorner.NW, closestDataPoint: topLeft };\n    } else if (topRight === minimum) {\n        return {corner: LegendCorner.NE, closestDataPoint: topRight };\n    } else if (bottomLeft === minimum) {\n        return {corner: LegendCorner.SW, closestDataPoint: bottomLeft };\n    } else if (bottomRight === minimum) {\n        return {corner: LegendCorner.SE, closestDataPoint: bottomRight };\n    } else {\n        return {corner: LegendCorner.NW, closestDataPoint: topLeft };\n    }\n};\n\nexport const chooseLegendPosition = (plotType: PlotType,\n                                     featureRanges: FeatureRanges,\n                                     data: any[],\n                                     forceCorner?: LegendCorner) : LegendPosition => {\n    const _splitHalfs = (pred: (any, number) => number,\n                         values: any[],\n                         c1: number,\n                         c2: number) : [number[], number[]] => {\n        return [\n            values.filter((v, i) => pred(v, i) < c1).map(v => v.y),\n            values.filter((v, i) => pred(v, i) > c2).map(v => v.y)\n        ];\n    };\n    const y_mean = average(featureRanges.y);\n    if (plotType.name === 'bubble') {\n        const c = average(featureRanges.x);\n        const x_min = featureRanges.x[0];\n        const x_max = featureRanges.x[1];\n        const c14 = (c + x_min) / 2;\n        const c34 = (c + x_max) / 2;\n        return _findClearestCorner(..._splitHalfs(d => d.x, data, c14, c34), y_mean, forceCorner);\n    } else if (plotType.name === 'line') {\n        const c = average(featureRanges.year);\n        return _findClearestCorner(..._splitHalfs(d => d.year, data, c, c), y_mean, forceCorner);\n    } else if (plotType.name === 'bar') {\n        const sortedData = data.sort((a, b) => a.scaledY - b.scaledY);\n        const c = data.length / 2;\n        return _findClearestCorner(..._splitHalfs((_, i) => i, sortedData, c, c), y_mean, forceCorner);\n    } else {\n        throw new Error('Unhandled plot type: ' + plotType.name);\n    }\n};\n","import {createSelector} from \"@reduxjs/toolkit\";\nimport {\n    selectAreas,\n    selectDivisionsByLevel,\n    selectFields,\n    selectLevels,\n    selectNumericFields,\n    selectValues,\n    selectTopologiesByAreaAndLevel,\n    selectCompareByFields,\n} from \"../features/data/dataSlice\";\nimport {selectActualControlValues} from \"../features/controls/controlsSlice\";\nimport {mapObjIndexed} from \"ramda\";\nimport {\n    Area,\n    CompareByField,\n    FeatureRanges, LegendCorner, LegendPosition,\n    PLOT_PRESETS,\n    PlotPreset\n} from \"./config\";\nimport {chooseLegendPosition, processItemValues} from \"./utils/domain\";\nimport {min, max} from 'd3-array';\nimport {selectYear} from \"../features/year/yearSlice\";\nimport {createColorPalette} from \"./utils/colors\";\nimport {selectPlotType} from \"../features/plotType/plotTypeSlice\";\nimport queryString from \"query-string\";\n\nexport const selectControlFieldValues = createSelector(\n    selectActualControlValues,\n    selectNumericFields,\n    (cv, nfs) => {\n        if (!nfs || nfs.length === 0) {\n            return cv;\n        }\n        return {\n            ...cv,\n            x: cv.x || nfs[0].id,\n            y: cv.y || nfs[1].id,\n            z: cv.z || nfs[2].id\n        }\n    }\n);\n\nexport const selectControlFields = createSelector(\n    selectAreas,\n    selectLevels,\n    selectFields,\n    selectCompareByFields,\n    selectControlFieldValues,\n    (areas, levels, fields, compareByFields, values) => {\n        return mapObjIndexed((v, k) => {\n            if (!fields || !v) {\n                return null;\n            } else if (k === 'area') {\n                return areas.byId[v];\n            } else if (k === 'compare') {\n                return v.map(cv => compareByFields.byId[cv]);\n            } else if  (k === 'level') {\n                return levels.byId[v];\n            } else {\n                return fields.byId[v];\n            }\n        }, values)\n    }\n);\n\nexport const selectColorPalette = createSelector(\n    selectControlFields,\n    (controls) => {\n        const cbfs = controls.compare;\n        return createColorPalette(cbfs);\n    }\n);\n\nexport const selectCurrentDivisions = createSelector(\n    selectDivisionsByLevel,\n    selectControlFieldValues,\n    (dvsByLevel, cv): any[] => {\n        return dvsByLevel[cv.level];\n    }\n);\n\nexport const selectTopologies = createSelector(\n    selectTopologiesByAreaAndLevel,\n    selectControlFieldValues,\n    (tbaal, cvs) => {\n        if (Object.keys(tbaal).length > 0) {\n            return tbaal[cvs.area][cvs.level];\n        } else {\n            return null;\n        }\n    }\n);\n\nexport const selectArea = createSelector(\n    selectAreas,\n    selectControlFieldValues,\n    (areas, cv) : Area => {\n        return areas.byId[cv.area];\n    }\n);\n\nexport const selectCurrentCompareDetails = createSelector(\n    selectCompareByFields,\n    selectControlFieldValues,\n    (cb, cv) : CompareByField[] => {\n        return cv.compare.map(c => cb.byId[c]);\n    }\n);\n\nconst summaryDataForAllYears = (vs, area, ds, cf, cp) => {\n    const avs = vs.filter(v => v.geoid === area.geoid);\n    return processItemValues(avs, cf, ds, cp);\n}\n\n\nconst individualDataForAllYears = (vs, area, ds, cf, cp) => {\n    const avs = vs.filter(v => v.geoid !== area.geoid);\n    return processItemValues(avs, cf, ds, cp);\n};\n\nconst individualDataIgnoringComparesForAllYears = (vs, area, ds, cf, cp) => {\n    const avs = vs.filter(v => v.geoid !== area.geoid);\n    return processItemValues(avs, {...cf, compare: []}, ds, cp);\n};\n\nexport const selectPlotData = createSelector(\n    selectPlotType,\n    selectValues,\n    selectArea,\n    selectCurrentDivisions,\n    selectControlFields,\n    selectYear,\n    selectColorPalette,\n    (plotType, vs, area, ds, cf, year, cp) => {\n        const summaryData = () => {\n            const avs = vs.filter(v => v.geoid === area.geoid && v.year === year);\n            return processItemValues(avs, cf, ds, cp);\n        };\n        const individualData = () => {\n            const avs = vs.filter(v => v.geoid !== area.geoid && v.year === year);\n            return processItemValues(avs, cf, ds, cp);\n        };\n        const individualDataIgnoringCompares = () => {\n            const avs = vs.filter(v => v.geoid !== area.geoid && v.year === year);\n            return processItemValues(avs, {...cf, compare: []}, ds, cp);\n        };\n\n        if (plotType.name === 'bubble') {\n            return individualData();\n        } else if (plotType.name === 'line') {\n            if (cf.compare.length === 0) {\n                return individualDataForAllYears(vs, area, ds, cf, cp);\n            } else {\n                return summaryDataForAllYears(vs, area, ds, cf, cp);\n            }\n        } else if (plotType.name === 'bar') {\n            if (cf.compare.length === 0) {\n                return individualData();\n            } else {\n                return summaryData();\n            }\n        } else if (plotType.name === 'map') {\n            return individualDataIgnoringCompares();\n        } else {\n            throw new Error('Unhandled plot type: ' + plotType.name);\n        }\n    }\n);\n\nexport const selectFeatureRanges = createSelector(\n    selectPlotType,\n    selectValues,\n    selectArea,\n    selectCurrentDivisions,\n    selectControlFields,\n    selectColorPalette,\n    (plotType, vs, area, ds, cf, cp) : FeatureRanges => {\n        const data = (() => {\n            if (plotType.name === 'map') {\n                return individualDataIgnoringComparesForAllYears(vs, area, ds, cf, cp);\n            } else if (plotType.name === 'bubble' || cf.compare.length === 0) {\n                return individualDataForAllYears(vs, area, ds, cf, cp);\n            } else {\n                return summaryDataForAllYears(vs, area, ds, cf, cp);\n            }\n        })();\n        const fvs = {\n            x: data.map(v => v.x),\n            y: data.map(v => v.y),\n            z: data.map(v => v.z),\n            year: data.map(v => v.year)\n        }\n        return {\n            x: [min(fvs.x), max(fvs.x)],\n            y: [min(fvs.y), max(fvs.y)],\n            z: [min(fvs.z), max(fvs.z)],\n            year: [min(fvs.year), max(fvs.year)]\n        };\n    }\n);\n\nexport const selectLegendPosition = createSelector(\n    selectPlotType,\n    selectPlotData,\n    selectFeatureRanges,\n    (plotType, data, featureRanges) : LegendPosition | undefined => {\n        if (featureRanges.y[0] == null) {\n            return undefined;\n        } else if (plotType.name === 'bubble' || plotType.name === 'line') {\n            return chooseLegendPosition(plotType, featureRanges, data);\n        } else if (plotType.name === 'bar') {\n            return chooseLegendPosition(plotType, featureRanges, data, LegendCorner.NE);\n        } else {\n            throw new Error('Unhandled plot type: ' + plotType.name);\n        }\n    }\n);\n\nexport const selectPlotPresets = createSelector(\n    selectAreas,\n    (areas) : PlotPreset[] => PLOT_PRESETS.map(p => ({\n        title: p.title,\n        area: areas.byId[p.params.area],\n        url: '/explore/plot?' + queryString.stringify(p.params, {arrayFormat: 'bracket'})\n    })));\n\nexport const isLoaded = createSelector(\n    selectValues,\n    (values) => {\n        return values.length > 0;\n    }\n);\n","import React from \"react\";\nimport {defaultStyles as defaultTooltipStyles, useTooltip} from \"@visx/tooltip\";\nimport {\n    all,\n    curry,\n    groupBy,\n    keys,\n    last,\n    map,\n    range,\n    reduce,\n    tail,\n    values\n} from \"ramda\";\nimport useTouchOutside from \"./useTouchOutside\";\nimport TooltipWithBounds from '../dashboard/CustomTooltipWithBounds';\nimport {animated, useSpring} from \"react-spring\";\nimport {useAppSelector} from \"../app/hooks\";\nimport {selectPlotType} from \"../features/plotType/plotTypeSlice\";\nimport {selectControlFields} from \"../dashboard/selectors\";\nimport {FIELD_TYPE_FORMAT_VALUES_MAP} from \"../dashboard/config\";\n\nconst DEFAULT_OPTIONS = {\n    selectedOpacity: 0.8,\n    unselectedOpacity: 0.15,\n    defaultOpacity: 0.6\n};\n\ntype ItemMap = Map<string, any[] | ItemMap>;\ntype KeyValue = any | ((event: Event) => any)\n\nconst groupByKeys = (keyFields: string[], items: any[]) : ItemMap => {\n    const im = groupBy(item => item[keyFields[0]], values(items));\n    if (keyFields.length === 1) {\n        return im;\n    } else {\n        return map(curry(groupByKeys)(tail(keyFields)), im);\n    }\n};\n\nconst lookupKeys = (keys: string[], itemMap: ItemMap) => {\n    return reduce((im, k) => im[k], itemMap, keys);\n};\n\nconst lookupItem = (keys: string[], itemMap: ItemMap) => {\n    const results = lookupKeys(keys, itemMap);\n    if (results.length === 1) {\n        return results[0];\n    } else {\n        throw new Error(`Found ${results.length} results for lookup of ${keys}`);\n    }\n};\n\nconst matchesAllKeys = (keysToMatch: string[], itemKeys: string[]) : boolean => {\n    const n = Math.min(keysToMatch.length, itemKeys.length);\n    // Keys will be coerced into strings, but they might be originally numbers\n    // eslint-disable-next-line eqeqeq\n    return all(i => keysToMatch[i] == itemKeys[i], range(0, n));\n};\n\nconst TooltipContent = ({item}) => {\n    const controls = useAppSelector(selectControlFields);\n    const plotType = useAppSelector(selectPlotType);\n\n    const FormattedValue = ({field}: {field: string}) => {\n        const formatValue = FIELD_TYPE_FORMAT_VALUES_MAP[controls[field].type];\n        return (\n            plotType.fields[field] && controls[field] && (\n                <div>\n                    {controls[field].name}:{' '}\n                    {formatValue(item[field])}\n                </div>\n            )\n        );\n    };\n\n    return (\n        <div className='tooltip-content'>\n            <div className='tooltip-title'>\n                <h3>{item.name}</h3>\n                <div className='year'>{item.year}</div>\n            </div>\n            <div className='tooltip-body'>\n                <FormattedValue field='y' />\n                <FormattedValue field='x' />\n            </div>\n        </div>\n    );\n};\n\nconst useSelect = (items: any[], keyFields: string[],\n                   showLabel, disableInteraction = false) => {\n    const nKeyFields = keyFields.length;\n    const itemMap = groupByKeys(keyFields, items);\n    const [selectedKeys, selectKeys] = React.useState<string[]>(null);\n    const {\n        tooltipOpen,\n        tooltipLeft,\n        tooltipTop,\n        tooltipData,\n        showTooltip,\n        hideTooltip\n    } = useTooltip();\n\n    const select = React.useCallback(\n        (itemKeys: string[]) => {\n            if (!selectedKeys || !matchesAllKeys(selectedKeys, itemKeys)) {\n                selectKeys(itemKeys);\n                const item = lookupItem(itemKeys, itemMap);\n                showTooltip({\n                    tooltipData: <TooltipContent item={item} />,\n                    tooltipLeft: item.scaledX,\n                    tooltipTop: item.scaledY,\n                });\n            }\n        },\n        [showTooltip, itemMap, selectedKeys]\n    );\n\n    const deselect = React.useCallback(() => {\n        selectKeys(null);\n        hideTooltip();\n    }, [hideTooltip]);\n\n    const getKeys = (key1) : string[] => {\n        switch (nKeyFields) {\n            case 1: return [key1];\n            case 2: return [key1, last(keys(itemMap[key1]))];\n            default: throw new Error(\"Unsupported # of keys: \" + nKeyFields);\n        }\n    };\n\n    React.useEffect(() => {\n        if (showLabel) {\n            select(getKeys(showLabel));\n        }\n    });\n\n    const Tooltip = React.memo(() => {\n        const ref = React.useRef(null);\n        // On touch outside isn't needed for closing the tooltip,\n        // but actually to be able to select the next point (on touchscreen)\n        useTouchOutside(ref, deselect);\n        return tooltipData ? (\n            <>\n                {tooltipOpen && tooltipData && (\n                    // @ts-ignore\n                    <TooltipWithBounds\n                        top={tooltipTop}\n                        left={tooltipLeft}\n                        style={{\n                            ...defaultTooltipStyles,\n                            fontSize: '1em',\n                            padding: '0.6em',\n                            margin: '0.75em'\n                        }}\n                        className='tooltip MuiPaper-elevation5'\n                    >\n                        <div ref={ref}>\n                            {tooltipData}\n                        </div>\n                    </TooltipWithBounds>\n                )}\n            </>\n        ) : null;\n    });\n\n    const makeSelectable = React.useCallback((keyValues: any[], c, options= DEFAULT_OPTIONS) => {\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const [{ animOpacity }, setAnim] = useSpring(() => ({\n            animOpacity: options.defaultOpacity,\n        }));\n        const isSelected = selectedKeys && matchesAllKeys(selectedKeys, keyValues);\n        const opacity = isSelected ? options.selectedOpacity : selectedKeys ? options.unselectedOpacity : options.defaultOpacity;\n        const animate = options.animate == null || options.animate === true;\n        if (animate) {\n            setAnim({animOpacity: opacity});\n            // return React.cloneElement(c, {\n            //     key: keyValues.join('_'),\n            //     fillOpacity: animOpacity.to(x => x),\n            //     strokeOpacity:  animOpacity.to(x => x)\n            // });\n            return (\n                <animated.g\n                    fillOpacity={animOpacity.to(x => x)}\n                    strokeOpacity={animOpacity.to(x => x)}\n                    key={keyValues.join('_')}\n                >\n                    {c}\n                </animated.g>\n            );\n        } else {\n            return React.cloneElement(c, {\n                ...c.props,\n                key: keyValues.join('_'),\n                fillOpacity: opacity,\n                strokeOpacity: opacity\n            });\n        }\n    }, [selectedKeys]);\n\n    const makeInteractive = React.useCallback((keyValues: KeyValue[], c) => {\n        if (disableInteraction) {\n            return c;\n        } else {\n            const callback = (event) => {\n                const resolvedKeyValues = keyValues.map(k => k instanceof Function ? k(event) : k);\n                select(resolvedKeyValues);\n            }\n            return React.cloneElement(c, {\n                ...c.props,\n                onTouchStart: callback,\n                onMouseMove: callback,\n                onMouseLeave: deselect\n            });\n        }\n    }, [select, deselect, disableInteraction]);\n\n    const makeSelectableAndInteractive = React.useCallback(\n        (keyValues: KeyValue[], c, options= DEFAULT_OPTIONS) => {\n            const concreteKeys = keyValues.filter(k => !(k instanceof Function))\n            return makeInteractive(keyValues, makeSelectable(concreteKeys, c, options));\n        }, [makeSelectable, makeInteractive]);\n\n    return {makeSelectable, makeInteractive, makeSelectableAndInteractive, Tooltip};\n};\n\nexport default useSelect;\n","import React from \"react\";\nimport {animated, useSpring} from 'react-spring';\nimport {scaleLinear, scalePower} from \"@visx/scale\";\nimport useSelect from \"../hooks/useSelect\";\nimport {FeatureRanges} from \"./config\";\n\nconst paddingPct = 0.1;\n\nexport type BubblePlotProps = {\n    data: any[],\n    featureRanges: FeatureRanges\n    showLabel?: string\n    disableInteraction?: boolean\n    width: number\n    height: number\n};\n\nconst BubblePlot = ({\n    data,\n    featureRanges,\n    showLabel = null,\n    disableInteraction = false,\n    width,\n    height\n}: BubblePlotProps) => {\n    const padding = Math.min(width, height) * paddingPct;\n    const xScale = scaleLinear<number>({\n        domain: featureRanges.x,\n        range: [padding, width - padding],\n        round: true\n    });\n    const yScale = scaleLinear<number>({\n        domain: featureRanges.y,\n        range: [height - padding / 2, padding],\n        round: true\n    });\n\n    const sizeScale = scalePower<number>({\n        domain: [featureRanges.z[0] * 80, featureRanges.z[1] * 120],\n        range: [0.01 * height, 0.06 * height],\n        exponent: 0.5\n    });\n    const items = data\n        .filter(v => v.x != null && v.y != null && v.z != null)\n        .map(v => ({\n            ...v,\n            scaledX: xScale(v.x),\n            scaledY: yScale(v.y),\n            size: sizeScale(v.z * 100)\n        }));\n\n    const {makeSelectableAndInteractive, Tooltip} =\n        useSelect(items, ['name'], showLabel, disableInteraction);\n    return (\n        <>\n            <svg width={width} height={height}>\n                {items.map(item => {\n                    // eslint-disable-next-line react-hooks/rules-of-hooks\n                    const [{animX, animY, animSize}, setAnim] = useSpring(() => ({\n                        animX: item.scaledX,\n                        animY: item.scaledY,\n                        animSize: item.size\n                    }));\n\n                    setAnim({\n                        animX: item.scaledX,\n                        animY: item.scaledY,\n                        animSize: item.size\n                    })\n\n                    return makeSelectableAndInteractive([item.name],\n                        <animated.circle\n                            cx={animX}\n                            cy={animY}\n                            r={animSize}\n                            fill={item.color + 'EE'}\n                            stroke={item.color}\n                        />\n                    );\n                })}\n            </svg>\n            <Tooltip />\n        </>\n    );\n};\n\nexport default BubblePlot;\n","import React from 'react';\nimport { geoPath, geoAlbersUsa, geoCentroid } from 'd3-geo';\nimport {animated, useSpring} from 'react-spring';\nimport { AlbersUsa } from '@visx/geo';\nimport * as topojson from 'topojson-client';\nimport {zipObj} from \"ramda\";\nimport { hcl } from 'd3-color';\nimport { scaleLinear } from 'd3-scale';\nimport { interpolateHcl } from 'd3-interpolate';\nimport {useAppSelector} from \"../app/hooks\";\nimport useSelect from \"../hooks/useSelect\";\nimport {DataField, FeatureRanges} from \"./config\";\nimport {\n    selectArea, selectCurrentDivisions,\n    selectTopologies\n} from \"./selectors\";\n\nexport type MapPlotProps = {\n    data: any[]\n    featureRanges: FeatureRanges\n    width: number\n    height: number\n    yAxisVar: DataField\n    showLabel?: string\n    disableInteraction?: boolean\n};\n\ninterface FeatureShape {\n    type: 'Feature';\n    id: string;\n    geometry: { coordinates: topojson.Position[][]; type: 'MultiPolygon' };\n    properties: { };\n}\nconst projection = geoAlbersUsa();\nconst usMapOffset: [number, number] = [0.025, 0];\n\nconst opacityOptions = {\n    selectedOpacity: 1,\n    unselectedOpacity: 0.2,\n    defaultOpacity: 0.8\n};\n\nconst strokeFactor = 0.002;\n\nconst DumbMapPlot = ({ data, featureRanges, width, height, area, divisions, topologies,\n                         showLabel = null, disableInteraction = false }) => {\n    const scale = Math.round(Math.min(width, height) * 1.4);\n    const topoFeature = topojson.feature(topologies, topologies.objects.data);\n    const { features: featColl } = topoFeature as {\n        type: 'FeatureCollection';\n        features: FeatureShape[];\n    };\n    const colorScale = scaleLinear()\n        .domain(featureRanges.y)\n        // @ts-ignore\n        .range([\n            hcl('rgba(41,122,204,0.1)'),\n            hcl('#0265c9')])\n        // @ts-ignore\n        .interpolate(interpolateHcl)\n\n    const path = geoPath().projection(projection);\n    projection.scale(1).translate(area.id === 'us' ? usMapOffset : [0, 0]);\n    const b = path.bounds(topoFeature);\n    const s = .95 / Math.max((b[1][0] - b[0][0]) / width, (b[1][1] - b[0][1]) / height);\n    const t = [(width - s * (b[1][0] + b[0][0])) / 2, (height - s * (b[1][1] + b[0][1])) / 2];\n    projection.scale(s).translate([t[0], t[1]]);\n\n    const tempItems = data.map(v => ({\n        ...v,\n        ...divisions[v.geoid],\n        color: colorScale(v.y),\n    }));\n    const itemMap = zipObj(tempItems.map(d => d.geoid), tempItems);\n    const items = featColl.map(f => {\n        const c = projection(geoCentroid(f));\n        return {\n            ...itemMap[f.id],\n            scaledX: c[0],\n            scaledY: c[1]\n        };\n    });\n\n    const {makeSelectableAndInteractive, Tooltip} =\n        useSelect(items, ['name'], showLabel, disableInteraction);\n    return width < 10 ? null : (\n        <>\n            <svg width={width} height={height}>\n                <AlbersUsa<FeatureShape>\n                    data={featColl}\n                    scale={s}\n                    translate={[t[0], t[1]]}\n                >\n                    {({ features}) =>\n                        features\n                            .map(({ feature, path }) => {\n                                const item = itemMap[feature.id];\n                                if (!item) {\n                                    return null;\n                                }\n\n                                // eslint-disable-next-line react-hooks/rules-of-hooks\n                                const [{ animColor }, setAnim] = useSpring(() => ({\n                                    animColor: item.color\n                                }));\n\n                                setAnim({\n                                    animColor: item.color\n                                });\n                                return makeSelectableAndInteractive([item.name],\n                                    <animated.path\n                                        className='map-poly'\n                                        d={path || ''}\n                                        fill={animColor.to(x => x)}\n                                        strokeWidth={item.name === 'Alaska' ? 0 : scale * strokeFactor}\n                                    />, opacityOptions\n                                )\n                            })\n                    }\n                </AlbersUsa>\n            </svg>\n            <Tooltip />\n        </>\n    );\n};\n\nconst MapPlot = (props: MapPlotProps) => {\n    const area = useAppSelector(selectArea);\n    const topologies = useAppSelector(selectTopologies);\n    const divisions = useAppSelector(selectCurrentDivisions);\n    return topologies &&\n      <DumbMapPlot {...props}\n                   area={area}\n                   divisions={divisions}\n                   topologies={topologies} />\n}\n\nexport default MapPlot;\n","import React from 'react';\nimport { LinePath } from '@visx/shape';\nimport {scaleLinear} from \"@visx/scale\";\nimport {GlyphCircle} from '@visx/glyph';\nimport { localPoint } from '@visx/event';\nimport { voronoi } from '@visx/voronoi';\nimport {groupBy, curry} from \"ramda\";\nimport useSelect from \"../hooks/useSelect\";\nimport {FeatureRanges} from \"./config\";\n\nconst hPaddingPct = 0.015;\nconst vPaddingPct = 0.1\n\nexport type LinePlotProps = {\n    data: any[]\n    featureRanges: FeatureRanges\n    showLabel?: string\n    disableInteraction?: boolean\n    width: number\n    height: number\n};\n\nconst lineOptions = {\n    selectedOpacity: 0.9,\n    unselectedOpacity: 0.15,\n    defaultOpacity: 0.6\n};\n\nconst pointOptions = {\n    selectedOpacity: 1,\n    unselectedOpacity: 0,\n    defaultOpacity: 0,\n    animate: false\n};\n\nconst LinePlot = ({\n    data,\n    featureRanges,\n    showLabel = null,\n    disableInteraction = false,\n    width,\n    height\n}: LinePlotProps) => {\n    const hPadding = React.useMemo(() =>\n            height * hPaddingPct,\n        [height]\n    );\n    const vPadding = React.useMemo(() =>\n            width * vPaddingPct,\n        [width]\n    );\n    const xScale = scaleLinear<number>({\n        domain: featureRanges.year,\n        range: [hPadding, width - hPadding],\n        round: true\n    });\n    const yScale = scaleLinear<number>({\n        domain: featureRanges.y,\n        range: [height - vPadding, vPadding],\n        round: true\n    });\n    const items = data\n        .map(d => ({\n            ...d,\n            scaledX: xScale(d.year),\n            scaledY: yScale(d.y),\n        }));\n\n    const lines = groupBy(d => d.name, items);\n    const lineKeys = Object.keys(lines);\n    const {makeSelectable, makeSelectableAndInteractive, Tooltip} =\n        useSelect(items, ['name', 'year'], showLabel, disableInteraction);\n    const scaledX = (d) => d.scaledX;\n    const scaledY = (d) => d.scaledY;\n    const strokeWidth = Math.max(Math.round(width / 150), 1);\n    const circleSize = Math.round(strokeWidth * 16);\n\n    const voronoiInstance = voronoi({\n        x: scaledX,\n        y: scaledY,\n        width,\n        height\n    });\n\n    const findNearest = (line, event) => {\n        const point = localPoint(event);\n        const nearest = voronoiInstance(line).find(point.x, point.y).data;\n        return nearest.year;\n    };\n\n    return (\n        <>\n            <svg width={width} height={height}>\n                <>\n                    {lineKeys.map((key) => {\n                        const line = lines[key];\n                        return (\n                            <g key={key}>\n                                {makeSelectableAndInteractive([line[0].name, curry(findNearest)(line)],\n                                    <LinePath\n                                    data={line}\n                                    x={(point: any) => point.scaledX}\n                                    y={(point: any) => point.scaledY}\n                                    stroke={line[0].color}\n                                    strokeWidth={strokeWidth}\n                                    />, lineOptions\n                                )}\n                                {line.map(point => makeSelectable([point.name, point.year],\n                                    <GlyphCircle\n                                    left={point.scaledX}\n                                    top={point.scaledY}\n                                    fill={point.color}\n                                    stroke='#FFFFFF'\n                                    size={circleSize}\n                                    strokeWidth={Math.max(strokeWidth / 3, 1)}\n                                    />, pointOptions\n                                ))}\n                            </g>\n                        );\n                    })}\n                </>\n            </svg>\n            <Tooltip />\n        </>\n    );\n};\n\nexport default LinePlot;\n","import React from \"react\";\nimport {scaleBand, scaleLinear} from \"@visx/scale\";\nimport useSelect from \"../hooks/useSelect\";\nimport {animated, useSpring} from 'react-spring';\nimport {range} from 'ramda';\nimport {FeatureRanges, PCT_V_SPACE_LEFT_FOR_LEGEND} from \"./config\";\n\nconst hPaddingPct = 0.015;\nconst vPaddingPct = 0.02\n\nexport type BarPlotProps = {\n    data: any[]\n    featureRanges: FeatureRanges\n    showLabel?: string\n    disableInteraction?: boolean\n    width: number\n    height: number\n};\n\nconst getHeightAdjustment = (featureRanges: FeatureRanges, height: number, startAtZero: boolean = true) : number => {\n    const domain = featureRanges.y[1] - (startAtZero ? 0 : featureRanges.y[0]);\n    const pctOfLowest = featureRanges.y[0] / domain;\n    const range = 1 - PCT_V_SPACE_LEFT_FOR_LEGEND;\n    return height - Math.min(height, height * (range / pctOfLowest));\n};\n\nconst BarPlot = ({\n    data,\n    featureRanges,\n    showLabel = null,\n    disableInteraction = false,\n    width,\n    height\n}: BarPlotProps) => {\n    const hPadding = React.useMemo(() =>\n        Math.min(width, height) * hPaddingPct,\n        [width, height]\n    );\n    const vPadding = React.useMemo(() =>\n        Math.min(width, height) * vPaddingPct,\n        [width, height]\n    );\n    const heightAdjustment = getHeightAdjustment (featureRanges, height);\n    const yScale = React.useMemo(() => scaleLinear<number>({\n        domain: [0, featureRanges.y[1]],\n        range: [height - vPadding, heightAdjustment + vPadding],\n        round: true\n    }), [height, heightAdjustment, vPadding, featureRanges]);\n    const tempItems: any[] = data\n        .map(v => ({\n            ...v,\n            scaledY: yScale(v.y)\n        }))\n        .sort((a, b) => a.scaledY - b.scaledY);\n    const xScale = React.useMemo(() => scaleBand<number>({\n        range: [hPadding, width - hPadding],\n        round: false,\n        domain: range(0, tempItems.length),\n        padding: 0.25,\n    }), [tempItems, hPadding, width]);\n    const items = tempItems.map((item, i) => ({\n        ...item,\n        scaledX: xScale(i)\n    }))\n    const {makeSelectableAndInteractive, Tooltip} =\n        useSelect(items, ['name'], showLabel, disableInteraction);\n\n    return (\n        <>\n            <svg width={width} height={height - vPadding}>\n                {items.map(item => {\n                    // eslint-disable-next-line react-hooks/rules-of-hooks\n                    const [{ animY }, setAnim] = useSpring(() => ({\n                        animY: item.scaledY\n                    }));\n\n                    setAnim({\n                        animY: item.scaledY\n                    });\n\n                    return makeSelectableAndInteractive([item.name],\n                        <animated.rect\n                            y={animY.to(x => x)}\n                            height={animY.to(x => height - x)}\n                            x={item.scaledX}\n                            width={xScale.bandwidth()}\n                            fill={item.color}\n                        />\n                    )\n                })}\n            </svg>\n            <Tooltip />\n        </>\n    );\n};\n\nexport default BarPlot;\n","import React from \"react\";\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport useDarkMode from 'use-dark-mode';\nimport {TransitionProps} from \"@mui/material/transitions\";\nimport {\n    Button,\n    Collapse,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    FormControl,\n    FormControlLabel,\n    FormGroup,\n    IconButton,\n    InputLabel,\n    NativeSelect,\n    Switch,\n    TextField\n} from \"@mui/material\";\nimport {\n    FacebookIcon,\n    FacebookShareButton,\n    LinkedinIcon,\n    LinkedinShareButton,\n    PinterestIcon,\n    PinterestShareButton,\n    RedditIcon,\n    RedditShareButton,\n    TwitterIcon,\n    TwitterShareButton,\n} from \"react-share\";\nimport FileCopyOutlinedIcon from '@mui/icons-material/FileCopyOutlined';\nimport * as htmlToImage from 'html-to-image';\nimport {\n    Area,\n    AxisLabelSource, PlotType,\n    SHARE_SIZE_MAP,\n    SHARE_SIZES,\n    ShareSize\n} from \"./config\";\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport {useAppSelector} from \"../app/hooks\";\nimport {selectPlotType} from \"../features/plotType/plotTypeSlice\";\nimport {selectYear} from \"../features/year/yearSlice\";\nimport {selectArea, selectCurrentDivisions} from \"./selectors\";\nimport './sharing.scss';\nimport {ThemeProvider, useTheme} from \"@mui/system\";\nimport {compose} from 'ramda';\nimport {createTheme} from \"@mui/material/styles\";\n\nconst ZOOM = 1;\nconst MAX_PREVIEW_WIDTH = 208 / ZOOM;\nconst MAX_PREVIEW_HEIGHT = 208 / ZOOM;\n\nconst calculatePreviewSize = ({width, height}) => {\n    const ratio = height / width;\n    const h1 = Math.min(ratio * MAX_PREVIEW_WIDTH, MAX_PREVIEW_HEIGHT);\n    const w = Math.min(h1 / ratio, MAX_PREVIEW_WIDTH);\n    const h = Math.min(w * ratio);\n    return {width: w, height: h};\n};\n\nconst ShareTransition = React.forwardRef(function Transition(\n    props: TransitionProps & { children?: React.ReactElement<any, any> },\n    ref: React.Ref<unknown>,\n) {\n    return <Collapse ref={ref} {...props} timeout={500} />;\n});\n\nconst BaseDialog = ({setOpen, children, fullScreen=false}) => {\n    React.useEffect(() => {\n        window.location.hash = \"#dialog\";\n        const onHashChange = () => setOpen(window.location.hash === \"#dialog\");\n        window.addEventListener(\"hashchange\", onHashChange);\n        return () => window.removeEventListener(\"hashchange\", onHashChange);\n    }, []);\n\n    return (\n        <Dialog\n            className='share-dialog'\n            open={true}\n            onClose={() => window.history.back()}\n            fullScreen={fullScreen}\n            keepMounted\n        >\n            {children}\n        </Dialog>\n    );\n};\n\nconst createPlotTitle = (plotType: PlotType,\n                         area: Area,\n                         year: number,\n                         compares: { name: string }[],\n                         xAxisLabel: string,\n                         yAxisLabel: string) => {\n    const cs = compares.length > 0 ? ' by ' + compares.map(c => c.name).join('/') : ''\n    return (!plotType.xAxisLabelSource || plotType.xAxisLabelSource === AxisLabelSource.COMPARE ?\n        yAxisLabel + cs :\n        yAxisLabel + ' / ' + xAxisLabel.toLowerCase() + cs) +\n        (plotType.name === 'line' ? '' : ` (${area.abbrev}, ${year})`)\n};\n\nexport const DumbImageDialog = ({plot, setOpen, label, setLabel, pageInDarkMode,\n                                compares, xAxisLabel, yAxisLabel, showAxisLabels,\n                                plotType, area, year, items}) => {\n    const plotTitle = createPlotTitle(plotType, area, year, compares, xAxisLabel, yAxisLabel);\n    const defaultShareSize = SHARE_SIZES[0];\n    const [sharePresetSize, setSharePresetSize] = React.useState(defaultShareSize);\n    const [previewSize, setPreviewSize] = React.useState({\n        width: MAX_PREVIEW_WIDTH,\n        height: MAX_PREVIEW_HEIGHT\n    });\n    const [shareSize, setShareSize] = React.useState({\n        width: defaultShareSize.width,\n        height: defaultShareSize.height\n    });\n    const [format, setFormat] = React.useState('PNG');\n    const [imgData, setImgData] = React.useState<string>(null);\n    const fontSize = Math.round(previewSize.width / 40);\n    const theme = useTheme();\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n    const [darkModeState, setDarkModeState] = React.useState(pageInDarkMode);\n    const darkModeRef = React.useRef({});\n    darkModeRef.current = darkModeState;\n\n    const ImagePreview = () => {\n        const darkMode = useDarkMode(pageInDarkMode, {\n            classNameDark: 'preview-dark-mode',\n            classNameLight: 'preview-light-mode',\n            storageKey: 'previewDarkMode'\n        });\n        React.useEffect(() => {\n            darkModeRef.current ? darkMode.enable() : darkMode.disable();\n        }, [darkMode]);\n        return (\n            <div className='gen-target'>\n                <div className='plot-frame'>\n                    <div className='title'>{plotTitle}</div>\n                    <div className='subtitle'>\n                        Statistipedia: statistipedia.org/explore\n                    </div>\n                    {plot}\n                </div>\n                { showAxisLabels && xAxisLabel &&\n                  <div className='x-axis'>\n                      {xAxisLabel || 'Year'}\n                  </div>\n                }\n                { showAxisLabels && yAxisLabel &&\n                  <div className='y-axis'>\n                      {yAxisLabel}\n                  </div>\n                }\n            </div>\n        );\n    };\n\n    const canvasToPng = (canvas) => {\n        return canvas.toDataURL(\"image/png\", 1.0);\n    };\n\n    const getGenerateFn = () => {\n        switch (format) {\n            case 'PNG': return compose(p => p.then(canvasToPng), htmlToImage.toCanvas);\n            case 'SVG': return htmlToImage.toSvg;\n            default: throw Error('Unhandled format: ' + format);\n        }\n    };\n\n    const GenerateDialog = ({setImgData}) => {\n        const generate = () => {\n            const el: any = document\n                .getElementById('preview')\n                .getElementsByClassName('gen-target')[0];\n            getGenerateFn()(el, {\n                canvasWidth: shareSize.width,\n                canvasHeight: shareSize.height,\n                pixelRatio: 1,\n                width: el.clientWidth * 4,\n                height: el.clientHeight * 4,\n                quality: 1.0,\n                style: {\n                    zoom: 4\n                }\n            }).then((dataUrl) => {\n                setImgData(dataUrl);\n            });\n        };\n\n        const setNewSize = (newSize) => {\n            setShareSize(newSize);\n            setPreviewSize(calculatePreviewSize(newSize));\n        };\n\n        const onPresetSizeSelect = (event) => {\n            const name = event.target.value;\n            if (name === 'Custom') {\n                setSharePresetSize(null);\n                document\n                    .getElementsByClassName('MuiDialog-container')[0]\n                    .getElementsByClassName('MuiPaper-root')[0]\n                    .scrollTo(0, 9999);\n            } else {\n                const s = SHARE_SIZE_MAP[name];\n                setSharePresetSize(s);\n                setNewSize(s);\n            }\n        };\n\n        const onSizeChange = (newSize) => {\n            setSharePresetSize(null);\n            setNewSize(newSize);\n        };\n\n        const onLabelChange = (event) => {\n            const value = event.target.value;\n            setLabel(value === ' ' ? null : value);\n        };\n\n        const onFormatChange = (event) => {\n            const value = event.target.value;\n            setFormat(value);\n        };\n\n        const onModeChange = (event) => {\n            const value = event.target.value;\n            const b = value === 'Dark'\n            setDarkModeState(b);\n        };\n\n        return (\n            <>\n                <div className='dialog-title'>Generate image</div>\n                <DialogContent className='dialog-content'>\n                    <div id='preview-container'>\n                        <div id='preview' style={{...previewSize, fontSize}}>\n                            <ImagePreview />\n                        </div>\n                        <div className=\"MuiFormLabel-root caption\">\n                            Preview\n                        </div>\n                    </div>\n                    <div className='share-controls'>\n                        <div className='size-inputs'>\n                            <FormControl>\n                                <InputLabel variant=\"standard\" htmlFor=\"preset-size\">Size</InputLabel>\n                                <NativeSelect id=\"preset-size\"\n                                              onChange={onPresetSizeSelect}\n                                              value={sharePresetSize ? sharePresetSize.name : 'Custom'}>\n                                    <optgroup label=\"Presets\">\n                                        {SHARE_SIZES.map((s) => (\n                                            <option key={s.name}>{s.name}</option>\n                                        ))}\n                                    </optgroup>\n                                    <option>Custom</option>\n                                </NativeSelect>\n                            </FormControl>\n                            <FormGroup row className='custom-size-inputs top-padded row'>\n                                {['width', 'height'].map((s) => (\n                                    <FormControl key={s} className='top-padded custom-size-input'>\n                                        <TextField helperText={s}\n                                                   variant=\"standard\"\n                                                   onChange={(event) =>\n                                                       onSizeChange({...shareSize, [s]: event.target.value})}\n                                                   value={shareSize[s]} />\n                                    </FormControl>\n                                ))}\n                            </FormGroup>\n                            {/*<FormGroup row className='row'>*/}\n                            {/*    <FormControl className=\"form-control\">*/}\n                            {/*        <InputLabel variant=\"standard\" htmlFor=\"label\">Labeled item</InputLabel>*/}\n                            {/*        <NativeSelect id=\"label\"*/}\n                            {/*                      value={label ? label : ' '}*/}\n                            {/*                      onChange={onLabelChange}>*/}\n                            {/*            <option value=' ' />*/}\n                            {/*            {items.map(({name}) => (*/}\n                            {/*                <option key={name}>{name}</option>*/}\n                            {/*            ))}*/}\n                            {/*        </NativeSelect>*/}\n                            {/*    </FormControl>*/}\n                            {/*</FormGroup>*/}\n                            <FormGroup row className='top-padded row'>\n                                <FormControl className=\"form-control\">\n                                    <InputLabel variant=\"standard\" htmlFor=\"format\">Format</InputLabel>\n                                    <NativeSelect id=\"format\"\n                                                  value={format}\n                                                  onChange={onFormatChange}\n                                    >\n                                        <option>PNG</option>\n                                        <option>SVG</option>\n                                    </NativeSelect>\n                                </FormControl>\n                                <FormControl className=\"form-control\">\n                                    <InputLabel variant=\"standard\" htmlFor=\"light_dark\">\n                                        Mode\n                                    </InputLabel>\n                                    <NativeSelect id=\"light_dark\"\n                                                  value={darkModeRef.current ? 'Dark' : 'Light'}\n                                                  onChange={onModeChange}>\n                                        <option>Light</option>\n                                        <option>Dark</option>\n                                    </NativeSelect>\n                                </FormControl>\n                            </FormGroup>\n                            {/*<FormControl className=\"form-control\">*/}\n                            {/*    <FormControlLabel*/}\n                            {/*        control={*/}\n                            {/*            <Switch*/}\n                            {/*                color=\"primary\"*/}\n                            {/*            />*/}\n                            {/*        }*/}\n                            {/*        label=\"Add QR code\"*/}\n                            {/*    />*/}\n                            {/*</FormControl>*/}\n                        </div>\n                    </div>\n                </DialogContent>\n                <DialogActions className='dialog-actions'>\n                    <Button onClick={() => window.history.back()}>Close</Button>\n                    <Button onClick={generate}>Generate</Button>\n                </DialogActions>\n            </>\n        );\n    };\n\n    const DownloadDialog = ({imgData, setImgData}) => {\n        const url = window.location.href;\n\n        // const share = () => {\n        //     if (navigator.share) {\n        //         navigator.share({\n        //             title: 'web.dev',\n        //             text: 'Check out web.dev.',\n        //             // url: 'https://web.dev/',\n        //             files: [image]\n        //         })\n        //             .then(() => alert('Successful share'))\n        //             .catch((error) => alert(error));\n        //     }\n        // };\n        return (\n            <>\n                <div className='dialog-title'>Download image</div>\n                <DialogContent className='dialog-content'>\n                    <div className='generated-image'>\n                        <a download={plotTitle} href={imgData}>\n                            <img alt=\"Generated\" src={imgData} />\n                        </a>\n                    </div>\n                    <div className='share-controls'>\n                        <div className='image-share-btns'>\n                            <div className='image-share-btn'>\n                                <PinterestShareButton\n                                    url={url}\n                                    media={imgData}\n                                >\n                                    <PinterestIcon round />\n                                    <div style={{color: '#C9242E'}}>\n                                        Share on Pinterest\n                                    </div>\n                                </PinterestShareButton>\n                            </div>\n                        </div>\n                    </div>\n                </DialogContent>\n                <DialogActions className='dialog-actions'>\n                    <Button onClick={() => setImgData(null)}>Back</Button>\n                    <Button onClick={() => window.history.back()}>Close</Button>\n                    <Button href={imgData} download={plotTitle}>Download</Button>\n                </DialogActions>\n            </>\n        )\n    };\n    return (\n        <BaseDialog setOpen={setOpen} fullScreen={fullScreen}>\n            {imgData\n                ? <DownloadDialog imgData={imgData} setImgData={setImgData} />\n                : <GenerateDialog setImgData={setImgData} />\n            }\n        </BaseDialog>\n    )\n}\n\nexport const ImageDialog = (props) => {\n    const plotType = useAppSelector(selectPlotType);\n    const area = useAppSelector(selectArea);\n    const year = useAppSelector(selectYear);\n    const items = [];  // TODO: Needs to provide the same items provided to the specific plot type\n    return <DumbImageDialog {...props}\n                            plotType={plotType}\n                            area={area}\n                            year={year}\n                            items={items} />\n};\n\nexport const BasicShareDialog = ({setOpen, title='Statistipedia Explore'}) => {\n    const url = window.location.href;\n    return (\n        <BaseDialog setOpen={setOpen}>\n            <>\n                <div className='dialog-header'>\n                    <div className='dialog-title'>Share</div>\n                </div>\n                <DialogContent className='dialog-content'>\n                    <div className='social-btns'>\n                        <FacebookShareButton\n                            url={url}\n                            quote={title}\n                        >\n                            <FacebookIcon round />\n                        </FacebookShareButton>\n                        <TwitterShareButton\n                            url={url}\n                            title={title}\n                        >\n                            <TwitterIcon round />\n                        </TwitterShareButton>\n                        <RedditShareButton\n                            url={url}\n                            title={title}\n                        >\n                            <RedditIcon round />\n                        </RedditShareButton>\n                        <LinkedinShareButton url={url}>\n                            <LinkedinIcon round />\n                        </LinkedinShareButton>\n                    </div>\n                    <div style={{display: 'flex'}}>\n                        <TextField value={url} />\n                        <CopyToClipboard onCopy={() => {}} text={url}>\n                            <IconButton aria-label=\"copy\"\n                                        className='copy-btn'\n                                        title='Copy to clipboard'>\n                                <FileCopyOutlinedIcon />\n                            </IconButton>\n                        </CopyToClipboard>\n                    </div>\n                </DialogContent>\n                <DialogActions className='dialog-actions'>\n                    <Button onClick={() => window.history.back()}>Close</Button>\n                </DialogActions>\n            </>\n        </BaseDialog>\n    );\n};\n\nexport const SharePlotDialog  = ({setOpen, compares, xAxisLabel, yAxisLabel}) => {\n    const plotType = useAppSelector(selectPlotType);\n    const area = useAppSelector(selectArea);\n    const year = useAppSelector(selectYear);\n    const plotTitle = createPlotTitle(plotType, area, year, compares, xAxisLabel, yAxisLabel);\n    return <BasicShareDialog setOpen={setOpen} title={plotTitle} />;\n};\n","import React from 'react';\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport { setYear, selectYear } from './yearSlice';\nimport {Box, Slider} from \"@mui/material\";\nimport {styled} from \"@mui/system\";\nimport {selectPlotType} from \"../plotType/plotTypeSlice\";\nimport {last} from 'ramda';\nimport './YearSlider.scss';\nimport {selectYears} from \"../data/dataSlice\";\n\nconst PrettoSlider = styled(Slider)({\n    color: '#318Cf6',\n    height: 8,\n    '& .MuiSlider-track': {\n        border: 'none',\n    },\n    '& .MuiSlider-thumb': {\n        height: 24,\n        width: 24,\n        backgroundColor: '#fff',\n        border: '2px solid currentColor',\n        '&:focus, &:hover, &.Mui-active, &.Mui-focusVisible': {\n            boxShadow: 'inherit',\n        },\n        '&:before': {\n            display: 'none',\n        },\n    },\n    '& .MuiSlider-valueLabel': {\n        lineHeight: 1.2,\n        fontSize: 12,\n        background: 'unset',\n        padding: 0,\n        width: 32,\n        height: 32,\n        borderRadius: '50% 50% 50% 0',\n        backgroundColor: '#318Cf6',\n        transformOrigin: 'bottom left',\n        transform: 'translate(50%, -100%) rotate(-45deg) scale(0)',\n        '&:before': { display: 'none' },\n        '&.MuiSlider-valueLabelOpen': {\n            transform: 'translate(50%, -100%) rotate(-45deg) scale(1)',\n        },\n        '& > *': {\n            transform: 'rotate(45deg)',\n        },\n    },\n    '& .Mui-disabled .MuiSlider-valueLabel': {\n        display: 'none'\n    }\n});\n\nconst YearSlider = () => {\n    const year = useAppSelector(selectYear);\n    const plotType = useAppSelector(selectPlotType);\n    const years = useAppSelector(selectYears);\n    const dispatch = useAppDispatch();\n\n    return plotType && years && year && (\n        <Box sx={{\n            flex: '1 1'\n        }}>\n            <PrettoSlider\n                className='custom-slider'\n                defaultValue={last(years)}\n                min={years[0]}\n                max={last(years)}\n                step={1}\n                disabled={plotType.name === 'line'}\n                valueLabelDisplay=\"on\"\n                onChange={(event, y: number) => {\n                    if (year !== y) {\n                        dispatch(setYear(y))\n                    }\n                }}\n                sx={{\n                    paddingTop: '20px',\n                    '& .MuiSlider-markLabel': {\n                        top: '40px'\n                    }\n                }}\n            />\n        </Box>\n    );\n}\n\nexport default YearSlider;\n","import PlaceIcon from \"@mui/icons-material/Place\";\nimport {ReactComponent as CompareIconSrc} from \"./icons/Compare.svg\";\nimport {ReactComponent as CompareDiffIconSrc} from \"./icons/CompareDiff.svg\";\nimport TagIcon from \"@mui/icons-material/Tag\";\nimport AccessTimeFilledIcon from '@mui/icons-material/AccessTimeFilled';\nimport CalendarMonthIcon from '@mui/icons-material/CalendarMonth';\nimport TimelapseIcon from '@mui/icons-material/Timelapse';\nimport PaidIcon from '@mui/icons-material/Paid';\nimport {SvgIcon} from \"@mui/material\";\nimport BubbleChartIcon from \"@mui/icons-material/BubbleChart\";\nimport DoDisturbIcon from '@mui/icons-material/DoDisturb';\nimport TimelineIcon from \"@mui/icons-material/Timeline\";\nimport BarChartIcon from \"@mui/icons-material/BarChart\";\nimport RoomIcon from \"@mui/icons-material/Room\";\n\nconst makeIcon = (iconSrc) => () => (\n    <SvgIcon component={iconSrc} viewBox=\"0 0 256 256\" />\n);\n\nexport const FIELD_TYPE_ICONS_MAP: {[name: string]: any} = {\n    'geo': PlaceIcon,\n    'numeric': makeIcon(CompareIconSrc),\n    'nominal': makeIcon(CompareIconSrc),\n    'ordinal': makeIcon(CompareIconSrc),\n    'percent': TimelapseIcon,\n    'dollars': PaidIcon,\n    'minutes': AccessTimeFilledIcon,\n    'hours': AccessTimeFilledIcon,\n    'years': CalendarMonthIcon,\n    'none': DoDisturbIcon,\n    'default': TagIcon\n};\n\nexport const PLOT_TYPE_ICONS_MAP: {[name: string]: typeof SvgIcon} = {\n    'bubble': BubbleChartIcon,\n    'line': TimelineIcon,\n    'bar': BarChartIcon,\n    'map': RoomIcon\n};\n","import {ToggleButton, ToggleButtonGroup} from \"@mui/material\";\nimport {PLOT_TYPES} from \"../../dashboard/config\";\nimport React from \"react\";\nimport {useAppDispatch, useAppSelector} from \"../../app/hooks\";\nimport {selectPlotType, setPlotType} from \"./plotTypeSlice\";\nimport {PLOT_TYPE_ICONS_MAP} from \"../../dashboard/icons\";\n\n\nconst PlotTypeSelect = () => {\n    const plotType = useAppSelector(selectPlotType);\n    const dispatch = useAppDispatch();\n\n    const changePlotType = (event, name) => {\n        dispatch(setPlotType(name));\n    }\n\n    return (\n        <div className='plot-type'>\n            <ToggleButtonGroup size='small'\n                               value={plotType.name}\n                               exclusive\n                               onChange={changePlotType}>\n                {PLOT_TYPES.map((pt) => {\n                    const Icon = PLOT_TYPE_ICONS_MAP[pt.name];\n                    return (\n                        <ToggleButton key={pt.name} value={pt.name}>\n                            {<Icon />}\n                        </ToggleButton>\n                    );\n                })}\n            </ToggleButtonGroup>\n        </div>\n    );\n};\n\nexport default PlotTypeSelect;\n","import PlotTypeSelect from \"../plotType/PlotTypeSelect\";\nimport {\n    Autocomplete, Button,\n    Divider, Drawer,\n    FormControl, Input, InputAdornment,\n    InputLabel, List, ListItem, ListItemText, Menu, MenuItem, MenuList,\n    NativeSelect, Select, ListItemIcon,\n    TextField, IconButton\n} from \"@mui/material\";\nimport React, {ChangeEvent, useEffect} from \"react\";\nimport {useAppDispatch, useAppSelector} from \"../../app/hooks\";\nimport {setControls} from \"./controlsSlice\";\nimport {selectPlotType} from \"../plotType/plotTypeSlice\";\nimport {\n    selectAreas,\n    selectAllCompareByFieldDetails,\n    selectNumericFields, selectLevels\n} from \"../data/dataSlice\";\nimport {selectControlFields} from \"../../dashboard/selectors\";\nimport {allValuesNotNull, capitalize} from \"../../dashboard/utils/misc\";\nimport {groupBy, curry, zipObj} from \"ramda\";\nimport {\n    BOTTOM_DRAWER_CORNER,\n    BOTTOM_DRAWER_HEIGHT, CompareByField,\n    DataField\n} from \"../../dashboard/config\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\nimport {useTheme} from \"@mui/system\";\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\nimport './Controls.scss';\nimport {FIELD_TYPE_ICONS_MAP} from \"../../dashboard/icons\";\nimport Cached from \"@mui/icons-material/Cached\";\n\ntype FieldOption = DataField & {\n    disabled: boolean\n}\n\ntype FieldGroup = {\n    name: string,\n    fields: FieldOption[]\n};\n\nconst groupFields = (fields: any[]) : FieldGroup[] => {\n    const gs = groupBy(f => f.group, fields);\n    return Object.keys(gs).map(k => ({ name: k, fields: gs[k] }));\n};\n\nconst DrawerFieldSelect = ({children, title, open, setOpen}) => {\n    useEffect(() => {\n        document.body.style.position = open ? 'fixed' : 'initial';\n    }, [open]);\n\n    return (\n        <Drawer\n            anchor='bottom'\n            PaperProps={{\n                style: {\n                    height: BOTTOM_DRAWER_HEIGHT,\n                    borderRadius: `${BOTTOM_DRAWER_CORNER}px ${BOTTOM_DRAWER_CORNER}px 0 0`\n                }\n            }}\n            ModalProps={{\n                keepMounted: true\n            }}\n            open={open}\n            onClose={() => setOpen(false)}\n        >\n            <div>\n                <div className='select-drawer-bar'>\n                    <div className='title'>{title}</div>\n                    <div className='actions'>\n                        <Button onClick={() => setOpen(false)}>Close</Button>\n                    </div>\n                </div>\n                <div className='select-drawer-content'>\n                    {children}\n                </div>\n            </div>\n        </Drawer>\n    );\n};\n\nconst MenuFieldSelect = ({children, anchorEl, setAnchorEl}) => (\n    <Menu\n        variant=\"menu\"\n        anchorEl={anchorEl}\n        open={anchorEl != null}\n        onClose={() => setAnchorEl(null)}\n        MenuListProps={{\n            role: 'listbox',\n        }}\n    >\n        {children}\n    </Menu>\n);\n\nconst FieldSelect = ({children, title, anchorEl, setAnchorEl}) => {\n    const theme = useTheme();\n    const useDrawer = useMediaQuery(theme.breakpoints.down('md'));\n    return useDrawer ? (\n        <DrawerFieldSelect title={title}\n                           open={anchorEl != null}\n                           setOpen={() => setAnchorEl(null)}>\n            {children}\n        </DrawerFieldSelect>\n    ) : (\n        <MenuFieldSelect anchorEl={anchorEl}\n                         setAnchorEl={setAnchorEl}>\n            {children}\n        </MenuFieldSelect>\n    )\n};\n\nconst BaseFieldSelect = ({field, options, onChange, disabled=false, label,\n                             value, className=undefined} :\n                             {field: string, options: FieldGroup[], onChange,\n                                 disabled?: boolean, label: string,\n                                 value: string, className?: string}) => {\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const handleClickListItem = (event) => {\n        !disabled && setAnchorEl(event.currentTarget);\n    };\n    return (\n        <div>\n            <FormControl className=\"form-control\" disabled={disabled}>\n                <InputLabel variant=\"standard\" htmlFor={`field-${field}`}>\n                    {label}\n                </InputLabel>\n                <div className={`${disabled ? 'Mui-disabled ': ''}${className ? className + ' ' : ''}custom-select MuiInput-root MuiInput-underline MuiInputBase-root MuiInputBase-colorPrimary MuiInputBase-formControl MuiSelect-root`}\n                     onClick={handleClickListItem}>\n                    <div role=\"button\" aria-expanded=\"false\"\n                         aria-haspopup=\"listbox\" aria-labelledby=\"compare-by-1\"\n                         id=\"compare-by-1\"\n                         className=\"MuiSelect-select MuiSelect-standard MuiInput-input MuiInputBase-input\">\n                        {value}\n                    </div>\n                    <ArrowDropDownIcon className='adornment' />\n                    <Input id={`field-${field}`}\n                           className=\"MuiSelect-nativeInput css-yf8vq0-MuiSelect-nativeInput\"\n                           type='hidden'\n                           value={value}\n                           aria-hidden=\"true\"\n                    />\n                </div>\n            </FormControl>\n            <FieldSelect title={label} anchorEl={anchorEl} setAnchorEl={setAnchorEl}>\n                {options.flatMap((g, i) => [\n                    i > 0 ? <Divider key={`${g.name}_divider`} /> : null,\n                    <MenuItem disabled={true}\n                              key={`${g.name}_header`}\n                              className='menu-group-header'>\n                        {g.name}\n                    </MenuItem>,\n                    ...g.fields.map(f => {\n                        const Icon = FIELD_TYPE_ICONS_MAP[f.type] || FIELD_TYPE_ICONS_MAP.default;\n                        return (\n                            <MenuItem key={f.id}\n                                      value={f.id}\n                                      selected={f.name === value}\n                                      disabled={f.disabled}\n                                      onClick={() => onChange({[field]: f.id})}>\n                                <ListItemIcon>\n                                    <Icon/>\n                                </ListItemIcon>\n                                <ListItemText primary={f.name}\n                                              secondary={f.description}/>\n                            </MenuItem>\n                        )\n                    })\n                ])}\n            </FieldSelect>\n        </div>\n    );\n};\n\nconst Controls = () => {\n    const plotType = useAppSelector(selectPlotType);\n    const controls = useAppSelector(selectControlFields);\n    const controlsIsReady = allValuesNotNull(controls);\n    const numericFields = useAppSelector(selectNumericFields);\n    const compareByFields = useAppSelector(selectAllCompareByFieldDetails);\n    const areas = useAppSelector(selectAreas);\n    const levels = useAppSelector(selectLevels);\n    const dispatch = useAppDispatch();\n\n    const disableUsedCompares = (fields: CompareByField[]) : CompareByField[] => {\n        const used = controls.compare.map(c => c.id);\n        return fields.map(f => ({\n            ...f,\n            disabled: used.includes(f.id)\n        }));\n    };\n\n    const addRecents = (fields: CompareByField[]) : CompareByField[] => {\n        const none = {\n            id: 'none',\n            type: 'none',\n            name: 'None',\n            description: 'Clear field',\n            group: 'Recently used',\n            values: {}\n        };\n        return [none, ...fields];\n    }\n\n    const numericFieldGroups = groupFields(numericFields);\n    const compareByGroups = groupFields(addRecents(disableUsedCompares(compareByFields)));\n\n    const updateState = (newState: {[key: string]: any}) => {\n        return dispatch(setControls(zipObj(Object.keys(newState), Object.values(newState))));\n    };\n\n    const updateCompare = (i: number, newState: {[key: string]: any}) => {\n        const newNewState = newState;\n        const k = Object.keys(newState)[0];\n        const v = Object.values(newState)[0];\n        if (v === 'none') {\n            switch (i) {\n                case 0: newNewState[k] = controls.compare.length === 2 ?\n                    [controls.compare[1].id] : []; break;\n                case 1: newNewState[k] = [controls.compare[0].id]; break;\n                default: throw new Error('Unexpected compare index: ' + i)\n            }\n        } else {\n            switch (i) {\n                case 0: newNewState[k] = controls.compare.length === 2 ?\n                    [v, controls.compare[1].id] : [v]; break;\n                case 1: newNewState[k] = [controls.compare[0].id, v]; break;\n                default: throw new Error('Unexpected compare index: ' + i)\n            }\n        }\n        return updateState(newNewState);\n    };\n\n    const switchCompares = () => {\n        const newState = {\n            'compare': [controls.compare[1].id, [controls.compare[0].id]]\n        };\n        return(updateState(newState));\n    };\n\n    const CompareByFieldSelect = ({i}: {i: number}) => (\n        <BaseFieldSelect field={`compare`}\n                         className='compare-by'\n                         options={compareByGroups}\n                         onChange={curry(updateCompare)(i)}\n                         disabled={plotType.name === 'map' || i > controls.compare.length}\n                         label='Compare by'\n                         value={controls.compare[i]?.name || ' '}\n        />\n    );\n\n    const FieldSelect = ({field} : {field: string}) => (\n        <BaseFieldSelect field={field}\n                         options={numericFieldGroups}\n                         onChange={updateState}\n                         disabled={!plotType.fields[field]}\n                         label={plotType.fields[field] || `${field.toUpperCase()}-Axis`}\n                         value={controls[field].name}\n        />\n    );\n\n    const BasicSelect =\n        ({field, options, disabled=false,\n             onChange=(e) => updateState({[field]: e.target.value})} :\n             {field: string, options: {allIds: string[], byId}, disabled?: boolean,\n             onChange?: (e: ChangeEvent<HTMLSelectElement>) => void}) => (\n        <FormControl className=\"form-control\" disabled={disabled}>\n            <InputLabel variant=\"standard\" htmlFor={`field-${field}`}>\n                {capitalize(field)}\n            </InputLabel>\n            <NativeSelect id={field}\n                          onChange={onChange}\n                          value={controls[field].id}>\n                {options.allIds.map(id => (\n                    <option key={id} value={id}>{options.byId[id].name}</option>\n                ))}\n            </NativeSelect>\n        </FormControl>\n    )\n\n    // Not working\n    const AutocompleteSelect =\n        ({field, options, disabled=false} :\n             {field: string, options: {allIds: string[], byId}, disabled?: boolean}) => (\n        <Autocomplete\n            freeSolo\n            disabled={disabled}\n            id={field}\n            className=\"form-control\"\n            options={options.allIds}\n            value={controls[field].id}\n            getOptionLabel={(option) => options.byId[option].name}\n            renderInput={(params) =>\n                <TextField {...params} variant=\"standard\" label={capitalize(field)} />}\n        />\n    )\n\n    return controlsIsReady && areas.allIds.length > 0 && (\n        <div className='controls'>\n            <PlotTypeSelect />\n            <BasicSelect field='area'\n                         options={areas}\n                         onChange={(e) => {\n                             const v = e.target.value;\n                             updateState({\n                                 'area': v,\n                                 'level': v === 'us' ? 'state' : 'county'\n                             });\n                         }} />\n            <BasicSelect field='level' options={levels} disabled={true} />\n            <div className='compare-by-fieldset'>\n                <div className='fields'>\n                    <CompareByFieldSelect i={0} />\n                    <CompareByFieldSelect i={1} />\n                </div>\n\n                <div className='switch'>\n                    <IconButton size='small'\n                                disabled={controls.compare.length < 2}\n                                onClick={switchCompares}>\n                        <Cached />\n                    </IconButton>\n                </div>\n            </div>\n            <FieldSelect field='x' />\n            <FieldSelect field='y' />\n            <FieldSelect field='z' />\n        </div>\n    );\n};\n\nexport default Controls;\n","import React from 'react';\nimport {useAppDispatch, useAppSelector} from \"../../app/hooks\";\nimport {\n    clearDataValues,\n    selectCompareByFields,\n    setData\n} from \"./dataSlice\";\nimport {DATA_DIR, DataValue, DerivedDataValueSet} from \"../../dashboard/config\";\nimport {groupBy, difference} from 'ramda';\nimport {getUrlParams} from \"../../utils\";\nimport axios from \"axios\";\nimport {flattenArrayOfObjects} from \"../../dashboard/utils/misc\";\nimport {selectControlFields} from \"../../dashboard/selectors\";\nimport {selectControlsLoaded} from \"../controls/controlsSlice\";\nimport {selectPlotType} from \"../plotType/plotTypeSlice\";\n\nconst BASE_CHUNK_URL = \"/explore/data\";\n\ntype ChunkParams = {\n    level: string\n    area: string\n}\n\ntype ValueChunkParams = ChunkParams & {\n    compare: string[]\n    feature: string\n}\n\ntype TopologyChunkParams = {\n\n}\n\ntype ChunkToFetch<P> = {\n    url: string,\n    params: P\n}\n\ntype FetchedChunk<P> = {\n    data: DataValue[],\n    params: P\n}\n\ntype FlattenedValueChunk = {\n    data: DataValue,\n    params: ValueChunkParams\n}\n\nexport const computeValueChunk = (\n    area: string,\n    level: string,\n    feature: string,\n    compare: string[],\n    plotType: string\n) : ChunkToFetch<ValueChunkParams> => {\n    const c = compare.length === 0 || plotType === 'map' ? 'all' : compare.join('_');\n    return {\n        url: `/pums/${area}/${level}/${feature}/${c}.json`,\n        params: {\n            area,\n            level,\n            compare,\n            feature,\n        }\n    };\n};\n\nexport const computeTopologyChunk = (\n    area: string,\n    level: string\n) : ChunkToFetch<TopologyChunkParams> => {\n    return {\n        url: `/topologies/${area}.json`,\n        params: {\n            area,\n            level\n        }\n    };\n}\n\nconst sortCompares = (compareFields, compares) => {\n    return compareFields.allIds.filter(c => compares.includes(c));\n};\n\nconst DataManager = () => {\n    const plotType = useAppSelector(selectPlotType);\n    const controls = useAppSelector(selectControlFields);\n    const compareFields = useAppSelector(selectCompareByFields);\n    const controlsLoaded = useAppSelector(selectControlsLoaded);\n    const dispatch = useAppDispatch();\n\n    React.useEffect(() => {\n        const _computeChunks = () : ChunkToFetch<ValueChunkParams|TopologyChunkParams>[] => {\n            const params = getUrlParams();\n            const fields = Array.from(new Set(['x', 'y', 'z'].map(f => params[f])));\n            const compares = sortCompares(compareFields, controls.compare.map(c => c.id));\n            return [\n                ...fields.map(f =>\n                    computeValueChunk(\n                        params.area, params.level, f, compares, params.plot)),\n                computeTopologyChunk(params.area, params.level)\n            ].map(c => ({...c, url: BASE_CHUNK_URL + c.url}));\n        }\n\n        const isValueChunk = (c: FetchedChunk<ValueChunkParams|TopologyChunkParams>) : boolean => {\n            // @ts-ignore\n            return !!c.params.compare;\n        }\n\n        const groupByFn = (v: FlattenedValueChunk) => {\n            const compareValues = v.params.compare.map(c => v.data[c]);\n            return v.data.geoid + \"_\" + v.data.year + \"_\" + compareValues.join(\"_\");\n        }\n\n        const mergeFeatures = (vs: FlattenedValueChunk[]) : DerivedDataValueSet => {\n            const featureSet = [...new Set(vs.flatMap(v => v.params.feature))];\n            const allKeys = [...new Set(vs.flatMap(v => Object.keys(v.data)))];\n            const nonFeatureSet = difference(allKeys, featureSet);\n            const output = {};\n            vs.forEach(v => {\n                featureSet.forEach(feature => {\n                    const featureValue = v.data[feature];\n                    if (featureValue != null) {\n                        output[feature] = featureValue\n                    }\n                });\n            });\n            nonFeatureSet.forEach(key => {      // All non-feature values\n                output[key] = vs[0].data[key];  // should be the same\n            });\n            return output;\n        };\n\n        const processValues = (cs: FetchedChunk<ValueChunkParams>[]) : DerivedDataValueSet[] => {\n            const vs: FlattenedValueChunk[] = cs.flatMap(\n                c => c.data.map(d => ({data: d, params: c.params})));\n            const groups: FlattenedValueChunk[][] = Object.values(groupBy(groupByFn, vs));\n            return groups.map(mergeFeatures);\n        };\n\n        const onChunksFetched = (cs: FetchedChunk<ValueChunkParams|TopologyChunkParams>[]): void => {\n            const valueDataArray = cs.filter(isValueChunk) as FetchedChunk<ValueChunkParams>[];\n            const valueData = processValues(valueDataArray);\n            const otherData = cs.filter(c => !isValueChunk(c)).map(c => c.data);\n            const data = { values: valueData, ...flattenArrayOfObjects(otherData) };\n            dispatch(setData(data));\n        };\n\n        const _fetchChunks = (cs: ChunkToFetch<ValueChunkParams|TopologyChunkParams>[]) => {\n            Promise.all(cs.map(c => axios.get(DATA_DIR + c.url))).then((responses) => {\n                const fcs = responses.map((r, i) =>\n                    ({data: r.data, params: cs[i].params}));\n                onChunksFetched(fcs);\n            });\n        };\n\n        const update = () => {\n            return (dispatch, getState) => {\n                dispatch(clearDataValues());\n                _fetchChunks(_computeChunks());\n            }\n        };\n\n        if (controlsLoaded)\n            dispatch(update());\n    }, [dispatch, plotType, controls, controlsLoaded]);  // data left out of deps to prevent infinite loop\n\n    return null;\n}\n\nexport default DataManager;\n","import React from 'react';\nimport {useAppDispatch, useAppSelector} from \"../app/hooks\";\nimport {selectControlFields} from \"./selectors\";\nimport {selectYear, setYear} from \"../features/year/yearSlice\";\nimport {map, filter} from 'ramda';\nimport {selectPlotType, setPlotType} from \"../features/plotType/plotTypeSlice\";\nimport {setControls, setLoaded} from \"../features/controls/controlsSlice\";\nconst queryString = require('query-string');\n\nconst Url = () => {\n    const controls = useAppSelector(selectControlFields);\n    const storedYear = useAppSelector(selectYear);\n    const storedPlotType = useAppSelector(selectPlotType);\n    const dispatch = useAppDispatch();\n\n    // Don't think we need the thunk stuff anymore, but just leave it for now.\n\n    const updateUrl = () => {\n        return (dispatch, getState) => {\n            const state = getState();\n            const controls = selectControlFields(state);\n            const storedYear = selectYear(state);\n            const storedPlotType = selectPlotType(state);\n            if (state.controls.loaded) {\n                const allParams = {\n                    plot: storedPlotType.name,\n                    ...map(f => f ? f.id : null, controls),\n                    compare: controls.compare.map(c => c.id),\n                    year: storedYear\n                };\n                const params = filter(p => !!p, allParams);\n                const s = queryString.stringify(params, {arrayFormat: 'bracket'});\n                if (s !== window.location.search.slice(1)) {\n                    // TODO: Should we really clobber all the history?\n                    window.history.replaceState({}, null, '?' + s);\n                }\n            }\n        }\n    }\n\n    const loadState = () => {\n        return (dispatch, getState) => {\n            const { x, y, z, area, level, compare, plot, year } =\n                queryString.parse(window.location.search, {arrayFormat: 'bracket'});\n            const nonNullControls = filter(v => !!v, {x, y, z, area, level, compare});\n            dispatch(setControls(nonNullControls));\n            if (!!plot)\n                dispatch(setPlotType(plot));\n            if (!!year)\n                dispatch(setYear(parseInt(year)));\n            dispatch(updateUrl());\n            dispatch(setLoaded());\n        }\n    }\n\n    React.useEffect(() => {\n        dispatch(loadState());\n    }, [dispatch]);\n\n    React.useEffect(() => {\n        dispatch(updateUrl());\n    }, [dispatch, controls, storedYear, storedPlotType]);\n\n    return null\n};\n\nexport default Url\n","import {FC} from 'react';\nimport './Legend.scss';\nimport {useAppSelector} from \"../app/hooks\";\nimport {\n    selectColorPalette,\n    selectCurrentCompareDetails,\n    selectFeatureRanges,\n    selectLegendPosition,\n    selectPlotData,\n} from \"./selectors\";\nimport {ColorPalette} from \"./utils/colors\";\nimport {CompareByField, LegendCorner, LegendPosition} from \"./config\";\nimport {selectPlotType} from \"../features/plotType/plotTypeSlice\";\nimport {chooseLegendPosition} from \"./utils/domain\";\n\ntype LegendComponentProps = {\n    compares: CompareByField[]\n    colorPalette: ColorPalette\n}\n\nconst bgAlphaHex = 'CC';\n\nconst OrdinalStrip = ({fromColor, toColor, label=null}) => {\n    return (\n        <>\n            <div className='strip'\n                 style={{\n                     backgroundImage: `linear-gradient(to right, ${fromColor + bgAlphaHex}, ${toColor + bgAlphaHex})`\n                 }}>\n                {label}\n            </div>\n        </>\n    )\n}\n\nconst OrdinalLabels = ({start, end}) => (\n    <div className='labels strip'>\n        <div className='label' style={{ top: 0, left: 0 }}>{start}</div>\n        <div className='label' style={{ top: 0, right: 0 }}>{end}</div>\n    </div>\n)\n\nconst OrdinalLegend = ({colorPalette}: LegendComponentProps) => {\n    return (\n        <div className='ordinal'>\n            <OrdinalLabels start={colorPalette.labels.cols[0]}\n                           end={colorPalette.labels.cols[1]} />\n            <OrdinalStrip fromColor={colorPalette.colors.byRowAndCol[0][0]}\n                          toColor={colorPalette.colors.byRowAndCol[0][1]}\n            />\n        </div>\n    );\n};\n\nconst NominalLegend = ({colorPalette}: LegendComponentProps) => {\n    // const cols = [\n    //     {name: 'Wh', hue: 200},\n    //     {name: 'Bl', hue: 340},\n    //     {name: 'Hs', hue: 150},\n    //     {name: 'As', hue: 40},\n    // ];\n\n    return (\n        <div className='nominal'>\n            {colorPalette.colors.byRowAndCol.map((row, r) =>\n                <div key={'row-' + r}\n                     className='strip'\n                     style={{ backgroundColor: row[0] + bgAlphaHex }}>\n                    {colorPalette.labels.rows[r]}\n                </div>\n            )}\n        </div>\n    );\n};\n\nconst OrdinalByNominalLegend = ({colorPalette}: LegendComponentProps) => (\n    <div className='ordinal'>\n        <OrdinalLabels start={colorPalette.labels.cols[0]}\n                       end={colorPalette.labels.cols[1]} />\n        {colorPalette.colors.byRowAndCol.map((colorRow, r) => (\n            <OrdinalStrip key={'row-' + r}\n                          fromColor={colorRow[0]}\n                          toColor={colorRow[1]}\n                          label={colorPalette.labels.rows[r]}\n            />\n        ))}\n    </div>\n);\n\nconst NominalByNominalLegend = ({colorPalette}: LegendComponentProps) => (\n    <table className='nominal-grid' cellPadding={0} cellSpacing={0}>\n        <tbody>\n            <tr>\n                <th />\n                {colorPalette.labels.cols.map((col, c) => (\n                    <th key={'col-header-' + c} className='col-header'>\n                        {col}\n                    </th>\n                ))}\n            </tr>\n            {colorPalette.colors.byRowAndCol.map((colorRow, r) => (\n                <tr key={'row-' + r} >\n                    <th className='row-header'>\n                        {colorPalette.labels.rows[r]}\n                    </th>\n                    {colorRow.map((colorCell, c) => (\n                        <td key={`cell-${c}-${r}`}\n                             className='cell'\n                             style={{\n                                 backgroundColor: colorCell + bgAlphaHex\n                             }} />\n                    ))}\n                </tr>\n            ))}\n        </tbody>\n    </table>\n);\n\nconst OrdinalByOrdinalLegend = ({colorPalette}: LegendComponentProps) => {\n    const cs = colorPalette.colors.byRowAndCol;\n    const ls = colorPalette.labels;\n    return (\n        <div  className='ordinal'>\n            <div className='layer'\n                 style={{\n                     backgroundImage: `linear-gradient(to right, ${cs[0][0] + bgAlphaHex}, ${cs[0][1] + bgAlphaHex})`,\n                }}\n            >\n            </div>\n            <div className='layer'\n                 style={{\n                     backgroundImage: `linear-gradient(to right, ${cs[1][0] + bgAlphaHex}, ${cs[1][1] + bgAlphaHex}`,\n                     WebkitMask: 'linear-gradient(to bottom, #0000, #00000080 50%, #000D 80%, #000 100%)',\n                     mask: 'linear-gradient(to bottom, #0000, #00000080 50%, #000D 80%, #000 100%)',\n                 }}\n            >\n            </div>\n            <div className='label' style={{ top: 4, left: 16}}>${ls.cols[0]}</div>\n            <div className='label' style={{ top: 4, right: 10}}>${ls.cols[1]}</div>\n            <div className='label' style={{ top: 16, left: 6 }}>${ls.rows[0]}</div>\n            <div className='label' style={{ bottom: 10, left: 6 }}>${ls.rows[1]}</div>\n        </div>\n    );\n};\n\nconst getLegendComponent = (compares: CompareByField[]) : FC<LegendComponentProps> => {\n    const types = compares.map(c => c.type);\n    switch (compares.length) {\n        case 0:\n            return null;\n        case 1:\n            return types[0] === 'nominal' ? NominalLegend : OrdinalLegend;\n        case 2:\n            if (types[0] === 'nominal') {\n                return types[1] === 'nominal' ? NominalByNominalLegend : OrdinalByNominalLegend;\n            } else {\n                return types[1] === 'ordinal' ? OrdinalByOrdinalLegend : OrdinalByNominalLegend;\n            }\n        default:\n            throw new Error(`Has ${compares.length} compares. Must be 0-2.`)\n    }\n};\n\nconst Legend = () => {\n    const colorPalette = useAppSelector(selectColorPalette);\n    const compares = useAppSelector(selectCurrentCompareDetails);\n    const position = useAppSelector(selectLegendPosition);\n    const LegendComponent = getLegendComponent(compares);\n    if (!position || compares.length === 0) {\n        return null;\n    }\n    return(\n        <div className={`legend ${position.corner}`}>\n            <LegendComponent colorPalette={colorPalette} compares={compares} />\n        </div>\n    );\n}\n\nexport default Legend;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport {\n    AppBar, Collapse,\n    Divider, Drawer,\n    Hidden, IconButton,\n    List,\n    ListItemButton, ListItemIcon,\n    ListItemText, Toolbar, Typography\n} from \"@mui/material\";\nimport HomeIcon from \"@mui/icons-material/Home\";\nimport DataIcon from \"@mui/icons-material/Storage\";\nimport MenuIcon from \"@mui/icons-material/Menu\";\nimport LightModeIcon from \"@mui/icons-material/LightMode\";\nimport DarkModeIcon from \"@mui/icons-material/DarkMode\";\nimport ExpandLess from \"@mui/icons-material/ExpandLess\";\nimport ExpandMore from \"@mui/icons-material/ExpandMore\";\nimport './Nav.scss';\nimport ShareIcon from \"@mui/icons-material/Share\";\nimport {useAppSelector} from \"../app/hooks\";\nimport {selectPlotPresets} from \"./selectors\";\n\nconst SideMenuItem = ({text, icon, children=null}) => {\n    const [open, setOpen] = React.useState(false);\n    return (\n        <>\n            <ListItemButton onClick={() => setOpen(!open)}>\n                <ListItemIcon className='menu-item-icon'>{icon}</ListItemIcon>\n                <ListItemText primary={text} />\n                {children && (open ? <ExpandLess /> : <ExpandMore />)}\n            </ListItemButton>\n            {children && (\n                <Collapse in={open} timeout=\"auto\" unmountOnExit className='nested-menu'>\n                    {children}\n                </Collapse>\n            )}\n        </>\n    );\n};\n\nconst Nav = ({darkMode, ShareDialog, children=null}) => {\n    const plotPresets = useAppSelector(selectPlotPresets);\n    const [shareOpen, setShareOpen] = React.useState(false);\n    const [drawerOpen, setDrawerOpen] = React.useState(false);\n    const drawer = (\n        <div className='side-menu'>\n            <Divider />\n            <List>\n                <a href='/'>\n                    <SideMenuItem text='Statistpedia' icon={<HomeIcon />} />\n                </a>\n                {/*<SideMenuItem text='Datasets' icon={<DataIcon />} />*/}\n                <SideMenuItem text='Presets' icon={<DataIcon />}>\n                    <List>\n                        { plotPresets.map((p) => (\n                            <a href={p.url} key={p.title}>\n                                <ListItemButton>\n                                    <ListItemText>{p.title}</ListItemText>\n                                </ListItemButton>\n                            </a>\n                        ))}\n                    </List>\n                </SideMenuItem>\n            </List>\n            <Divider />\n        </div>\n    );\n    return (\n        <>\n            <nav>\n                <Hidden xlUp>\n                    <Drawer\n                        variant=\"temporary\"\n                        open={drawerOpen}\n                        onClose={() => setDrawerOpen(false)}\n                        ModalProps={{\n                            keepMounted: true, // Better open performance on mobile.\n                        }}\n                    >\n                        {drawer}\n                    </Drawer>\n                </Hidden>\n                <Hidden xlDown>\n                    <Drawer\n                        variant=\"permanent\"\n                        open\n                    >\n                        {drawer}\n                    </Drawer>\n                </Hidden>\n            </nav>\n            <AppBar className='top-bar'\n                    position=\"static\"\n                    elevation={darkMode.value ? 0 : 1}>\n                <Toolbar variant=\"dense\">\n                    <IconButton edge=\"start\"\n                                sx={{\n                                    marginRight: '0.5em',\n                                    display: { xs: 'inline-flex', xl: 'none' }\n                                }}\n                                onClick={() => setDrawerOpen(!drawerOpen)}\n                                color=\"inherit\"\n                                aria-label=\"menu\">\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography\n                        id='site-title'\n                        variant=\"h1\"\n                        sx={{\n                            display: ['none', 'block']\n                        }}\n                    >\n                        <Link to='/explore' style={{\n                            color: 'inherit',\n                            textDecoration: 'none'\n                        }}>\n                            Statistipedia <i>Explore</i>\n                        </Link>\n                    </Typography>\n                    <div className=\"grow\" />\n                    {children}\n                    <IconButton className='menu-btn'\n                                onClick={() => setShareOpen(true)}\n                                color=\"inherit\">\n                        <ShareIcon />\n                    </IconButton>\n                    <IconButton edge=\"end\"\n                                className='menu-btn'\n                                onClick={darkMode.toggle}\n                                color=\"inherit\">\n                        {darkMode.value ? <LightModeIcon /> : <DarkModeIcon />}\n                    </IconButton>\n                    {shareOpen && <ShareDialog setOpen={setShareOpen} />}\n                </Toolbar>\n            </AppBar>\n\n        </>\n    );\n};\n\nexport default Nav;\n","export default __webpack_public_path__ + \"static/media/logo.7b743608.svg\";","import React from 'react';\nimport {Provider} from 'react-redux';\nimport {BrowserRouter, Link, Route, Routes} from \"react-router-dom\";\nimport useDarkMode from 'use-dark-mode';\nimport {store} from '../app/store';\nimport {\n    Box,\n    Button,\n    Card,\n    CircularProgress,\n    CssBaseline,\n    IconButton,\n    ThemeProvider,\n    useMediaQuery\n} from '@mui/material';\nimport {createTheme} from '@mui/material/styles';\nimport BubblePlot from \"./BubblePlot\";\nimport {ParentSize} from \"@visx/responsive\";\nimport './Dashboard.scss';\nimport PlayIcon from '@mui/icons-material/PlayArrow';\nimport PhotoCameraIcon from '@mui/icons-material/PhotoCamera';\nimport {AxisLabelSource} from \"./config\";\nimport {setUseWhatChange} from '@simbathesailor/use-what-changed';\nimport MapPlot from \"./MapPlot\";\nimport LinePlot from \"./LinePlot\";\nimport BarPlot from \"./BarPlot\";\nimport {BasicShareDialog, ImageDialog, SharePlotDialog} from \"./sharing\";\nimport YearSlider from \"../features/year/YearSlider\";\nimport {useAppSelector} from \"../app/hooks\";\nimport {selectPlotType} from \"../features/plotType/plotTypeSlice\";\nimport Controls from \"../features/controls/Controls\";\nimport DataManager from \"../features/data/DataManager\";\nimport Url from './Url';\nimport {\n    isLoaded,\n    selectControlFields,\n    selectFeatureRanges, selectLegendPosition, selectPlotData,\n    selectPlotPresets\n} from \"./selectors\";\nimport {allValuesNotNull} from \"./utils/misc\";\nimport Legend from \"./Legend\";\nimport Nav from \"./Nav\";\nimport LogoIcon from \"./icons/logo.svg\";\n\nsetUseWhatChange(process.env.NODE_ENV === 'development');\nrequire('typeface-roboto');\n\nconst LoadingPlot = ({width, height}) => (\n    <div className='loading-plot' style={{width, height}}>\n        <CircularProgress variant='indeterminate'\n                          size={Math.min(Math.round(width / 7), 80)} />\n    </div>\n);\n\nconst PlotArea = ({plotType,\n                      axisLabels, xAxisLabel=null, yAxisLabel=null,\n                      disableInteraction = false, showLabel,\n                      x, y, levelVar}) => {\n    const DumbPlotArea = ({width, height}) => {\n        const data = useAppSelector(selectPlotData);\n        const featureRanges = useAppSelector(selectFeatureRanges);\n        const props = {\n            data,\n            featureRanges,\n            showLabel,\n            disableInteraction,\n            width,\n            height\n        };\n        switch (plotType.name) {\n            case 'bubble': return <BubblePlot {...props} />;\n            case 'line': return <LinePlot {...props}  />;\n            case 'bar': return <BarPlot {...props}  />;\n            default: return <MapPlot {...props} yAxisVar={y} />;\n        }\n    }\n    const loading = !useAppSelector(isLoaded);\n    return (\n        <ParentSize debounceTime={10} className='bg'>\n            {({ width, height }) => {\n                return (width + height) > 0 && (\n                    <div className='plot' style={{width, height}}>\n                        {loading ?\n                        <LoadingPlot width={width} height={height} /> :\n                        <DumbPlotArea width={width} height={height} /> }\n                        {axisLabels && !plotType.hideAxisLabels && (\n                            <>\n                                <div className='x-axis'>\n                                    {xAxisLabel || levelVar}\n                                </div>\n                                <div className='y-axis' style={{width: height}}>\n                                    {yAxisLabel}\n                                </div>\n                            </>\n                        )}\n                        {plotType.name !== 'map' && <Legend />}\n                    </div>\n                )\n            }}\n        </ParentSize>\n    );\n};\n\ntype DumbDashboardProps = {\n    darkMode: any\n    plotType: any\n    controls: any\n}\n\nconst DumbDashboard = ({darkMode, plotType, controls}: DumbDashboardProps) => {\n    const [genImgOpen, setGenImgOpen] = React.useState(false);\n    const [showLabel, setShowLabel] = React.useState(null);\n\n    const computeXAxisLabel = () : string => {\n        switch (plotType.xAxisLabelSource) {\n            case AxisLabelSource.VAR: return controls.x.name;\n            case AxisLabelSource.COMPARE: return controls.compare.map(c => c.name).join('/');\n            case AxisLabelSource.YEAR: return 'Year'\n            default: return null;\n        }\n    };\n\n    const xAxisLabel = computeXAxisLabel();\n    const yAxisLabel = controls.y?.name;\n\n    const Plot = ({axisLabels, showLabel = null, disableInteraction = false}) => {\n        return (\n            <PlotArea plotType={plotType}\n                      axisLabels={axisLabels}\n                      disableInteraction={disableInteraction}\n                      showLabel={showLabel}\n                      x={controls.x}\n                      y={controls.y}\n                      xAxisLabel={xAxisLabel}\n                      yAxisLabel={yAxisLabel}\n                      levelVar={controls.level.name}\n            />\n        );\n    };\n\n    // useWhatChanged([plotType, controls]);\n\n    return (\n        <>\n            <Nav darkMode={darkMode} ShareDialog={\n                ({setOpen}) => <SharePlotDialog\n                    compares={controls.compare}\n                    xAxisLabel={xAxisLabel}\n                    yAxisLabel={yAxisLabel}\n                    setOpen={setOpen} />\n            }>\n                <IconButton className='menu-btn'\n                            onClick={() => setGenImgOpen(true)}\n                            color=\"inherit\">\n                    <PhotoCameraIcon />\n                </IconButton>\n            </Nav>\n\n            {genImgOpen && <ImageDialog\n              setOpen={setGenImgOpen}\n              label={showLabel}\n              setLabel={setShowLabel}\n              compares={controls.compare}\n              xAxisLabel={xAxisLabel}\n              yAxisLabel={yAxisLabel}\n              showAxisLabels={!plotType.hideAxisLabels}\n              pageInDarkMode={darkMode.value}\n              plot={<Plot axisLabels={false}\n                          disableInteraction={true}\n                          showLabel={showLabel} />} />}\n            <div id=\"dashboard\">\n                <main>\n                    <div className='plot-area'>\n                        <Card className='section'>\n                            <div id='inner-plot-container'>\n                                <Plot axisLabels={true} />\n                            </div>\n                        </Card>\n                    </div>\n                    <div className='timeline'>\n                        <IconButton className='play' disabled={plotType.name === 'line'}>\n                            <PlayIcon />\n                        </IconButton>\n                        <YearSlider />\n                    </div>\n                </main>\n                <aside>\n                    <Controls />\n                </aside>\n            </div>\n        </>\n    );\n};\n\nconst Dashboard = ({darkMode}) => {\n    const plotType = useAppSelector(selectPlotType);\n    const controls = useAppSelector(selectControlFields);\n    const controlsIsReady = allValuesNotNull(controls);\n    return (\n        <>\n            {\n                controlsIsReady && plotType &&\n                <DumbDashboard darkMode={darkMode}\n                               plotType={plotType}\n                               controls={controls} />\n            }\n            <Url />\n            <DataManager />\n        </>\n    );\n};\n\nconst ExternalLink = ({to, style={}, children}) => (\n    <Link to={to}\n          target='_blank'\n          className='external'\n          style={style}\n    >\n        {children}\n    </Link>\n);\n\nconst SiteScreenshot = ({url}: {url: string}) => (\n    <a href={url} className='screenshot' target='screenshot'>\n        <img src={url} width='100%' alt='screenshot' />\n    </a>\n);\n\nconst DumbHome = ({darkMode, plotPresets}) => (\n    <>\n        <Nav darkMode={darkMode} ShareDialog={BasicShareDialog} />\n        <div id='home'>\n            <main>\n                <Card className='section'>\n                    <img className='logo' src={LogoIcon} alt='Statistipedia logo' />\n                    <h2>Welcome to Statistipedia <i>Explore!</i></h2>\n                    <p>\n                        This is an interactive dashboard.\n                    </p>\n                    <p style={{textAlign: 'center', margin: '1.5em 0'}}>\n                        <Button variant=\"contained\" href='/explore/plot'>Enter dashboard here</Button>\n                    </p>\n                    <p>Or you can try these presets:</p>\n                    <table id='presets-table'>\n                        <tbody>\n                        <tr>\n                            <th>Area</th>\n                            <th>Description</th>\n                        </tr>\n                        { plotPresets.map((p) => (\n                            <tr key={p.title}>\n                                <td>\n                                    <ExternalLink to={p.area.link}\n                                          style={{whiteSpace: 'nowrap'}}>\n                                        {p.area.name}\n                                    </ExternalLink>\n                                </td>\n                                <td>\n                                    <a href={p.url}>{p.title}</a>\n                                </td>\n                            </tr>\n                        ))}\n                        </tbody>\n                    </table>\n                </Card>\n            </main>\n            <aside>\n                <SiteScreenshot url={'/img/screenshot1.png'} />\n                <SiteScreenshot url={'/img/screenshot3.png'} />\n                <SiteScreenshot url={'/img/screenshot2.png'} />\n                <SiteScreenshot url={'/img/screenshot4.png'} />\n            </aside>\n        </div>\n    </>\n);\n\nconst Home = ({darkMode}) => {\n    const plotPresets = useAppSelector(selectPlotPresets);\n    return <DumbHome darkMode={darkMode} plotPresets={plotPresets} />;\n};\n\nconst About = ({darkMode}) => (\n    <>\n        <Nav darkMode={darkMode} ShareDialog={BasicShareDialog} />\n        <div id='about'>\n            Sun God Ra\n        </div>\n    </>\n);\n\nconst DashboardApp = () => {\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n    const darkMode = useDarkMode(prefersDarkMode);\n    const theme = React.useMemo(\n        () =>\n            createTheme({\n                palette: {\n                    mode: darkMode.value ? 'dark' : 'light',\n                    primary: {\n                        main: darkMode.value ? '#175391' : '#2278CF'\n                    }\n                },\n                breakpoints: {\n                    values: {\n                        xs: 1,\n                        sm: 390,\n                        md: 640,\n                        lg: 960,\n                        xl: 1080,\n                    },\n                }\n            }),\n        [darkMode],\n    );\n    return (\n        <Provider store={store}>\n            <ThemeProvider theme={theme}>\n                <CssBaseline />\n                <Box sx={{\n                    boxSizing: 'border-box',\n                    width: '100%',\n                    height: '100%',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    paddingLeft: { xs: 0, xl: '270px' }\n                }}>\n                    <BrowserRouter>\n                        <Routes>\n                            <Route path=\"/explore\" element={<Home darkMode={darkMode} />}/>\n                            <Route path=\"/explore/about\" element={<About darkMode={darkMode} />}/>\n                            <Route path=\"/explore/plot\" element={<Dashboard darkMode={darkMode} />}/>\n                        </Routes>\n                    </BrowserRouter>\n                </Box>\n            </ThemeProvider>\n        </Provider>\n    );\n};\n\nexport default DashboardApp;\n","\nexport const zipmap = (arr1 ,arr2) => arr1.reduce((p,c,i) => {\n    p[c] = arr2[i];\n    return p;\n},{});\n\nexport const getUrlParams = () : any => {\n    const url = decodeURI(window.location.href);\n    const question = url.indexOf(\"?\");\n    let hash = url.indexOf(\"#\");\n    if (hash === -1 && question === -1) return {};\n    if (hash === -1) hash = url.length;\n    const query = question === -1 || hash === question + 1 ? url.substring(hash) :\n        url.substring(question+1,hash);\n    let result = {};\n    query.split(\"&\").forEach(function(part) {\n        if (!part) return;\n        part = part.split(\"+\").join(\" \"); // replace every + with space, regexp-free version\n        const eq = part.indexOf(\"=\");\n        let key = eq>-1 ? part.substr(0,eq) : part;\n        const val = eq>-1 ? decodeURIComponent(part.substr(eq + 1)) : \"\";\n        const from = key.indexOf(\"[\");\n        if (from === -1) result[decodeURIComponent(key)] = val;\n        else {\n            const to = key.indexOf(\"]\",from);\n            const index = decodeURIComponent(key.substring(from + 1,to));\n            key = decodeURIComponent(key.substring(0, from));\n            if (!result[key]) result[key] = [];\n            if (!index) result[key].push(val);\n            else result[key][index] = val;\n        }\n    });\n    return result;\n}\n"],"sourceRoot":""}