{"version":3,"sources":["utils.ts","hooks/useTouchOutside.ts","hooks/useSelect.tsx","dashboard/Plot.tsx","dashboard/BubblePlot.tsx","dashboard/config.ts","dashboard/MapPlot.tsx","dashboard/LinePlot.tsx","dashboard/BarPlot.tsx","dashboard/styles.ts","dashboard/MultipleSelect.tsx","dashboard/ShareDialog.tsx","Dashboard.tsx"],"names":["zipmap","arr1","arr2","reduce","p","c","i","getUrlParams","url","decodeURI","window","location","href","question","indexOf","hash","length","query","substring","result","split","forEach","part","eq","join","key","substr","val","decodeURIComponent","from","to","index","push","useTouchOutside","elementRef","onClick","useEffect","clickListener","event","current","contains","target","document","addEventListener","removeEventListener","useSelect","tooltipContent","React","useState","isSelected","setSelected","useTooltip","showTooltip","origHideTooltip","hideTooltip","tooltipData","tooltipTop","tooltipLeft","useTooltipInPortal","detectBounds","TooltipInPortal","containerRef","containerBounds","forceRefreshBounds","select","useCallback","item","value","localPoint","x","y","Math","max","deselect","MyTooltip","memo","ref","useRef","top","left","className","random","makeSelectable","callback","newC","cloneElement","props","fillOpacity","strokeOpacity","onTouchStart","onMouseMove","onMouseLeave","Plot","data","year","width","height","children","xAxisVar","yAxisVar","sizeVar","colorVar","scaleLinear","domain","extent","d","range","padding","filter","id","Text","textAnchor","dx","dy","angle","TooltipContent","name","state_abbrev","Number","toLocaleString","BubblePlot","showLabels","Bubble","point","isLabeled","includes","Circle","cx","xScale","cy","yScale","r","sizeScale","size","fill","stroke","clamp","filteredData","points","map","PLOT_TYPES","icon","BubbleChartIcon","fields","color","TimelineIcon","BarChartIcon","RoomIcon","PLOT_TYPES_MAP","SHARE_SIZES","DATA_YEAR_RANGE","unitedStates","topojson","topology","objects","states","features","colors","State","abbrev","path","strokeWidth","MapPlot","centerX","centerY","scale","AlbersUsa","translate","feature","projection","stateAbbrs","field","LinePlot","selected","lines","groupBy","slug","XYChart","type","Object","keys","LineSeries","dataKey","opacity","enableEvents","xAccessor","yAccessor","Tooltip","snapTooltipToDatumX","snapTooltipToDatumY","showDatumGlyph","glyphStyle","renderTooltip","nearestDatum","datum","BarPlot","Bar","bandwidth","scaleBand","round","useStyles","makeStyles","theme","mainContainer","boxSizing","display","flexDirection","breakpoints","up","paddingLeft","title","menuButton","marginRight","spacing","formControl","marginTop","closeDialogButton","position","right","palette","grey","grow","flexGrow","indeterminateColor","selectAllText","fontWeight","selectedAll","backgroundColor","MultipleSelect","ShareTransition","forwardRef","Collapse","timeout","DownloadDialog","setOpen","classes","IconButton","DialogContent","ShareDialog","Dialog","open","onClose","TransitionComponent","keepMounted","setUseWhatChange","process","require","LoadingPlot","style","CircularProgress","variant","min","PlotArea","loading","plotType","showPlot","Card","ParentSize","debounceTime","SideMenuItem","text","ListItem","button","ListItemIcon","ListItemText","primary","in","unmountOnExit","SideMenu","prefersDarkMode","useMediaQuery","drawerOpen","setDrawerOpen","shareOpen","setShareOpen","drawer","Divider","List","Hidden","lgUp","Drawer","ModalProps","mdDown","AppBar","elevation","Toolbar","edge","Typography","processData","Dashboard","setData","state","setState","useTransition","timeoutMs","isPending","startTransition","csv","then","useMemo","createTheme","main","values","xs","sm","md","lg","xl","updateState","newState","useWhatChanged","ThemeProvider","CssBaseline","disabled","Slider","defaultValue","step","valueLabelDisplay","onChange","ToggleButtonGroup","exclusive","pt","ToggleButton","Autocomplete","options","getOptionLabel","option","renderInput","params","TextField","label","FormControl","InputLabel","htmlFor","NativeSelect"],"mappings":"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","file":"static/js/5.c20daf29.chunk.js","sourcesContent":["\n\nexport const zipmap = (arr1 ,arr2) => arr1.reduce((p,c,i) => {\n    p[c] = arr2[i];\n    return p;\n},{});\n\nexport const getUrlParams = () : Object => {\n    const url = decodeURI(window.location.href);\n    const question = url.indexOf(\"?\");\n    let hash = url.indexOf(\"#\");\n    if (hash === -1 && question === -1) return {};\n    if (hash === -1) hash = url.length;\n    const query = question === -1 || hash === question + 1 ? url.substring(hash) :\n        url.substring(question+1,hash);\n    let result = {};\n    query.split(\"&\").forEach(function(part) {\n        if (!part) return;\n        part = part.split(\"+\").join(\" \"); // replace every + with space, regexp-free version\n        const eq = part.indexOf(\"=\");\n        let key = eq>-1 ? part.substr(0,eq) : part;\n        const val = eq>-1 ? decodeURIComponent(part.substr(eq + 1)) : \"\";\n        const from = key.indexOf(\"[\");\n        if (from === -1) result[decodeURIComponent(key)] = val;\n        else {\n            const to = key.indexOf(\"]\",from);\n            const index = decodeURIComponent(key.substring(from + 1,to));\n            key = decodeURIComponent(key.substring(0, from));\n            if (!result[key]) result[key] = [];\n            if (!index) result[key].push(val);\n            else result[key][index] = val;\n        }\n    });\n    return result;\n}","import { useEffect } from \"react\"\n\nconst useTouchOutside = (elementRef, onClick) => {\n    useEffect(() => {\n        const clickListener = event => {\n            if (!elementRef.current || elementRef.current.contains(event.target)) {\n                return\n            }\n            onClick(event)\n        }\n        document.addEventListener(\"touchstart\", clickListener)\n        return () => {\n            document.removeEventListener(\"touchstart\", clickListener)\n        }\n    }, [elementRef, onClick])\n}\n\nexport default useTouchOutside\n","import React from \"react\";\nimport {useTooltipInPortal} from \"@visx/tooltip\";\nimport {localPoint} from \"@visx/event\";\nimport {useTooltip} from \"@visx/visx\";\nimport useTouchOutside from \"./useTouchOutside\";\n\nconst useSelect = (tooltipContent) => {\n    const [isSelected, setSelected] = React.useState(false);\n\n    const {\n        showTooltip,\n        hideTooltip: origHideTooltip,\n        tooltipData,\n        tooltipTop = 0,\n        tooltipLeft = 0\n    } = useTooltip();\n\n    const {\n        containerRef, containerBounds, TooltipInPortal, forceRefreshBounds\n    } = useTooltipInPortal({\n        detectBounds: true\n    });\n\n    React.useEffect(() => {\n        forceRefreshBounds();\n    }, [showTooltip, forceRefreshBounds]);\n\n    const select = React.useCallback(\n        (item, value, event: React.TouchEvent<SVGCircleElement> | React.MouseEvent<SVGCircleElement>) => {\n            if (!isSelected) {\n                setSelected(true);\n                const {x, y} = localPoint(event) || {x: 0, y: 0};\n                showTooltip({\n                    tooltipData: tooltipContent({item, value}),\n                    tooltipLeft: Math.max(x, 200),  // Prevents tooltips going off window\n                    tooltipTop: y,\n                });\n            }\n        },\n        [tooltipContent, showTooltip, isSelected]\n    );\n\n    const deselect = React.useCallback(() => {\n        setSelected(false);\n        origHideTooltip();\n    }, [origHideTooltip]);\n\n    const MyTooltip = React.memo(() => {\n        const ref = React.useRef(null);\n        useTouchOutside(ref, deselect);\n        return tooltipData ? (\n            <div ref={ref}>\n                <TooltipInPortal\n                    key={Math.random()}\n                    top={tooltipTop - 12}\n                    left={tooltipLeft + 12}\n                    className='tooltip MuiPaper-elevation5'\n                >\n                    {tooltipData}\n                </TooltipInPortal>\n            </div>\n        ) : null;\n    });\n\n    const makeSelectable = React.useCallback((item, value, c) => {\n        const callback = (event) => select(item, value, event);\n        const newC = React.cloneElement(c, {\n            ...c.props,\n            fillOpacity: isSelected ? 1 : 0.6,\n            strokeOpacity: item === isSelected ? 1 : 0.6,\n            onTouchStart: callback,\n            onMouseMove: callback,\n            onMouseLeave: deselect,\n        });\n        return (\n            <>\n                {newC}\n                <MyTooltip />\n            </>\n        )\n    }, [select, deselect, isSelected, MyTooltip]);\n\n    return {makeSelectable};\n};\n\nexport default useSelect;\n","import {Text} from \"@visx/text\";\nimport React from \"react\";\nimport {extent} from 'd3-array';\nimport {scaleLinear, scalePower} from \"@visx/scale\";\n\nconst padding = 20;\n\nconst Plot = ({data, year, width, height, children,\n                  xAxisVar=null, yAxisVar, sizeVar, colorVar}) => {\n\n    const sizeScale = scaleLinear<number>({\n        domain: extent(data, d => +d[sizeVar]),\n        range: [5, padding * 2]\n    });\n    const filteredData = data.filter(d => d.year === year);\n\n    return (\n        <svg width={width} height={height}>\n            <g id=\"plot-body\">\n                {children}\n            </g>\n            {xAxisVar &&\n                <Text textAnchor=\"middle\"\n                      className='plot-label'\n                      dx={width / 2}\n                      dy={height - 3}>\n                    {xAxisVar}\n                </Text>\n            }\n            {yAxisVar &&\n                <Text textAnchor=\"middle\"\n                    angle={-90}\n                    className='plot-label'\n                    dx={13}\n                    dy={height / 2 - 2}>\n                    {yAxisVar}\n                </Text>\n            }\n        </svg>\n    );\n};\n\nexport default Plot;\n","import React from \"react\";\nimport {Circle} from '@visx/shape';\nimport {Text} from \"@visx/text\";\nimport {extent} from 'd3-array';\nimport {scaleLinear, scalePower} from \"@visx/scale\";\nimport useSelect from \"../hooks/useSelect\";\nimport Plot from \"./Plot\";\n\nconst padding = 20;\n\nexport type ScatterPlotProps = {\n    data: any\n    year: number\n    showLabels: string[]\n    width: number\n    height: number\n    xAxisVar: string\n    yAxisVar: string\n    sizeVar: string\n    colorVar: string\n};\n\nconst TooltipContent = ({item, value}) => (\n    <div className='tooltip-content'>\n        <h3>{item.name}, {item.state_abbrev}</h3>\n        <div>${Number(value).toLocaleString()}</div>\n    </div>\n);\n\nconst BubblePlot = ({\n                        data,\n                        year,\n                        showLabels,\n                        width,\n                        height,\n                        xAxisVar,\n                        yAxisVar,\n                        sizeVar,\n                        colorVar,\n                    }: ScatterPlotProps) => {\n    const Bubble = ({point, item}) => {\n        const isLabeled = showLabels.includes(item.name)\n        const {makeSelectable} = useSelect(TooltipContent);\n        return makeSelectable(item, y(point),\n            <g>\n                <Circle\n                    cx={xScale(x(point))}\n                    cy={yScale(y(point))}\n                    r={sizeScale(size(point))}\n                    fill={isLabeled ? '#CC44f6EE' : '#3188f6EE'}\n                    stroke={isLabeled ? '#CC44f6' : '#3188f6'}\n                />\n                {isLabeled &&\n                    <Text textAnchor=\"middle\"\n                          className='plot-label'\n                          dx={xScale(x(point))}\n                          dy={yScale(y(point))}\n                    >\n                    {item.name}\n                </Text>}\n            </g>\n        );\n    };\n\n    const xScale = scaleLinear<number>({\n        domain: extent(data, d => +d[xAxisVar]),\n        range: [padding, width - padding],\n        clamp: true,\n    });\n    const yScale = scaleLinear<number>({\n        domain: extent(data, d => +d[yAxisVar]),\n        range: [height - padding, padding],\n        clamp: true,\n    });\n    const sizeScale = scaleLinear<number>({\n        domain: extent(data, d => +d[sizeVar]),\n        range: [5, padding * 2]\n    })\n    const filteredData = data.filter(d => d.year === year)\n    const points = filteredData.map(d => [d[xAxisVar], d[yAxisVar], d[sizeVar]])\n    const x = (d) => d[0];\n    const y = (d) => d[1];\n    const size = (d) => d[2];\n    return (\n        <Plot data={data} year={year} width={width} height={height}\n              xAxisVar={xAxisVar} yAxisVar={yAxisVar} sizeVar={sizeVar} colorVar={colorVar}>\n            {points.map((point, i) => (\n                <Bubble key={`point-${i}`} point={point} item={filteredData[i]} />\n            ))}\n        </Plot>\n    );\n};\n\nexport default BubblePlot;","import SvgIcon from \"@material-ui/core/SvgIcon/SvgIcon\";\nimport BubbleChartIcon from '@material-ui/icons/BubbleChart';\nimport TimelineIcon from '@material-ui/icons/Timeline';\nimport BarChartIcon from '@material-ui/icons/BarChart';\nimport RoomIcon from '@material-ui/icons/Room';\nimport {zipmap} from \"../utils\";\n\nexport type PlotType = {\n    name: string,\n    icon: typeof SvgIcon,\n    fields: {\n        x?: string,\n        y?: string,\n        size?: string,\n        color?: string\n    }\n};\n\nexport const PLOT_TYPES: PlotType[] = [{\n    name: 'bubble',\n    icon: BubbleChartIcon,\n    fields: {\n        x: 'X-Axis',\n        y: 'Y-Axis',\n        size: 'Size',\n        color: 'Color'\n    }\n}, {\n    name: 'line',  // aka. time series chart\n    icon: TimelineIcon,\n    fields: {\n        // X-Axis is always time. Existing selection is kept, only disabled\n        y: 'Y-Axis'\n        // Color is already defined by the \"Compare by\"\n    }\n}, {\n    name: 'bar',\n    icon: BarChartIcon,\n    fields: {\n        x: 'Compare by',  // Secondary grouping nested under \"Compare by\"\n        y: 'Y-Axis'\n        // Color is already defined by the \"Compare by\"\n    }\n}, {\n    name: 'map',\n    icon: RoomIcon,\n    fields: {\n\n    }\n}];\n\nexport const PLOT_TYPES_MAP: Map<string, PlotType> =\n    zipmap(PLOT_TYPES.map(p => p.name), PLOT_TYPES);\n\nexport type ShareSize = {\n  name: string,\n  width: number,\n  height: number\n};\n\nexport const SHARE_SIZES: ShareSize[] = [{\n    name: 'Instagram Square',\n    width: 1080,\n    height: 1080\n}, {\n    name: 'Twitter',\n    width: 1024,\n    height: 512\n}, {\n    name: 'Pinterest',\n    width: 800,\n    height: 1200\n}, {\n    name: 'Tumblr',\n    width: 1280,\n    height: 1920\n}];\n\nexport const SHARE_SIZE_MAP: Map<string, ShareSize> =\n    zipmap(SHARE_SIZES.map(p => p.name), SHARE_SIZES);\n\nexport const DATA_YEAR_RANGE = [2010, 2019]","import React, { useState } from 'react';\nimport { geoCentroid } from 'd3-geo';\nimport { AlbersUsa } from '@visx/geo';\nimport * as topojson from 'topojson-client';\nimport topology from '../data/usa-topo.json';\nimport stateAbbrs from '../data/us-abbr.json';\nimport useSelect from \"../hooks/useSelect\";\n\nexport const borderColor = '#FFF';\n\nexport type GeoAlbersUsaProps = {\n    width: number;\n    height: number;\n    fullSize?: boolean;\n};\n\ninterface FeatureShape {\n    type: 'Feature';\n    id: string;\n    geometry: { coordinates: [number, number][][]; type: 'Polygon' };\n    properties: { name: string };\n}\n\n// @ts-ignore\nconst { features: unitedStates } = topojson.feature(topology, topology.objects.states) as {\n    type: 'FeatureCollection';\n    features: FeatureShape[];\n};\n\nexport const colors: string[] = ['#ff3333', '#0066ff', '#ff9999', '#66CCff'];\n\nconst TooltipContent = ({item, value}) => (\n    <div className='tooltip-content'>\n        <h3>{item}</h3>\n        <div>This is a state, {value} dude!</div>\n    </div>\n);\n\nconst State = ({abbrev, path, color}) => {\n    const {makeSelectable} = useSelect(TooltipContent);\n    return makeSelectable(abbrev, 69,\n        <path\n            d={path || ''}\n            fill={color}\n            stroke={borderColor}\n            strokeWidth={0.5}\n        />\n    );\n}\n\nconst MapPlot = ({ width, height }: GeoAlbersUsaProps) => {\n    const centerX = width / 2;\n    const centerY = height / 2;\n    const scale = (width + height) / 1.55;\n\n    return width < 10 ? null : (\n        <>\n            <svg width={width} height={height}>\n                <AlbersUsa<FeatureShape>\n                    data={unitedStates}\n                    scale={scale}\n                    translate={[centerX, centerY]}\n                >\n                    {({ features }) =>\n                        features.map(({ feature, path, projection }, i) => {\n                            return <State key={`map-feature-${i}`}\n                                          abbrev={stateAbbrs[feature.id]}\n                                          path={path}\n                                          color={colors[i % 4]} />;\n                        })\n                    }\n                </AlbersUsa>\n            </svg>\n        </>\n    );\n}\n\nexport default MapPlot;\n","import React from 'react';\nimport { LinePath } from '@visx/shape';\nimport {extent} from 'd3-array';\nimport { XYChart, LineSeries, Tooltip } from '@visx/xychart';\nimport {scaleLinear} from \"@visx/scale\";\nimport {groupBy, map, mapObjIndexed} from \"ramda\";\nimport useSelect from \"../hooks/useSelect\";\n\nexport type ScatterPlotProps = {\n    data: any\n    year: number\n    showLabels: string[]\n    width: number\n    height: number\n    yAxisVar: string\n};\n\nconst TooltipContent = ({item, field}) => (\n    <div className='tooltip-content'>\n        <h3>{item.name}</h3>\n        <div>Year: {item.year}</div>\n        <div>{field}: ${Number(item[field]).toLocaleString()}</div>\n    </div>\n);\n\nconst LinePlot = ({\n                      data,\n                      year,\n                      showLabels,\n                      width,\n                      height,\n                      yAxisVar\n                  }: ScatterPlotProps) => {\n    const [selected, setSelected] = React.useState(null);\n\n    const xScale = scaleLinear<number>({\n        domain: extent(data, d => +d.year),\n        range: [0, width],\n        clamp: true,\n    });\n    const yScale = scaleLinear<number>({\n        domain: extent(data, d => +d[yAxisVar]),\n        range: [0, height],\n        clamp: true,\n    });\n\n    const lines = groupBy(d => d.slug, data);\n    const x = (d) => +d.year;\n    const y = (d) => +d[yAxisVar];\n\n    // const Line = ({seriesKey, datums}) => {\n    //     const {makeSelectable} = useSelect(TooltipContent);\n    //     return makeSelectable(datums, y(datums),\n    //         <LineSeries data={datums}\n    //                     dataKey={seriesKey}\n    //                     stroke='#3188f6'\n    //                     enableEvents={true}\n    //                     xAccessor={point => xScale(x(point))}\n    //                     yAccessor={point => yScale(y(point))} />);\n    // };\n\n    return (\n        <XYChart\n            xScale={{ type: 'linear' }}\n            yScale={{ type: 'linear' }}\n            width={width}\n            height={height}\n        >\n            {Object.keys(lines).map((key) => (\n                <LineSeries data={lines[key]}\n                            key={key}\n                            dataKey={key}\n                            stroke='#3188f6'\n                            opacity={selected != null && key !== selected ? 0.15 : 1}\n                            enableEvents={true}\n                            xAccessor={point => xScale(x(point))}\n                            yAccessor={point => yScale(y(point))} />\n            ))}\n            <Tooltip\n                snapTooltipToDatumX\n                snapTooltipToDatumY\n                showDatumGlyph\n                glyphStyle={{fill: '#3188f6'}}\n\n                renderTooltip={({tooltipData}) => {\n                    setSelected(tooltipData.nearestDatum.key);\n                    const datum = tooltipData.nearestDatum.datum;\n                    return <TooltipContent item={datum} field={yAxisVar} />;\n                }} />\n        </XYChart>\n    );\n};\n\nexport default LinePlot;","import React from \"react\";\nimport {Bar as VisxBar} from '@visx/shape';\nimport {extent, max} from 'd3-array';\nimport {scaleBand, scaleLinear, scalePower} from \"@visx/scale\";\nimport useSelect from \"../hooks/useSelect\";\nimport Plot from \"./Plot\";\n\nconst padding = 15;\n\nexport type ScatterPlotProps = {\n    data: any\n    year: number\n    showLabels: string[]\n    width: number\n    height: number\n    xAxisVar: string\n    yAxisVar: string\n    sizeVar: string\n    colorVar: string\n};\n\nconst TooltipContent = ({item, value}) => (\n    <div className='tooltip-content'>\n        <h3>{item.name}</h3>\n        <div>${Number(value).toLocaleString()}</div>\n    </div>\n);\n\nconst BarPlot = ({\n                        data,\n                        year,\n                        showLabels,\n                        width,\n                        height,\n                        xAxisVar,\n                        yAxisVar,\n                        sizeVar,\n                        colorVar,\n                    }: ScatterPlotProps) => {\n    const Bar = ({point, item}) => {\n        const {makeSelectable} = useSelect(TooltipContent);\n        return makeSelectable(item, y(point),\n            <VisxBar\n                x={xScale(x(point))}\n                y={yScale(y(point))}\n                width={xScale.bandwidth()}\n                height={height - yScale(y(point))}\n                fill='#318Cf6'\n            />\n        );\n    };\n\n    const filteredData = data.filter(d => d.year === year);\n    const points = filteredData.map(d => [d.slug, d[yAxisVar], d[sizeVar]]);\n    const x = (d) => d[0];\n    const y = (d) => d[1];\n\n    const xScale = scaleBand<string>({\n                range: [padding, width - padding],\n                round: true,\n                domain: points.map(x),\n                padding: 0.25,\n            });\n\n    const yScale = scaleLinear<number>({\n        domain: [0, max(data, d => +d[yAxisVar])],\n        range: [height - padding, padding],\n        clamp: true,\n    });\n\n    return (\n        <Plot data={data} year={year} width={width} height={height}\n              yAxisVar={yAxisVar} sizeVar={sizeVar} colorVar={colorVar}>\n            {points.map((point, i) => (\n                <Bar key={`point-${i}`} point={point} item={filteredData[i]} />\n            ))}\n        </Plot>\n    );\n};\n\nexport default BarPlot;","import {makeStyles} from \"@material-ui/core\";\n\nexport const useStyles = makeStyles((theme) => ({\n    mainContainer: {\n        boxSizing: 'border-box',\n        width: '100%',\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        [theme.breakpoints.up('lg')]: {\n            paddingLeft: 270\n        }\n    },\n    title: {\n        display: 'none',\n        [theme.breakpoints.up('sm')]: {\n            display: 'block',\n        }\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n        [theme.breakpoints.up('lg')]: {\n            display: 'none'\n        }\n    },\n    formControl: {\n        marginTop: theme.spacing(2),\n        display: 'block'\n    },\n    closeDialogButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n    grow: {\n        flexGrow: 1,\n    }\n}));","import React, { useState } from \"react\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        marginTop: theme.spacing(2),\n        width: 206\n    },\n    indeterminateColor: {\n        color: \"#297ACC\"\n    },\n    selectAllText: {\n        fontWeight: 500\n    },\n    selectedAll: {\n        backgroundColor: \"rgba(0, 0, 0, 0.08)\",\n        \"&:hover\": {\n            backgroundColor: \"rgba(0, 0, 0, 0.08)\"\n        }\n    }\n}));\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps: any = {\n    PaperProps: {\n        style: {\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n            width: 250\n        }\n    },\n    getContentAnchorEl: null,\n    anchorOrigin: {\n        vertical: \"bottom\",\n        horizontal: \"center\"\n    },\n    transformOrigin: {\n        vertical: \"top\",\n        horizontal: \"center\"\n    },\n    variant: \"menu\"\n};\n\nfunction MultipleSelect({options, label}) {\n    const classes = useStyles();\n    const [selected, setSelected] = useState([]);\n    const isAllSelected =\n        options.length > 0 && selected.length === options.length;\n\n    const handleChange = (event) => {\n        const value = event.target.value.filter(v => v !== '')\n        if (value[value.length - 1] === \"all\") {\n            setSelected(selected.length === options.length ? [] : options);\n            return;\n        }\n        setSelected(value);\n    };\n\n    return (\n        <FormControl className={classes.formControl}>\n            <InputLabel id=\"mutiple-select-label\">{label}</InputLabel>\n            <Select\n                labelId=\"mutiple-select-label\"\n                multiple\n                value={selected.length === 0 ? [''] : selected}\n                onChange={handleChange}\n                renderValue={(selected: string[]) => selected.join(\", \")}\n                MenuProps={MenuProps}\n            >\n                <MenuItem\n                    value=\"all\"\n                    classes={{\n                        root: isAllSelected ? classes.selectedAll : \"\"\n                    }}\n                >\n                    <ListItemIcon>\n                        <Checkbox\n                            color=\"primary\"\n                            classes={{ indeterminate: classes.indeterminateColor }}\n                            checked={isAllSelected}\n                            indeterminate={\n                                selected.length > 0 && selected.length < options.length\n                            }\n                        />\n                    </ListItemIcon>\n                    <ListItemText\n                        classes={{ primary: classes.selectAllText }}\n                        primary=\"Select All\"\n                    />\n                </MenuItem>\n                {options.map((option) => (\n                    <MenuItem key={option} value={option}>\n                        <ListItemIcon>\n                            <Checkbox color=\"primary\" checked={selected.indexOf(option) > -1} />\n                        </ListItemIcon>\n                        <ListItemText primary={option} />\n                    </MenuItem>\n                ))}\n            </Select>\n        </FormControl>\n    );\n}\n\nexport default MultipleSelect;\n","import React from \"react\";\nimport {TransitionProps} from \"@material-ui/core/transitions\";\nimport {\n    Button,\n    Collapse,\n    Dialog,\n    DialogContent,\n    FormControl,\n    FormControlLabel,\n    FormGroup,\n    FormLabel,\n    IconButton,\n    InputLabel,\n    NativeSelect,\n    Radio,\n    RadioGroup,\n    Select,\n    Switch,\n    TextField\n} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport {useStyles} from \"./styles\";\nimport html2canvas from \"html2canvas\";\nimport {Image, ImageKind} from \"image-js\";\nimport {SHARE_SIZE_MAP, SHARE_SIZES, ShareSize} from \"./config\";\nimport MultipleSelect from \"./MultipleSelect\";\n\nconst ShareTransition = React.forwardRef(function Transition(\n    props: TransitionProps & { children?: React.ReactElement<any, any> },\n    ref: React.Ref<unknown>,\n) {\n    return <Collapse ref={ref} {...props} timeout={1500} />;\n});\n\nconst GenerateDialog = ({setOpen}) => {\n    const classes = useStyles();\n    const [image, setImage] = React.useState(null);\n    const [labels, setLabels] = React.useState(['None']);\n    const defaultShareSize = SHARE_SIZES[0];\n    const [sharePresetSize, setSharePresetSize] = React.useState(defaultShareSize);\n    const [shareSize, setShareSize] = React.useState({\n        width: defaultShareSize.width,\n        height: defaultShareSize.height\n    });\n\n    React.useEffect(() => {\n        const svg = document\n            .getElementById('plot')\n            .getElementsByTagName('svg')[0]\n            .getElementById('plot-body')\n            .innerHTML\n        setImage(svg);\n        // html2canvas(plotRef).then((canvas) => {\n        // canvas.toBlob(async (blob) => {\n        //     const ab = await blob.arrayBuffer();\n        //     const array = new Int32Array(ab);\n        //     const image = new Image(canvas.width, canvas.height, array);\n        //     // copyImage(fromImage: Image, toImage: Image, x: number, y: number)\n        //     const dataUrl = image.toDataURL('image/png')\n        //     setImage(dataUrl);\n        // });\n        // });\n    }, [setImage]);\n\n    const onPresetSizeSelect = (event) => {\n        const name = event.target.value;\n        if (name === 'Custom') {\n            setSharePresetSize(null);\n            setShareSize({width: null, height: null});\n        } else {\n            const s = SHARE_SIZE_MAP[name];\n            setSharePresetSize(s);\n            setShareSize({width: s.width, height: s.height});\n        }\n    };\n\n    const onSizeChange = (newSize) => {\n        setSharePresetSize(null);\n        setShareSize(newSize);\n    };\n\n    const onLabelsChange = (event) => {\n        const values = Array.from(event.target.selectedOptions).map((v: any) => v.value);\n        console.log(values);\n        setLabels(values);\n    };\n\n    return (\n        <>\n            <div className='dialog-header'>\n                <div className='dialog-title'>Share</div>\n                <IconButton aria-label=\"close\" className={classes.closeDialogButton}\n                            onClick={() => setOpen(false)}>\n                    <CloseIcon />\n                </IconButton>\n            </div>\n            <DialogContent>\n                <div className='share-body'>\n                    <div className='preview-container'>\n                        <label className=\"MuiFormLabel-root preview-label\">\n                            Preview\n                        </label>\n                        <svg className='preview'\n                             viewBox=\"0 0 536 596\"\n                             width={200} height={200}>\n                            <g>\n                                <rect fill='#FAFBFC'\n                                      x={0} y={0} width={536} height={596} />\n                                <svg viewBox=\"0 0 268 248\"\n                                     x={30} y={80}\n                                     width={506} height={496}\n                                     dangerouslySetInnerHTML={{__html: image}} />\n                                <rect stroke='#222' fill='transparent' strokeWidth={2}\n                                      x={31} y={100} width={474} height={466} />\n                                <rect stroke='#FAFBFC' fill='transparent' strokeWidth={30}\n                                      x={15} y={84} width={506} height={498} />\n                                <text dx={268} dy={40} fontSize={26} fontWeight={500} textAnchor='middle'>\n                                    Median rent / median home price by state\n                                </text>\n                                <text dx={268} dy={80} fontSize={24} fontWeight={400} textAnchor='middle'>\n                                    From Statistipedia (statispedia.org/explore)\n                                </text>\n                            </g>\n                        </svg>\n                    </div>\n                    <div className='share-controls'>\n                        <Button variant=\"contained\" color=\"primary\">Generate image</Button>\n                        <div className='size-inputs'>\n                            <FormControl>\n                                <InputLabel htmlFor=\"preset-size\">Size</InputLabel>\n                                <NativeSelect id=\"preset-size\"\n                                              onChange={onPresetSizeSelect}\n                                              value={sharePresetSize ? sharePresetSize.name : 'Custom'}>\n                                    <optgroup label=\"Presets\">\n                                        {SHARE_SIZES.map((s) => (\n                                            <option key={s.name}>{s.name}</option>\n                                        ))}\n                                    </optgroup>\n                                    <option>Custom</option>\n                                </NativeSelect>\n                            </FormControl>\n                            <FormGroup row className='row'>\n                                <FormControl className={classes.formControl}>\n                                    {['width', 'height'].map((s) => (\n                                        <TextField helperText={s}\n                                                   key={s}\n                                                   className='custom-size-input'\n                                                   onChange={(event) =>\n                                                       onSizeChange({...shareSize, [s]: event.target.value})}\n                                                   value={shareSize[s]} />\n                                    ))}\n                                </FormControl>\n                            </FormGroup>\n                            <MultipleSelect\n                                label='Labels'\n                                options={['AK', 'AL', 'AR', 'CA', 'CT', 'DC', 'DE', 'FL', 'GA', 'HI', 'IA', 'ID', 'IL', 'IN', 'KY', 'LA', ]} />\n                            <FormGroup row className='row'>\n                                <FormControl className={classes.formControl}>\n                                    <InputLabel htmlFor=\"format\">Format</InputLabel>\n                                    <NativeSelect id=\"format\" value='PNG'>\n                                        <option>PNG</option>\n                                        <option>SVG</option>\n                                    </NativeSelect>\n                                </FormControl>\n                                <FormControl className={classes.formControl}>\n                                    <InputLabel htmlFor=\"light_dark\">Light or dark</InputLabel>\n                                    <NativeSelect id=\"light_dark\" value='Light mode'>\n                                        <option>Light mode</option>\n                                        <option>Dark mode</option>\n                                    </NativeSelect>\n                                </FormControl>\n\n                            </FormGroup>\n                            <FormControl className={classes.formControl}>\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n\n                                            color=\"primary\"\n                                        />\n                                    }\n                                    label=\"Add QR code\"\n                                />\n                            </FormControl>\n                        </div>\n                    </div>\n                </div>\n            </DialogContent>\n        </>\n    );\n};\n\nconst DownloadDialog = ({setOpen}) => {\n    const classes = useStyles();\n\n    // const share = () => {\n    //     if (navigator.share) {\n    //         navigator.share({\n    //             title: 'web.dev',\n    //             text: 'Check out web.dev.',\n    //             // url: 'https://web.dev/',\n    //             files: [image]\n    //         })\n    //             .then(() => alert('Successful share'))\n    //             .catch((error) => alert(error));\n    //     }\n    // };\n    return (\n        <>\n            <div className='dialog-header'>\n                <div className='dialog-back'>Back</div>\n                <div className='dialog-title'>Share</div>\n                <IconButton aria-label=\"close\" className={classes.closeDialogButton}\n                            onClick={() => setOpen(false)}>\n                    <CloseIcon />\n                </IconButton>\n            </div>\n            <DialogContent>\n                ANus\n            </DialogContent>\n        </>\n    )\n    {/*<div className='note'>Right click/long touch to download or share.</div>*/}\n};\n\nconst ShareDialog = ({setOpen}) => {\n    return (\n        <Dialog\n            className='share-dialog'\n            open={true}\n            onClose={() => setOpen(false)}\n            TransitionComponent={ShareTransition}\n            keepMounted\n        >\n            <div className='share-dialog-content'>\n\n                <DownloadDialog setOpen={setOpen} />\n            </div>\n        </Dialog>\n    )\n};\n\nexport default ShareDialog;","import React from 'react';\nimport {Link} from \"@reach/router\";\nimport {\n    AppBar,\n    Card,\n    CircularProgress,\n    Collapse,\n    createTheme,\n    CssBaseline,\n    Divider,\n    Drawer,\n    FormControl,\n    Hidden,\n    IconButton,\n    InputLabel,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    NativeSelect,\n    Select,\n    Slider,\n    TextField,\n    ThemeProvider,\n    Toolbar,\n    Typography,\n    useMediaQuery\n} from '@material-ui/core';\nimport {Autocomplete, ToggleButton, ToggleButtonGroup} from '@material-ui/lab';\nimport BubblePlot from \"./dashboard/BubblePlot\";\nimport {ParentSize} from \"@visx/responsive\";\nimport './Dashboard.scss';\nimport {csv} from 'd3-fetch';\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport DataIcon from \"@material-ui/icons/Storage\";\nimport ChartIcon from \"@material-ui/icons/InsertChart\";\nimport PlayIcon from '@material-ui/icons/PlayArrow';\nimport ShareIcon from '@material-ui/icons/Share';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport {DATA_YEAR_RANGE, PLOT_TYPES, PLOT_TYPES_MAP} from \"./dashboard/config\";\nimport {\n    setUseWhatChange,\n    useWhatChanged\n} from '@simbathesailor/use-what-changed';\nimport MapPlot from \"./dashboard/MapPlot\";\nimport LinePlot from \"./dashboard/LinePlot\";\nimport BarPlot from \"./dashboard/BarPlot\";\nimport {useStyles} from \"./dashboard/styles\";\nimport ShareDialog from \"./dashboard/ShareDialog\";\n\nsetUseWhatChange(process.env.NODE_ENV === 'development');\n\nrequire('typeface-roboto');\n\nconst LoadingPlot = ({width, height}) => (\n    <div className='loading-plot' style={{width, height}}>\n        <CircularProgress variant='indeterminate'\n                          size={Math.min(Math.round(width / 7), 80)} />\n    </div>\n);\n\nconst PlotArea = ({data, loading, plotType, year, showLabels=['New York'],\n                      xAxisVar, yAxisVar, sizeVar, colorVar}) => {\n    const showPlot = (width: number, height: number) => {\n        if (!data)\n            return null;\n        switch (plotType.name) {\n            case 'bubble': return <BubblePlot data={data}\n                                              year={year}\n                                              showLabels={showLabels}\n                                              width={width}\n                                              height={height}\n                                              sizeVar={sizeVar}\n                                              colorVar={colorVar}\n                                              xAxisVar={xAxisVar}\n                                              yAxisVar={yAxisVar}/>;\n            case 'line': return <LinePlot data={data}\n                                          year={year}\n                                          showLabels={showLabels}\n                                          width={width}\n                                          height={height}\n                                          yAxisVar={yAxisVar}/>;\n            case 'bar': return <BarPlot data={data}\n                                        year={year}\n                                        showLabels={showLabels}\n                                        width={width}\n                                        height={height}\n                                        sizeVar={sizeVar}\n                                        colorVar={colorVar}\n                                        xAxisVar={xAxisVar}\n                                        yAxisVar={yAxisVar}/>;\n            default: return <MapPlot width={width} height={height}/>;\n        }\n    };\n    return (\n        <Card className='section'>\n            <ParentSize debounceTime={0} className='bg'>\n                {({ width, height }) => (\n                    <div id='plot' style={{ width, height }}>\n                        {loading && <LoadingPlot width={width} height={height} />}\n                        {showPlot(width, height)}\n                    </div>\n                )}\n            </ParentSize>\n        </Card>\n    );\n};\n\nconst SideMenuItem = ({text, icon, children=null}) => {\n    const [open, setOpen] = React.useState(false);\n    return (\n        <>\n            <ListItem button onClick={() => setOpen(!open)}>\n                <ListItemIcon className='menu-item-icon'>{icon}</ListItemIcon>\n                <ListItemText primary={text} />\n                {children && (open ? <ExpandLess /> : <ExpandMore />)}\n            </ListItem>\n            {children && (\n                <Collapse in={open} timeout=\"auto\" unmountOnExit className='nested-menu'>\n                    {children}\n                </Collapse>\n            )}\n        </>\n    );\n};\n\nconst SideMenu = () => {\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n    const classes = useStyles();\n    const [drawerOpen, setDrawerOpen] = React.useState(false);\n    const [shareOpen, setShareOpen] = React.useState(false);\n\n    const drawer = (\n        <div className='side-menu'>\n            <Divider />\n            <List>\n                <Link to=\"/\">\n                    <SideMenuItem text='Statistpedia' icon={<HomeIcon />} />\n                </Link>\n                <SideMenuItem text='Datasets' icon={<DataIcon />} />\n                <SideMenuItem text='Presets' icon={<ChartIcon />}>\n                    <List>\n                        <ListItem button><ListItemText>Home prices vs rents</ListItemText></ListItem>\n                        <ListItem button><ListItemText>Income by sex</ListItemText></ListItem>\n                    </List>\n                </SideMenuItem>\n            </List>\n            <Divider />\n        </div>\n    );\n\n    return (\n        <>\n            <nav>\n                <Hidden lgUp>\n                    <Drawer\n                        variant=\"temporary\"\n                        open={drawerOpen}\n                        onClose={() => setDrawerOpen(false)}\n                        ModalProps={{\n                            keepMounted: true, // Better open performance on mobile.\n                        }}\n                    >\n                        {drawer}\n                    </Drawer>\n                </Hidden>\n                <Hidden mdDown>\n                    <Drawer\n                        variant=\"permanent\"\n                        open\n                    >\n                        {drawer}\n                    </Drawer>\n                </Hidden>\n            </nav>\n            <AppBar className='top-bar' position=\"static\" elevation={prefersDarkMode ? 0 : 1}>\n                <Toolbar variant=\"dense\">\n                    <IconButton edge=\"start\"\n                                className={classes.menuButton}\n                                onClick={() => setDrawerOpen(!drawerOpen)}\n                                color=\"inherit\"\n                                aria-label=\"menu\">\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Statistipedia Explore\n                    </Typography>\n                    <div className={classes.grow} />\n                    <IconButton edge=\"end\"\n                                className='share-btn'\n                                    onClick={() => setShareOpen(true)}\n                                color=\"inherit\"\n                                aria-label=\"share\">\n                        <ShareIcon />\n                    </IconButton>\n                </Toolbar>\n            </AppBar>\n            {shareOpen && <ShareDialog setOpen={setShareOpen} />}\n        </>\n    );\n};\n\nconst processData = (data: any[]) : any[] => {\n    return data.map(d => ({...d, year: +d.year}));\n};\n\nconst Dashboard = () => {\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n    const [data, setData] = React.useState(null);\n    const [state, setState] = React.useState({\n        plotType: PLOT_TYPES_MAP['bubble'],\n        year: DATA_YEAR_RANGE[1],\n        xAxisVar: 'Median home price',\n        yAxisVar: 'Median rent',\n        sizeVar: 'Population',\n        colorVar: ''\n    });\n    // @ts-ignore\n    const [isPending, startTransition] = React.useTransition({\n        timeoutMs: 2000\n    });\n\n    React.useEffect(() => {\n        if (data === null) {  // TODO: Replace with checks for each data \"slice\"\n            csv('data/states.csv').then(processData).then(setData);\n        }\n    }, [data]);\n    const theme = React.useMemo(\n        () =>\n            createTheme({\n                palette: {\n                    type: prefersDarkMode ? 'dark' : 'light',\n                    primary: {\n                        main: prefersDarkMode ? '#175391' : '#2278CF'\n                    },\n                },\n                breakpoints: {\n                    values: {\n                        xs: 0,\n                        sm: 640,\n                        md: 960,\n                        lg: 1280,\n                        xl: 1920,\n                    },\n                }\n            }),\n        [prefersDarkMode],\n    );\n    const classes = useStyles(theme);\n\n    const updateState = (newState, useTransition: boolean = true) => {\n        if (useTransition) {\n            startTransition(() => setState({...state, ...newState}));\n        } else {\n            setState({...state, ...newState});\n        }\n    }\n\n    const changePlotType = (event, name) => {\n        if (name !== '' && name != null) {\n            updateState({plotType: PLOT_TYPES_MAP[name]});\n        }\n    }\n\n    useWhatChanged([data, state]);\n\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <div className={classes.mainContainer}>\n                <SideMenu />\n                <div id=\"dashboard\">\n                    <main>\n                        <div id='plot-area'>\n                            <PlotArea data={data}\n                                      loading={isPending || !data}\n                                      plotType={state.plotType}\n                                      year={state.year}\n                                      xAxisVar={state.xAxisVar}\n                                      yAxisVar={state.yAxisVar}\n                                      sizeVar={state.sizeVar}\n                                      colorVar={state.colorVar}\n                            />\n                        </div>\n                        <div className='timeline'>\n                            <IconButton className='play' disabled={state.plotType.name === 'line'}>\n                                <PlayIcon />\n                            </IconButton>\n                            <div className='slider'>\n                                <Slider\n                                    defaultValue={DATA_YEAR_RANGE[1]}\n                                    min={DATA_YEAR_RANGE[0]}\n                                    max={DATA_YEAR_RANGE[1]}\n                                    step={1}\n                                    disabled={state.plotType.name === 'line'}\n                                    valueLabelDisplay=\"on\"\n                                    onChange={(event, year) =>\n                                        updateState({year}, false)}\n                                />\n                            </div>\n                        </div>\n                    </main>\n                    <aside>\n                        <div className='controls'>\n                            <div className='plot-type'>\n                                <ToggleButtonGroup size='small'\n                                                   value={state.plotType.name}\n                                                   exclusive\n                                                   onChange={changePlotType}>\n                                    {PLOT_TYPES.map((pt) => (\n                                        <ToggleButton key={pt.name} value={pt.name}>\n                                            {<pt.icon />}\n                                        </ToggleButton>\n                                    ))}\n                                </ToggleButtonGroup>\n                            </div>\n                            <Autocomplete\n                                id=\"area\"\n                                className={classes.formControl}\n                                options={['United States', 'California', 'New York']}\n                                value='United States'\n                                getOptionLabel={(option) => option}\n                                renderInput={(params) =>\n                                    <TextField label='Area' {...params} />}\n                            />\n                            <FormControl className={classes.formControl}>\n                                <InputLabel htmlFor=\"compare-by\">Compare by</InputLabel>\n                                <NativeSelect id=\"compare-by\" value='State'>\n                                    <optgroup label='Area'>\n                                        <option>State</option>\n                                        <option>County</option>\n                                        <option disabled={true}>Place</option>\n                                    </optgroup>\n                                    <optgroup label='Demographics'>\n                                        <option>Sex</option>\n                                        <option>Race</option>\n                                        <option>Age</option>\n                                    </optgroup>\n                                </NativeSelect>\n                            </FormControl>\n                            <br />\n                            <FormControl className={classes.formControl}\n                                         disabled={!state.plotType.fields.x}>\n                                <InputLabel htmlFor=\"x-axis\">{state.plotType.fields.x || 'X-Axis'}</InputLabel>\n                                <NativeSelect id=\"x-axis\" value={state.xAxisVar}\n                                              onChange={(event) =>\n                                                  updateState({xAxisVar: event.target.value})}\n                                >\n                                    <option>Median home price</option>\n                                    <option>Median rent</option>\n                                    <option>Population</option>\n                                </NativeSelect>\n                            </FormControl>\n                            <FormControl className={classes.formControl}\n                                         disabled={!state.plotType.fields.y}>\n                                <InputLabel htmlFor=\"y-axis\">{state.plotType.fields.y || 'Y-Axis'}</InputLabel>\n                                <NativeSelect id=\"y-axis\" value={state.yAxisVar}\n                                              onChange={(event) =>\n                                                  updateState({yAxisVar: event.target.value})}\n                                >\n                                    <option>Median home price</option>\n                                    <option>Median rent</option>\n                                    <option>Population</option>\n                                </NativeSelect>\n                            </FormControl>\n                            <FormControl className={classes.formControl}\n                                         disabled={!state.plotType.fields.size}>\n                                <InputLabel htmlFor=\"size\">{state.plotType.fields.size || 'Size'}</InputLabel>\n                                <NativeSelect id=\"size\" value={state.sizeVar}\n                                              onChange={(event) =>\n                                                  updateState({sizeVar: event.target.value})}\n                                >\n                                    <option>Median home price</option>\n                                    <option>Median rent</option>\n                                    <option>Population</option>\n                                </NativeSelect>\n                            </FormControl>\n                            <FormControl className={classes.formControl}\n                                         disabled={!state.plotType.fields.color}>\n                                <InputLabel htmlFor=\"color\">{state.plotType.fields.color || 'Color'}</InputLabel>\n                                <NativeSelect id=\"color\" value={state.colorVar}\n                                              onChange={(event) =>\n                                                  updateState({colorVar: event.target.value})}\n                                >\n                                    <option value=' ' />\n                                    <option>Region</option>\n                                </NativeSelect>\n                            </FormControl>\n                        </div>\n                    </aside>\n                </div>\n            </div>\n        </ThemeProvider>\n    );\n};\n\nexport default Dashboard;\n"],"sourceRoot":""}