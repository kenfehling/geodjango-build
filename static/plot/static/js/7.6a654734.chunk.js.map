{"version":3,"sources":["utils.ts","config.ts","DistroPlot.tsx"],"names":["zipmap","arr1","arr2","reduce","p","c","i","COLORS","params","url","window","location","href","question","indexOf","hash","length","query","substring","result","split","forEach","part","eq","join","key","substr","val","decodeURIComponent","from","to","index","push","getUrlParams","axisTicks","nPoints","valueKeys","Object","keys","filter","k","valueParams","map","colorKeys","colorIndexMap","_","series","v","price","value","parseInt","sort","a","b","allData","rec","d","concat","getY","xScale","scaleBand","domain","paddingOuter","paddingInner","yScale","scaleLinear","max","tickLabelProps","fontSize","textAnchor","DistroPlot","ParentSize","debounceTime","className","width","height","scaleHeight","range","lineData","Group","top","left","LinePath","curve","curveBasis","data","x","getX","y","stroke","strokeWidth","strokeOpacity","shapeRendering","AxisBottom","axisClassName","hideAxisLine","tickLength","scale","tickValues","includeTick","numTicks"],"mappings":"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","file":"static/js/7.6a654734.chunk.js","sourcesContent":["\n\nexport const zipmap = (arr1 ,arr2) => arr1.reduce((p,c,i) => {\n    p[c] = arr2[i];\n    return p;\n},{});\n\nexport const getUrlParams = () : Object => {\n    const url = window.location.href;\n    const question = url.indexOf(\"?\");\n    let hash = url.indexOf(\"#\");\n    if (hash === -1 && question === -1) return {};\n    if (hash === -1) hash = url.length;\n    const query = question === -1 || hash === question + 1 ? url.substring(hash) :\n        url.substring(question+1,hash);\n    let result = {};\n    query.split(\"&\").forEach(function(part) {\n        if (!part) return;\n        part = part.split(\"+\").join(\" \"); // replace every + with space, regexp-free version\n        const eq = part.indexOf(\"=\");\n        let key = eq>-1 ? part.substr(0,eq) : part;\n        const val = eq>-1 ? decodeURIComponent(part.substr(eq + 1)) : \"\";\n        const from = key.indexOf(\"[\");\n        if (from === -1) result[decodeURIComponent(key)] = val;\n        else {\n            const to = key.indexOf(\"]\",from);\n            const index = decodeURIComponent(key.substring(from + 1,to));\n            key = decodeURIComponent(key.substring(0, from));\n            if (!result[key]) result[key] = [];\n            if (!index) result[key].push(val);\n            else result[key][index] = val;\n        }\n    });\n    return result;\n}","export const COLORS = {\n    'c': '#ff931e',\n    'a': '#a064ff',\n    'n': '#3fa9f5',\n    'l': '#ff3fa0',\n}\n","import React from 'react';\nimport { max } from 'd3-array';\nimport { curveBasis } from '@visx/curve';\nimport { AxisBottom } from '@visx/axis';\nimport { ParentSize } from '@visx/responsive';\nimport { Group } from '@visx/group';\nimport { LinePath } from '@visx/shape';\nimport { scaleBand, scaleLinear } from '@visx/scale';\nimport {getUrlParams, zipmap} from \"./utils\";\nimport {COLORS} from \"./config\";\nimport './DistroPlot.scss';\n\nconst scalePadding = 32;\n\ninterface PriceValue {\n    price: string\n    value: number\n    key: string\n}\n\nconst params = getUrlParams();\nconst axisTicks = params['ax'];\nconst nPoints = axisTicks.length;\nconst valueKeys = Object.keys(params).filter((k) => k !== 'ax');\nconst valueParams = zipmap(valueKeys, valueKeys.map((k) => params[k]));\nconst colorKeys = Object.keys(COLORS);\nconst colorIndexMap = zipmap(colorKeys, colorKeys.map((_, i) => i))\nconst series = Object.keys(valueParams).map((k =>\n    valueParams[k].map((v, i) => ({ key: k, price: axisTicks[i], value: parseInt(v) })))\n).sort((a, b) => colorIndexMap[a.key] - colorIndexMap[b.key]);\nconst allData = series.reduce((rec, d) => rec.concat(d), []);\n\nconst getX = (d: PriceValue) => d.price;\nconst getY = (d: PriceValue) => d.value;\n\nconst xScale = scaleBand<string>({\n    domain: axisTicks,\n    paddingOuter: 1,\n    paddingInner: 1,\n});\nconst yScale = scaleLinear<number>({\n    domain: [0, max(allData, getY) as number],\n});\n\nconst tickLabelProps = () =>\n({\n    fontSize: 14,\n    textAnchor: 'middle'\n} as const);\n\nconst includeTick = (i: number) => {\n    if (axisTicks.length % 2 === 0) {\n        return i > 0 && i < axisTicks.length - 2 && i % 2 === 0;\n    } else {\n        return i > 1 && i < axisTicks.length - 1 && i % 2 === 0;\n    }\n}\n\nconst DistroPlot = () => (\n    <ParentSize debounceTime={0} className='bg'>\n        {({ width, height }) => {\n            const scaleHeight = height - scalePadding;\n            xScale.range([0, width + 24]);\n            yScale.range([scaleHeight - 16, 0]);\n            return (\n                <svg width={width} height={height}>\n                    {width > 8 &&\n                    series.map((lineData, i) => {\n                        return (\n                            <Group key={`lines-${i}`} top={0} left={0}>\n                                <LinePath<PriceValue>\n                                    curve={curveBasis}\n                                    data={lineData}\n                                    x={d => xScale(getX(d)) ?? 0}\n                                    y={d => yScale(getY(d)) ?? 0}\n                                    stroke={COLORS[lineData[0].key]}\n                                    strokeWidth={5}\n                                    strokeOpacity={0.875}\n                                    shapeRendering=\"geometricPrecision\"\n                                />\n                            </Group>\n                        );\n                    })}\n                    <AxisBottom\n                        axisClassName='axis'\n                        hideAxisLine={true}\n                        tickLength={2}\n                        top={scaleHeight}\n                        scale={xScale}\n                        tickLabelProps={tickLabelProps}\n                        tickValues={axisTicks.filter((_, i) => includeTick(i))}\n                        numTicks={nPoints}\n                    />\n                </svg>\n            );\n        }\n    }\n    </ParentSize>\n);\n\nexport default DistroPlot;"],"sourceRoot":""}