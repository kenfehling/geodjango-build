{"version":3,"sources":["hooks/useSelect.tsx","dashboard/MapPlot.tsx","Dashboard.tsx"],"names":["useSelect","tooltipContent","React","useState","selectedItem","selectItem","origUseTooltip","showTooltip","origHideTooltip","hideTooltip","tooltipData","tooltipTop","tooltipLeft","handleTooltip","useCallback","item","value","event","localPoint","x","y","addTooltip","componentFn","c","callback","cloneElement","props","fillOpacity","strokeOpacity","onTouchStart","onTouchMove","onMouseOver","onMouseLeave","renderTooltip","TooltipWithBounds","top","left","className","Math","random","unitedStates","topojson","topology","objects","states","features","colors","TooltipContent","children","MapPlot","width","height","centerX","centerY","scale","AlbersUsa","data","translate","map","i","feature","path","projection","d","fill","stroke","strokeWidth","require","useStyles","makeStyles","theme","title","display","breakpoints","up","menuButton","marginRight","spacing","formControl","margin","Dashboard","classes","prefersDarkMode","useMediaQuery","setData","setXAxisVar","setYAxisVar","setSizeVar","useEffect","csv","then","useMemo","createTheme","palette","type","primary","main","showPlot","ThemeProvider","CssBaseline","AppBar","position","elevation","Toolbar","variant","IconButton","edge","color","Typography","id","Card","ParentSize","debounceTime","style","FormControl","InputLabel","htmlFor","NativeSelect","defaultValue","onChange","target"],"mappings":"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","file":"static/js/6.9d06098a.chunk.js","sourcesContent":["import React from \"react\";\nimport {useTooltip as origUseTooltip, TooltipWithBounds} from \"@visx/tooltip\";\nimport {localPoint} from \"@visx/event\";\n\nconst useSelect = (tooltipContent) => {\n    const [selectedItem, selectItem] = React.useState(null);\n\n    const {\n        showTooltip,\n        hideTooltip: origHideTooltip,\n        tooltipData,\n        tooltipTop = 0,\n        tooltipLeft = 0\n    } = origUseTooltip();\n\n    const handleTooltip = React.useCallback(\n        (item, value, event: React.TouchEvent<SVGCircleElement> | React.MouseEvent<SVGCircleElement>) => {\n            selectItem(item);\n            const { x, y } = localPoint(event) || { x: 0, y: 0 };\n            showTooltip({\n                tooltipData: tooltipContent({item, value}),\n                tooltipLeft: x,\n                tooltipTop: y,\n            });\n        },\n        [selectItem, tooltipContent, showTooltip]\n    );\n\n    const hideTooltip = () => {\n        selectItem(null);\n        origHideTooltip();\n    };\n\n    const addTooltip = (item, value, componentFn) => {\n        const c = componentFn();\n        const callback = (event) => handleTooltip(item, value, event);\n        return React.cloneElement(c, {\n            ...c.props,\n            fillOpacity: item === selectedItem ? 1 : 0.6,\n            strokeOpacity: item === selectedItem ? 1 : 0.6,\n            onTouchStart: callback,\n            onTouchMove: callback,\n            onMouseOver: callback,\n            onMouseLeave: hideTooltip,\n        });\n    }\n    \n    const renderTooltip = () => {\n        return tooltipData && (\n            <div>\n                <TooltipWithBounds\n                    key={Math.random()}\n                    top={tooltipTop - 12}\n                    left={tooltipLeft + 12}\n                    className='tooltip MuiPaper-elevation5'\n                >\n                    {tooltipData}\n                </TooltipWithBounds>\n            </div>\n        )}\n\n    return {selectedItem, addTooltip, hideTooltip, renderTooltip}\n};\n\nexport default useSelect;\n","import React, { useState } from 'react';\nimport { geoCentroid } from 'd3-geo';\nimport { AlbersUsa } from '@visx/geo';\nimport * as topojson from 'topojson-client';\nimport topology from '../data/usa-topo.json';\nimport stateAbbrs from '../data/us-abbr.json';\nimport useSelect from \"../hooks/useSelect\";\nimport {Circle} from \"@visx/shape\";\n\nexport const borderColor = '#FFF';\n\nexport type GeoAlbersUsaProps = {\n    width: number;\n    height: number;\n    fullSize?: boolean;\n};\n\ninterface FeatureShape {\n    type: 'Feature';\n    id: string;\n    geometry: { coordinates: [number, number][][]; type: 'Polygon' };\n    properties: { name: string };\n}\n\n// @ts-ignore\nconst { features: unitedStates } = topojson.feature(topology, topology.objects.states) as {\n    type: 'FeatureCollection';\n    features: FeatureShape[];\n};\n\nexport const colors: string[] = ['#ff3333', '#0066ff', '#ff9999', '#66CCff'];\n\nconst TooltipContent = ({children}) => (\n    <div className='tooltip-content'>\n        <h3>State</h3>\n        <div>This is a state, bitch</div>\n    </div>\n);\n\nconst MapPlot = ({ width, height }: GeoAlbersUsaProps) => {\n    const centerX = width / 2;\n    const centerY = height / 2;\n    const scale = (width + height) / 1.55;\n\n    const {selectedItem, addTooltip, hideTooltip, renderTooltip} =\n        useSelect(TooltipContent);\n\n    return width < 10 ? null : (\n        <>\n            <svg width={width} height={height}>\n                <AlbersUsa<FeatureShape>\n                    data={unitedStates}\n                    scale={scale}\n                    translate={[centerX, centerY]}\n                >\n                    {({ features }) =>\n                        features.map(({ feature, path, projection }, i) =>\n                            addTooltip(feature, 0, () => (\n                                <path\n                                    key={`map-feature-${i}`}\n                                    d={path || ''}\n                                    fill={colors[i % 4]}\n                                    stroke={borderColor}\n                                    strokeWidth={0.5}\n                                />\n                        ))\n\n                        )\n                    }\n                </AlbersUsa>\n            </svg>\n            {renderTooltip()}\n        </>\n    );\n}\n\nexport default MapPlot;\n","import React from 'react';\nimport {\n    AppBar, createTheme,\n    ThemeProvider,\n    IconButton,\n    makeStyles,\n    Toolbar,\n    CssBaseline,\n    Typography, useMediaQuery, Card, InputLabel, NativeSelect, FormControl\n} from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport BubblePlot from \"./dashboard/BubblePlot\";\nimport MapPlot from \"./dashboard/MapPlot\";\nimport {ParentSize} from \"@visx/responsive\";\nimport './Dashboard.scss';\nimport {csv} from 'd3-fetch';\n\nrequire('typeface-roboto');\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        display: 'none',\n        [theme.breakpoints.up('xs')]: {\n            display: 'block',\n        },\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    formControl: {\n        margin: theme.spacing(1)\n    }\n}));\n\nfunction Dashboard() {\n    const classes = useStyles();\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n    const [data, setData] = React.useState(null);\n    const [xAxisVar, setXAxisVar] = React.useState('Median home price');\n    const [yAxisVar, setYAxisVar] = React.useState('Median rent');\n    const [sizeVar, setSizeVar] = React.useState('Population')\n\n    React.useEffect(() => {\n        csv('data/dataset.csv').then(setData);\n    }, []);\n\n    const theme = React.useMemo(\n        () =>\n            createTheme({\n                palette: {\n                    type: prefersDarkMode ? 'dark' : 'light',\n                    primary: {\n                        main: prefersDarkMode ? '#47A' : '#58C'\n                    },\n                },\n            }),\n        [prefersDarkMode],\n    );\n\n    const showPlot = (width: number, height: number) => {\n        // return data ? <BubblePlot data={data.slice(0, 100)}\n        //                    width={width}\n        //                    height={height}\n        //                    sizeVar={sizeVar}\n        //                    xAxisVar={xAxisVar}\n        //                    yAxisVar={yAxisVar} /> : null\n        return <MapPlot width={width} height={height} />\n    };\n\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <AppBar position=\"static\" elevation={prefersDarkMode ? 0 : 3}>\n                <Toolbar variant=\"dense\">\n                    <IconButton edge=\"start\"\n                                className={classes.menuButton}\n                                color=\"inherit\"\n                                aria-label=\"menu\">\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Statistipedia Explore\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <div id=\"dashboard\">\n                <main>\n                    <div id=\"main-plot\">\n                        <Card className='section'>\n                            <ParentSize debounceTime={0} className='bg'>\n                                {({ width, height }) => (\n                                    <div style={{ width, height }}>\n                                        {showPlot(width, height)}\n                                    </div>\n                                )}\n                            </ParentSize>\n                        </Card>\n                    </div>\n                </main>\n                <aside>\n                    <div className='controls'>\n                        <FormControl className={classes.formControl}>\n                            <InputLabel htmlFor=\"x-axis\">X-Axis</InputLabel>\n                            <NativeSelect id=\"x-axis\" defaultValue='Median home price'\n                                          onChange={(event) => setXAxisVar(event.target.value)}\n                            >\n                                <option>Median home price</option>\n                                <option>Median rent</option>\n                                <option>Population</option>\n                            </NativeSelect>\n                        </FormControl>\n                        <FormControl className={classes.formControl}>\n                            <InputLabel htmlFor=\"y-axis\">Y-Axis</InputLabel>\n                            <NativeSelect id=\"y-axis\" defaultValue='Median rent'\n                                          onChange={(event) => setYAxisVar(event.target.value)}\n                            >\n                                <option>Median home price</option>\n                                <option>Median rent</option>\n                                <option>Population</option>\n                            </NativeSelect>\n                        </FormControl>\n                        <FormControl className={classes.formControl}>\n                            <InputLabel htmlFor=\"size\">Size</InputLabel>\n                            <NativeSelect id=\"size\" defaultValue='Population'\n                                          onChange={(event) => setSizeVar(event.target.value)}\n                            >\n                                <option>Median home price</option>\n                                <option>Median rent</option>\n                                <option>Population</option>\n                            </NativeSelect>\n                        </FormControl>\n                        <FormControl className={classes.formControl}>\n                            <InputLabel htmlFor=\"color\">Color</InputLabel>\n                            <NativeSelect id=\"color\"\n                                          onChange={(event) => setXAxisVar(event.target.value)}\n                            >\n                                <option>Region</option>\n                            </NativeSelect>\n                        </FormControl>\n                        <FormControl className={classes.formControl}>\n                            <InputLabel htmlFor=\"granularity\">Granularity</InputLabel>\n                            <NativeSelect id=\"granularity\" defaultValue='place'>\n                                <option>State</option>\n                                <option>County</option>\n                                <option>Place</option>\n                            </NativeSelect>\n                        </FormControl>\n                    </div>\n                </aside>\n            </div>\n        </ThemeProvider>\n    );\n}\n\nexport default Dashboard;\n"],"sourceRoot":""}